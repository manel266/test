{"version":3,"file":"applicationInsightsClient.js","sourceRoot":"","sources":["../../src/applicationInsightsClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,4CAAwC;AACxC,wEAAiH;AAEjH;;EAEE;AACF,MAAa,yBAAyB;IAGlC;;;OAGG;IACH,YAAY,OAA0C;QAClD,IAAI,CAAC,OAAO,GAAG,IAAI,uDAA+B,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC;IAEM,KAAK;QACR,QAAQ;IACZ,CAAC;IAEM,eAAe;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC1C,CAAC;IAEM,aAAa;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,SAAS;QACZ,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS;QACZ,OAAO,gBAAM,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC;IAED;;KAEC;IACM,KAAK,CAAC,KAAK;QACd,IAAI;YACA,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SAC9B;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;IAEA;IACO,KAAK,CAAC,QAAQ;QACjB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;CACJ;AAvDD,8DAuDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { ApplicationInsightsConfig } from \"./applicationInsightsConfig\";\r\nimport { Logger } from \"./shim/logging\";\r\nimport { AzureMonitorOpenTelemetryClient, AzureMonitorOpenTelemetryOptions } from \"@azure/monitor-opentelemetry\";\r\n\r\n/** \r\n* @deprecated Use TelemetryClient instead\r\n*/\r\nexport class ApplicationInsightsClient {\r\n    private _client: AzureMonitorOpenTelemetryClient;\r\n\r\n    /**\r\n     * Constructs a new client\r\n     * @param options AzureMonitorOpenTelemetryOptions\r\n     */\r\n    constructor(options?: AzureMonitorOpenTelemetryOptions) {\r\n        this._client = new AzureMonitorOpenTelemetryClient(options);\r\n    }\r\n\r\n    public start() {\r\n        // No Op\r\n    }\r\n\r\n    public getTraceHandler(): any {\r\n        return this._client[\"_traceHandler\"];\r\n    }\r\n\r\n    public getMetricHandler(): any {\r\n        return this._client[\"_metricHandler\"];\r\n    }\r\n\r\n    public getLogHandler(): any {\r\n        return this._client[\"_logHandler\"];\r\n    }\r\n\r\n    /**\r\n     * @deprecated This method should not be used\r\n     */\r\n    public getConfig(): ApplicationInsightsConfig {\r\n        return null;\r\n    }\r\n\r\n    public getLogger(): Logger {\r\n        return Logger.getInstance();\r\n    }\r\n\r\n    /**\r\n   *Try to send all queued telemetry if present.\r\n   */\r\n    public async flush(): Promise<void> {\r\n        try {\r\n            await this._client.flush();\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to flush telemetry\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n  *Shutdown all handlers\r\n  */\r\n    public async shutdown(): Promise<void> {\r\n        this._client.shutdown();\r\n    }\r\n}\r\n"]}