"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalConfig = void 0;
const jsonConfig_1 = require("./jsonConfig");
const logging_1 = require("../logging");
class InternalConfig {
    constructor(options) {
        this.extendedMetrics = {};
        // Load config values from env variables and JSON if available
        this._loadDefaultValues();
        this._mergeConfig();
        // This will take precedence over other settings
        if (options) {
            this.enableAutoCollectExceptions =
                options.enableAutoCollectExceptions || this.enableAutoCollectExceptions;
            this.logInstrumentations = options.logInstrumentations || this.logInstrumentations;
        }
    }
    set logInstrumentations(value) {
        this._logInstrumentations = Object.assign(this._logInstrumentations, value);
    }
    get logInstrumentations() {
        return this._logInstrumentations;
    }
    /**
     * Get Instrumentation Key
     * @deprecated This method should not be used
     */
    getDisableStatsbeat() {
        return false;
    }
    _loadDefaultValues() {
        this.enableAutoCollectExceptions =
            this.enableAutoCollectExceptions !== undefined
                ? this.enableAutoCollectExceptions
                : true;
        this._logInstrumentations = {
            console: { enabled: false },
            bunyan: { enabled: false },
            winston: { enabled: false },
        };
        this.extendedMetrics["gc" /* ExtendedMetricType.gc */] = false;
        this.extendedMetrics["heap" /* ExtendedMetricType.heap */] = false;
        this.extendedMetrics["loop" /* ExtendedMetricType.loop */] = false;
    }
    _mergeConfig() {
        try {
            const jsonConfig = jsonConfig_1.JsonConfig.getInstance();
            this.enableAutoCollectExceptions =
                jsonConfig.enableAutoCollectExceptions !== undefined
                    ? jsonConfig.enableAutoCollectExceptions
                    : this.enableAutoCollectExceptions;
            if (jsonConfig.logInstrumentations) {
                if (jsonConfig.logInstrumentations.console &&
                    jsonConfig.logInstrumentations.console.enabled !== undefined) {
                    this.logInstrumentations.console.enabled =
                        jsonConfig.logInstrumentations.console.enabled;
                }
                if (jsonConfig.logInstrumentations.bunyan &&
                    jsonConfig.logInstrumentations.bunyan.enabled !== undefined) {
                    this.logInstrumentations.bunyan.enabled =
                        jsonConfig.logInstrumentations.bunyan.enabled;
                }
                if (jsonConfig.logInstrumentations.winston &&
                    jsonConfig.logInstrumentations.winston.enabled !== undefined) {
                    this.logInstrumentations.winston.enabled =
                        jsonConfig.logInstrumentations.winston.enabled;
                }
            }
            if (jsonConfig.extendedMetrics) {
                if (jsonConfig.extendedMetrics["gc" /* ExtendedMetricType.gc */] !== undefined) {
                    this.extendedMetrics["gc" /* ExtendedMetricType.gc */] =
                        jsonConfig.extendedMetrics["gc" /* ExtendedMetricType.gc */];
                }
                if (jsonConfig.extendedMetrics["heap" /* ExtendedMetricType.heap */] !== undefined) {
                    this.extendedMetrics["heap" /* ExtendedMetricType.heap */] =
                        jsonConfig.extendedMetrics["heap" /* ExtendedMetricType.heap */];
                }
                if (jsonConfig.extendedMetrics["loop" /* ExtendedMetricType.loop */] !== undefined) {
                    this.extendedMetrics["loop" /* ExtendedMetricType.loop */] =
                        jsonConfig.extendedMetrics["loop" /* ExtendedMetricType.loop */];
                }
            }
        }
        catch (error) {
            logging_1.Logger.getInstance().error("Failed to load JSON config file values.", error);
        }
    }
}
exports.InternalConfig = InternalConfig;
//# sourceMappingURL=internal.js.map