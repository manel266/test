{"version":3,"file":"nativeMetrics.js","sourceRoot":"","sources":["../../../../src/shim/autoCollection/nativeMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { AzureMonitorOpenTelemetryOptions } from \"@azure/monitor-opentelemetry\";\r\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\r\nimport {\r\n    MeterProvider,\r\n    MeterProviderOptions,\r\n    PeriodicExportingMetricReader,\r\n    PeriodicExportingMetricReaderOptions,\r\n} from \"@opentelemetry/sdk-metrics\";\r\nimport { Histogram, Meter, ObservableGauge, ObservableResult } from \"@opentelemetry/api\";\r\nimport { Logger } from \"../logging\";\r\n\r\n/**\r\n * Azure Monitor Native Metrics\r\n * @internal\r\n */\r\nexport class NativeMetrics {\r\n    private _emitter: any;\r\n    private _handle: NodeJS.Timer | undefined;\r\n    private _collectionInterval = 60000; // 60 seconds\r\n    private _meterProvider: MeterProvider;\r\n    private _azureExporter: AzureMonitorMetricExporter;\r\n    private _metricReader: PeriodicExportingMetricReader;\r\n    private _meter: Meter;\r\n    private _eventLoopHistogram: Histogram;\r\n    private _garbageCollectionScavenge: Histogram;\r\n    private _garbageCollectionMarkSweepCompact: Histogram;\r\n    private _garbageCollectionIncrementalMarking: Histogram;\r\n    private _heapMemoryTotalGauge: ObservableGauge;\r\n    private _heapMemoryUsageGauge: ObservableGauge;\r\n    private _memoryUsageNonHeapGauge: ObservableGauge;\r\n    private _options: AzureMonitorOpenTelemetryOptions;\r\n\r\n    /**\r\n     * Initializes a new instance of the NativeMetrics class.\r\n     * @param options - Distro configuration.\r\n     * @param config - Native Metrics extra configuration.\r\n     */\r\n    constructor(options: AzureMonitorOpenTelemetryOptions, config?: { collectionInterval: number }) {\r\n        this._options = options;\r\n        const meterProviderConfig: MeterProviderOptions = {\r\n            resource: this._options.resource,\r\n        };\r\n        this._meterProvider = new MeterProvider(meterProviderConfig);\r\n        this._azureExporter = new AzureMonitorMetricExporter(this._options.azureMonitorExporterConfig);\r\n        const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\r\n            exporter: this._azureExporter as any,\r\n            exportIntervalMillis: config?.collectionInterval || this._collectionInterval,\r\n        };\r\n        this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\r\n        this._meterProvider.addMetricReader(this._metricReader);\r\n        this._meter = this._meterProvider.getMeter(\"AzureMonitorNativeMetricsMeter\");\r\n        this._eventLoopHistogram = this._meter.createHistogram(\"Event Loop CPU Time\");\r\n        this._garbageCollectionScavenge = this._meter.createHistogram(\r\n            \"Scavenge Garbage Collection Duration\"\r\n        );\r\n        this._garbageCollectionMarkSweepCompact = this._meter.createHistogram(\r\n            \"MarkSweepCompact Garbage Collection Duration\"\r\n        );\r\n        this._garbageCollectionIncrementalMarking = this._meter.createHistogram(\r\n            \"IncrementalMarking Collection Duration\"\r\n        );\r\n        this._heapMemoryTotalGauge = this._meter.createObservableGauge(\"Memory Total (Heap)\");\r\n        this._heapMemoryUsageGauge = this._meter.createObservableGauge(\"Memory Usage (Heap)\");\r\n        this._memoryUsageNonHeapGauge = this._meter.createObservableGauge(\"Memory Usage (Non-Heap)\");\r\n        this._initialize();\r\n    }\r\n\r\n    /**\r\n     * Shutdown Meter Provider it will return no-op Meters after being called.\r\n     */\r\n    public shutdown() {\r\n        this._meterProvider.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Force flush Meter Provider.\r\n     */\r\n    public async flush(): Promise<void> {\r\n        await this._meterProvider.forceFlush();\r\n    }\r\n\r\n    private _initialize() {\r\n        // Try to require in the native-metrics library. If it's found initialize it, else do nothing and never try again.\r\n        try {\r\n             // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            const NativeMetricsEmitter = require(\"applicationinsights-native-metrics\");\r\n            this._emitter = new NativeMetricsEmitter();\r\n            Logger.getInstance().info(\"Native metrics module successfully loaded!\");\r\n        } catch (err) {\r\n            // Package not available\r\n            return;\r\n        }\r\n\r\n        // Enable the emitter if we were able to construct one\r\n        if (this._emitter) {\r\n            try {\r\n                // enable self\r\n                this._emitter.enable(true, this._collectionInterval);\r\n            } catch (err) {\r\n                Logger.getInstance().error(\"Native metrics enable failed\", err);\r\n            }\r\n            // Add histogram data collection\r\n            this._handle = setInterval(() => this._collectHistogramData(), this._collectionInterval);\r\n            this._handle.unref();\r\n            // Add observable callbacks\r\n            this._heapMemoryTotalGauge.addCallback(this._getHeapTotal.bind(this));\r\n            this._heapMemoryUsageGauge.addCallback(this._getHeapUsage.bind(this));\r\n            this._memoryUsageNonHeapGauge.addCallback(this._getNonHeapUsage.bind(this));\r\n        }\r\n    }\r\n\r\n    private _getHeapUsage(observableResult: ObservableResult) {\r\n        const memoryUsage = process.memoryUsage();\r\n        const { heapUsed } = memoryUsage;\r\n        observableResult.observe(heapUsed);\r\n    }\r\n\r\n    private _getHeapTotal(observableResult: ObservableResult) {\r\n        const memoryUsage = process.memoryUsage();\r\n        const { heapTotal } = memoryUsage;\r\n        observableResult.observe(heapTotal);\r\n    }\r\n\r\n    private _getNonHeapUsage(observableResult: ObservableResult) {\r\n        const memoryUsage = process.memoryUsage();\r\n        const { heapTotal, rss } = memoryUsage;\r\n        observableResult.observe(rss - heapTotal);\r\n    }\r\n\r\n    private _collectHistogramData() {\r\n        this._getEventLoopCpu();\r\n        this._getGarbageCollection();\r\n    }\r\n\r\n    private _getEventLoopCpu() {\r\n        try {\r\n            const loopData = this._emitter.getLoopData();\r\n            const metrics = loopData.loopUsage;\r\n            if (metrics.count === 0) {\r\n                return;\r\n            }\r\n            this._eventLoopHistogram.record(metrics.total);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Native metrics failed to get event loop CPU\", err);\r\n        }\r\n    }\r\n\r\n    private _getGarbageCollection() {\r\n        try {\r\n            const gcData = this._emitter.getGCData();\r\n            for (const gc in gcData) {\r\n                const metrics = gcData[gc].metrics;\r\n                switch (gc) {\r\n                    case \"IncrementalMarking\":\r\n                        this._garbageCollectionIncrementalMarking.record(metrics.total);\r\n                        break;\r\n                    case \"MarkSweepCompact\":\r\n                        this._garbageCollectionMarkSweepCompact.record(metrics.total);\r\n                        break;\r\n                    case \"Scavenge\":\r\n                        this._garbageCollectionScavenge.record(metrics.total);\r\n                        break;\r\n                }\r\n            }\r\n        } catch (err) {\r\n            Logger.getInstance().error(\r\n                \"Native metrics failed to get event Garbage Collection metrics\",\r\n                err\r\n            );\r\n        }\r\n    }\r\n}\r\n"]}