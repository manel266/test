{"version":3,"file":"winston.sub.js","sourceRoot":"","sources":["../../../../../src/shim/autoCollection/diagnostic-channel/winston.sub.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\nimport { winston } from \"diagnostic-channel-publishers\";\r\nimport { KnownSeverityLevel } from \"../../../declarations/generated\";\r\nimport { TelemetryClient } from \"../../telemetryClient\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nconst winstonToAILevelMap: { [key: string]: (og: string) => string } = {\r\n    syslog(og: string) {\r\n        const map: { [key: string]: string } = {\r\n            emerg: KnownSeverityLevel.Critical,\r\n            alert: KnownSeverityLevel.Critical,\r\n            crit: KnownSeverityLevel.Critical,\r\n            error: KnownSeverityLevel.Error,\r\n            warning: KnownSeverityLevel.Warning,\r\n            notice: KnownSeverityLevel.Information,\r\n            info: KnownSeverityLevel.Information,\r\n            debug: KnownSeverityLevel.Verbose,\r\n        };\r\n\r\n        return map[og] === undefined ? KnownSeverityLevel.Information : map[og];\r\n    },\r\n    npm(og: string) {\r\n        const map: { [key: string]: string } = {\r\n            error: KnownSeverityLevel.Error,\r\n            warn: KnownSeverityLevel.Warning,\r\n            info: KnownSeverityLevel.Information,\r\n            verbose: KnownSeverityLevel.Verbose,\r\n            debug: KnownSeverityLevel.Verbose,\r\n            silly: KnownSeverityLevel.Verbose,\r\n        };\r\n\r\n        return map[og] === undefined ? KnownSeverityLevel.Information : map[og];\r\n    },\r\n    unknown(og: string) {\r\n        return KnownSeverityLevel.Information;\r\n    },\r\n};\r\n\r\nconst subscriber = (event: IStandardEvent<winston.IWinstonData>) => {\r\n    const message = event.data.message as Error | string;\r\n    clients.forEach((client) => {\r\n        if (message instanceof Error) {\r\n            client.trackException({\r\n                exception: message,\r\n                properties: event.data.meta,\r\n            });\r\n        } else {\r\n            const AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);\r\n            client.trackTrace({\r\n                message: message,\r\n                severity: AIlevel,\r\n                properties: event.data.meta,\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        const handlerFound = clients.find((c) => c === client);\r\n        if (handlerFound) {\r\n            return;\r\n        }\r\n        if (clients.length === 0) {\r\n            channel.subscribe<winston.IWinstonData>(\"winston\", subscriber, trueFilter);\r\n        }\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c !== client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"winston\", subscriber);\r\n        }\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"winston\", subscriber);\r\n    clients = [];\r\n}\r\n"]}