"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispose = exports.enable = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
const diagnostic_channel_1 = require("diagnostic-channel");
const generated_1 = require("../../../declarations/generated");
let clients = [];
const winstonToAILevelMap = {
    syslog(og) {
        const map = {
            emerg: generated_1.KnownSeverityLevel.Critical,
            alert: generated_1.KnownSeverityLevel.Critical,
            crit: generated_1.KnownSeverityLevel.Critical,
            error: generated_1.KnownSeverityLevel.Error,
            warning: generated_1.KnownSeverityLevel.Warning,
            notice: generated_1.KnownSeverityLevel.Information,
            info: generated_1.KnownSeverityLevel.Information,
            debug: generated_1.KnownSeverityLevel.Verbose,
        };
        return map[og] === undefined ? generated_1.KnownSeverityLevel.Information : map[og];
    },
    npm(og) {
        const map = {
            error: generated_1.KnownSeverityLevel.Error,
            warn: generated_1.KnownSeverityLevel.Warning,
            info: generated_1.KnownSeverityLevel.Information,
            verbose: generated_1.KnownSeverityLevel.Verbose,
            debug: generated_1.KnownSeverityLevel.Verbose,
            silly: generated_1.KnownSeverityLevel.Verbose,
        };
        return map[og] === undefined ? generated_1.KnownSeverityLevel.Information : map[og];
    },
    unknown(og) {
        return generated_1.KnownSeverityLevel.Information;
    },
};
const subscriber = (event) => {
    const message = event.data.message;
    clients.forEach((client) => {
        if (message instanceof Error) {
            client.trackException({
                exception: message,
                properties: event.data.meta,
            });
        }
        else {
            const AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);
            client.trackTrace({
                message: message,
                severity: AIlevel,
                properties: event.data.meta,
            });
        }
    });
};
function enable(enabled, client) {
    if (enabled) {
        const handlerFound = clients.find((c) => c === client);
        if (handlerFound) {
            return;
        }
        if (clients.length === 0) {
            diagnostic_channel_1.channel.subscribe("winston", subscriber, diagnostic_channel_1.trueFilter);
        }
        clients.push(client);
    }
    else {
        clients = clients.filter((c) => c !== client);
        if (clients.length === 0) {
            diagnostic_channel_1.channel.unsubscribe("winston", subscriber);
        }
    }
}
exports.enable = enable;
function dispose() {
    diagnostic_channel_1.channel.unsubscribe("winston", subscriber);
    clients = [];
}
exports.dispose = dispose;
//# sourceMappingURL=winston.sub.js.map