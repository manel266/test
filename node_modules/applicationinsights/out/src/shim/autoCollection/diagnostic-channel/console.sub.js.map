{"version":3,"file":"console.sub.js","sourceRoot":"","sources":["../../../../../src/shim/autoCollection/diagnostic-channel/console.sub.ts"],"names":[],"mappings":";;;AAAA,4DAA4D;AAC5D,oFAAoF;AACpF,2DAAyE;AAEzE,+DAAqE;AAGrE,IAAI,OAAO,GAAsB,EAAE,CAAC;AAEpC,MAAM,UAAU,GAAG,CAAC,KAA8C,EAAE,EAAE;IAClE,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAyB,CAAC;IACnD,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACvB,IAAI,OAAO,YAAY,KAAK,EAAE;YAC1B,MAAM,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;SACjD;aAAM;YACH,sCAAsC;YACtC,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClD,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACtD;YACD,MAAM,CAAC,UAAU,CAAC;gBACd,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM;oBACvB,CAAC,CAAC,8BAAkB,CAAC,OAAO;oBAC5B,CAAC,CAAC,8BAAkB,CAAC,WAAW;aACvC,CAAC,CAAC;SACN;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,OAAO,EAAE;QACT,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;QACvD,IAAI,YAAY,EAAE;YACd,OAAO;SACV;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAA0B,SAAS,EAAE,UAAU,EAAE,+BAAU,CAAC,CAAC;SACjF;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;QAC9C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;SAC9C;KACJ;AACL,CAAC;AAhBD,wBAgBC;AAED,SAAgB,OAAO;IACnB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC3C,OAAO,GAAG,EAAE,CAAC;AACjB,CAAC;AAHD,0BAGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\nimport { console as consolePub } from \"diagnostic-channel-publishers\";\r\nimport { KnownSeverityLevel } from \"../../../declarations/generated\";\r\nimport { TelemetryClient } from \"../../telemetryClient\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nconst subscriber = (event: IStandardEvent<consolePub.IConsoleData>) => {\r\n    let message = event.data.message as Error | string;\r\n    clients.forEach((client) => {\r\n        if (message instanceof Error) {\r\n            client.trackException({ exception: message });\r\n        } else {\r\n            // Message can have a trailing newline\r\n            if (message.lastIndexOf(\"\\n\") === message.length - 1) {\r\n                message = message.substring(0, message.length - 1);\r\n            }\r\n            client.trackTrace({\r\n                message: message,\r\n                severity: event.data.stderr\r\n                    ? KnownSeverityLevel.Warning\r\n                    : KnownSeverityLevel.Information,\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        const handlerFound = clients.find((c) => c === client);\r\n        if (handlerFound) {\r\n            return;\r\n        }\r\n        if (clients.length === 0) {\r\n            channel.subscribe<consolePub.IConsoleData>(\"console\", subscriber, trueFilter);\r\n        }\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c !== client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"console\", subscriber);\r\n        }\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"console\", subscriber);\r\n    clients = [];\r\n}\r\n"]}