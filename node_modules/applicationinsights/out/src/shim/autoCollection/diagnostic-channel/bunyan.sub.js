"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispose = exports.enable = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
const diagnostic_channel_1 = require("diagnostic-channel");
const generated_1 = require("../../../declarations/generated");
let clients = [];
// Mapping from bunyan levels defined at https://github.com/trentm/node-bunyan/blob/master/lib/bunyan.js#L256
const bunyanToAILevelMap = {
    10: generated_1.KnownSeverityLevel.Verbose,
    20: generated_1.KnownSeverityLevel.Verbose,
    30: generated_1.KnownSeverityLevel.Information,
    40: generated_1.KnownSeverityLevel.Warning,
    50: generated_1.KnownSeverityLevel.Error,
    60: generated_1.KnownSeverityLevel.Critical,
};
const subscriber = (event) => {
    const message = event.data.result;
    clients.forEach((client) => {
        try {
            // Try to parse message as Bunyan log is JSON
            const log = JSON.parse(message);
            if (log.err) {
                client.trackException({ exception: log.err });
                return;
            }
        }
        catch (ex) {
            // Ignore error
        }
        const AIlevel = bunyanToAILevelMap[event.data.level];
        client.trackTrace({ message: message, severity: AIlevel });
    });
};
function enable(enabled, client) {
    if (enabled) {
        const handlerFound = clients.find((c) => c === client);
        if (handlerFound) {
            return;
        }
        if (clients.length === 0) {
            diagnostic_channel_1.channel.subscribe("bunyan", subscriber, diagnostic_channel_1.trueFilter);
        }
        clients.push(client);
    }
    else {
        clients = clients.filter((c) => c !== client);
        if (clients.length === 0) {
            diagnostic_channel_1.channel.unsubscribe("bunyan", subscriber);
        }
    }
}
exports.enable = enable;
function dispose() {
    diagnostic_channel_1.channel.unsubscribe("bunyan", subscriber);
    clients = [];
}
exports.dispose = dispose;
//# sourceMappingURL=bunyan.sub.js.map