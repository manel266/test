"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispose = exports.Configuration = exports.wrapWithCorrelationContext = exports.startOperation = exports.getCorrelationContext = exports.start = exports.setup = exports.defaultClient = exports.TelemetryClient = exports.DistributedTracingModes = exports.Contracts = void 0;
const api_1 = require("@opentelemetry/api");
const logging_1 = require("./logging");
const telemetryClient_1 = require("./telemetryClient");
Object.defineProperty(exports, "TelemetryClient", { enumerable: true, get: function () { return telemetryClient_1.TelemetryClient; } });
const Contracts = require("../declarations/contracts");
exports.Contracts = Contracts;
const types_1 = require("../shim/types");
Object.defineProperty(exports, "DistributedTracingModes", { enumerable: true, get: function () { return types_1.DistributedTracingModes; } });
// export let liveMetricsClient: QuickPulseStateManager;
let _setupString;
let _options;
/**
 * Initializes the default client. Should be called after setting
 * configuration options.
 *
 * @param setupString the Connection String or Instrumentation Key to use. Optional, if
 * this is not specified, the value will be read from the environment
 * variable APPLICATIONINSIGHTS_CONNECTION_STRING or APPINSIGHTS_INSTRUMENTATIONKEY.
 * @returns {Configuration} the configuration class to initialize
 * and start the SDK.
 */
function setup(setupString) {
    // Save the setup string and create a config to modify with other functions in this file
    _setupString = setupString;
    if (!_options) {
        _options = { azureMonitorExporterConfig: { connectionString: _setupString } };
    }
    else {
        logging_1.Logger.getInstance().info("Cannot run applicationinsights.setup() more than once.");
    }
    return Configuration;
}
exports.setup = setup;
/**
 * Starts automatic collection of telemetry. Prior to calling start no
 * telemetry will be *automatically* collected, though manual collection
 * is enabled.
 * @returns {ApplicationInsights} this class
 */
function start() {
    if (!exports.defaultClient) {
        // Creates a new TelemetryClient that uses the _config we configure via the other functions in this file
        exports.defaultClient = new telemetryClient_1.TelemetryClient(_options);
    }
    else {
        logging_1.Logger.getInstance().info("Cannot run applicationinsights.start() more than once.");
    }
    return Configuration;
}
exports.start = start;
/**
 * Returns an object that is shared across all code handling a given request.
 * This can be used similarly to thread-local storage in other languages.
 * Properties set on this object will be available to telemetry processors.
 *
 * Do not store sensitive information here.
 * Custom properties set on this object can be exposed in a future SDK
 * release via outgoing HTTP headers.
 * This is to allow for correlating data cross-component.
 *
 * This method will return null if automatic dependency correlation is disabled.
 * @returns A plain object for request storage or null if automatic dependency correlation is disabled.
 */
function getCorrelationContext() {
    // TODO: Implement this
    return null;
}
exports.getCorrelationContext = getCorrelationContext;
/**
 * **(Experimental!)**
 * Starts a fresh context or propagates the current internal one.
 */
function startOperation(arg1, arg2) {
    // TODO: Implement this
    return null;
}
exports.startOperation = startOperation;
/**
 * Returns a function that will get the same correlation context within its
 * function body as the code executing this function.
 * Use this method if automatic dependency correlation is not propagating
 * correctly to an asynchronous callback.
 */
function wrapWithCorrelationContext(fn, context) {
    // TODO: Implement this
    return null;
}
exports.wrapWithCorrelationContext = wrapWithCorrelationContext;
/**
 * The active configuration for global SDK behaviors, such as auto collection.
 */
class Configuration {
    /**
     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)
     * @param value if true logger activity will be sent to Application Insights
     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)
     * @returns {Configuration} this class
     */
    static setAutoCollectConsole(value, collectConsoleLog = false) {
        if (_options) {
            _options.logInstrumentations.bunyan.enabled = value;
            _options.logInstrumentations.winston.enabled = value;
            _options.logInstrumentations.console.enabled = collectConsoleLog;
        }
        return Configuration;
    }
    /**
     * Sets the state of exception tracking (enabled by default)
     * @param value if true uncaught exceptions will be sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectExceptions(value) {
        if (_options) {
            _options.enableAutoCollectExceptions = value;
        }
        return Configuration;
    }
    /**
     * Sets the state of performance tracking (enabled by default)
     * @param value if true performance counters will be collected every second and sent to Application Insights
     * @param collectExtendedMetrics if true, extended metrics counters will be collected every minute and sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectPerformance(value, collectExtendedMetrics) {
        if (_options) {
            _options.enableAutoCollectPerformance = value;
            if (typeof collectExtendedMetrics === "object") {
                _options.extendedMetrics = Object.assign({}, collectExtendedMetrics);
            }
            if (collectExtendedMetrics === "boolean") {
                if (!collectExtendedMetrics) {
                    _options.extendedMetrics = {
                        ["gc" /* ExtendedMetricType.gc */]: true,
                        ["heap" /* ExtendedMetricType.heap */]: true,
                        ["loop" /* ExtendedMetricType.loop */]: true
                    };
                }
            }
        }
        return Configuration;
    }
    /**
     * Sets the state of pre aggregated metrics tracking (enabled by default)
     * @param value if true pre aggregated metrics will be collected every minute and sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectPreAggregatedMetrics(value) {
        if (_options) {
            _options.enableAutoCollectStandardMetrics = value;
        }
        return Configuration;
    }
    /**
     * Sets the state of request tracking (enabled by default)
     * @param value if true HeartBeat metric data will be collected every 15 minutes and sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectHeartbeat(value) {
        logging_1.Logger.getInstance().info("Heartbeat is not implemented and this method is a no-op.");
        return Configuration;
    }
    /**
     * Sets the state of request tracking (enabled by default)
     * @param value if true requests will be sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectRequests(value) {
        // TODO: Implement this
        return Configuration;
    }
    /**
     * Sets the state of dependency tracking (enabled by default)
     * @param value if true dependencies will be sent to Application Insights
     * @returns {Configuration} this class
     */
    static setAutoCollectDependencies(value) {
        // TODO: Implement this
        return Configuration;
    }
    /**
     * Sets the state of automatic dependency correlation (enabled by default)
     * @param value if true dependencies will be correlated with requests
     * @param useAsyncHooks if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.
     * @returns {Configuration} this class
     */
    static setAutoDependencyCorrelation(value, useAsyncHooks) {
        // TODO: Implement this
        return Configuration;
    }
    /**
     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)
     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.
     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).
     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.
     * @param value if true events that occured while client is offline will be cached on disk
     * @param resendInterval The wait interval for resending cached events.
     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.
     * @returns {Configuration} this class
     */
    /**
     * Enables debug and warning Logger for AppInsights itself.
     * @param enableDebugLogger if true, enables debug Logger
     * @param enableWarningLogger if true, enables warning Logger
     * @returns {Configuration} this class
     */
    static setInternalLogger(enableDebugLogger = false, enableWarningLogger = true) {
        if (enableDebugLogger) {
            logging_1.Logger.getInstance().updateLogLevel(api_1.DiagLogLevel.DEBUG);
            return Configuration;
        }
        if (enableWarningLogger) {
            logging_1.Logger.getInstance().updateLogLevel(api_1.DiagLogLevel.WARN);
            return Configuration;
        }
        // Default
        logging_1.Logger.getInstance().updateLogLevel(api_1.DiagLogLevel.INFO);
        return Configuration;
    }
    /**
     * Enables communication with Application Insights Live Metrics.
     * @param enable if true, enables communication with the live metrics service
     */
    static setSendLiveMetrics(enable = false) {
        logging_1.Logger.getInstance().info("Live Metrics is not implemented and this method is a no-op.");
        return Configuration;
    }
}
exports.Configuration = Configuration;
// Convenience shortcut to ApplicationInsights.start
Configuration.start = start;
/**
 * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration
 */
function dispose() {
    if (exports.defaultClient) {
        exports.defaultClient.shutdown();
    }
    exports.defaultClient = null;
}
exports.dispose = dispose;
//# sourceMappingURL=applicationinsights.js.map