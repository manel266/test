/// <reference types="node" />
import * as events from "events";
import * as http from "http";
import { SpanContext } from "@opentelemetry/api";
import { ICorrelationContext, ITraceparent, ITracestate, Context, HttpRequest } from "./types";
export declare class CorrelationContextManager {
    /**
     *  Provides the current Context.
     *  The context is the most recent one entered into for the current
     *  logical chain of execution, including across asynchronous calls.
     */
    getCurrentContext(): ICorrelationContext | null;
    /**
     *  A helper to generate objects conforming to the CorrelationContext interface
     */
    generateContextObject(operationId: string, parentId?: string, operationName?: string, correlationContextHeader?: string, traceparent?: ITraceparent, tracestate?: ITracestate): ICorrelationContext;
    /**
     *  Runs a function inside a given Context.
     *  All logical children of the execution path that entered this Context
     *  will receive this Context object on calls to GetCurrentContext.
     */
    runWithContext(context: ICorrelationContext, fn: () => any): any;
    /**
     * Wrapper for cls-hooked bindEmitter method
     */
    wrapEmitter(emitter: events.EventEmitter): void;
    /**
     *  Patches a callback to restore the correct Context when getCurrentContext
     *  is run within it. This is necessary if automatic correlation fails to work
     *  with user-included libraries.
     *
     *  The supplied callback will be given the same context that was present for
     *  the call to wrapCallback.  */
    wrapCallback<T>(fn: T, context?: ICorrelationContext): T;
    /**
     *  Enables the CorrelationContextManager.
     */
    enable(forceClsHooked?: boolean): void;
    /**
     * Create new correlation context.
     */
    startOperation(context: Context | (http.IncomingMessage | HttpRequest) | SpanContext, request?: HttpRequest | string): ICorrelationContext | null;
    /**
     *  Disables the CorrelationContextManager.
     */
    disable(): void;
    /**
     * Reset the namespace
     */
    reset(): void;
}
