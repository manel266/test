{"version":3,"file":"correlationContextManager.js","sourceRoot":"","sources":["../../../src/shim/correlationContextManager.ts"],"names":[],"mappings":";;;AAMA,MAAa,yBAAyB;IAClC;;;;OAIG;IACI,iBAAiB;QACpB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,qBAAqB,CACxB,WAAmB,EACnB,QAAiB,EACjB,aAAsB,EACtB,wBAAiC,EACjC,WAA0B,EAC1B,UAAwB;QAExB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACI,cAAc,CAAC,OAA4B,EAAE,EAAa;QAC7D,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,OAA4B;QAC3C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;qCAMiC;IAC1B,YAAY,CAAI,EAAK,EAAE,OAA6B;QACvD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,cAAwB;QAClC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,cAAc,CACjB,OAAqE,EACrE,OAA8B;QAE9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,OAAO;QACV,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,KAAK;QACR,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;CACJ;AAjFD,8DAiFC","sourcesContent":["import * as events from \"events\";\r\nimport * as http from \"http\";\r\n\r\nimport { SpanContext } from \"@opentelemetry/api\";\r\nimport { ICorrelationContext, ITraceparent, ITracestate, Context, HttpRequest } from \"./types\";\r\n\r\nexport class CorrelationContextManager {\r\n    /**\r\n     *  Provides the current Context.\r\n     *  The context is the most recent one entered into for the current\r\n     *  logical chain of execution, including across asynchronous calls.\r\n     */\r\n    public getCurrentContext(): ICorrelationContext | null {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     *  A helper to generate objects conforming to the CorrelationContext interface\r\n     */\r\n    public generateContextObject(\r\n        operationId: string,\r\n        parentId?: string,\r\n        operationName?: string,\r\n        correlationContextHeader?: string,\r\n        traceparent?: ITraceparent,\r\n        tracestate?: ITracestate\r\n    ): ICorrelationContext {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     *  Runs a function inside a given Context.\r\n     *  All logical children of the execution path that entered this Context\r\n     *  will receive this Context object on calls to GetCurrentContext.\r\n     */\r\n    public runWithContext(context: ICorrelationContext, fn: () => any): any {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Wrapper for cls-hooked bindEmitter method\r\n     */\r\n    public wrapEmitter(emitter: events.EventEmitter): void {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     *  Patches a callback to restore the correct Context when getCurrentContext\r\n     *  is run within it. This is necessary if automatic correlation fails to work\r\n     *  with user-included libraries.\r\n     *\r\n     *  The supplied callback will be given the same context that was present for\r\n     *  the call to wrapCallback.  */\r\n    public wrapCallback<T>(fn: T, context?: ICorrelationContext): T {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     *  Enables the CorrelationContextManager.\r\n     */\r\n    public enable(forceClsHooked?: boolean) {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Create new correlation context.\r\n     */\r\n    public startOperation(\r\n        context: Context | (http.IncomingMessage | HttpRequest) | SpanContext,\r\n        request?: HttpRequest | string\r\n    ): ICorrelationContext | null {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     *  Disables the CorrelationContextManager.\r\n     */\r\n    public disable() {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Reset the namespace\r\n     */\r\n    public reset() {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n}\r\n"]}