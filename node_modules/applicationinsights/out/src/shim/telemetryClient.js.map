{"version":3,"file":"telemetryClient.js","sourceRoot":"","sources":["../../../src/shim/telemetryClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,wEAA+E;AAC/E,4CAAgG;AAChG,kEAA+E;AAC/E,8EAAyE;AAEzE,yDAA6N;AAC7N,uCAAoC;AACpC,uCAAmC;AACnC,iCAA8B;AAC9B,sDAA8D;AAC9D,4DAAgF;AAEhF,uDAA0D;AAG1D;;;GAGG;AACH,MAAa,eAAe;IAUxB;;;OAGG;IACH,YAAY,KAA2C;QACnD,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;QAC7B,IAAI,KAAK,EAAE;YACP,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;gBAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;aACzB;iBAAM;gBACH,qCAAqC;gBACrC,IAAI,CAAC,QAAQ,GAAG;oBACZ,0BAA0B,EAAE;wBACxB,gBAAgB,EAAE,KAAK;qBAC1B;iBACJ,CAAC;aACL;SACJ;QACD,iFAAiF;QACjF,IAAI,CAAC,eAAe,GAAG,IAAI,yBAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEzD,IAAI,CAAC,OAAO,GAAG,IAAI,uDAA+B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,IAAI,4BAAkB,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,eAAe,CAAC,2BAA2B,EAAE;YAClD,IAAI,CAAC,WAAW,GAAG,IAAI,kCAAqB,CAAC,IAAI,CAAC,CAAC;SACtD;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,kCAAiB,EAAE,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;IACnE,CAAC;IAEM,kCAAkC;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,iBAAiB,CAAC,SAA0C;QAC/D,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAC3C,SAAS,CACZ,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;OAGG;IACI,aAAa,CAAC,SAAsC;QACvD,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CACvC,SAAS,CACZ,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,SAAmC;QACjD,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAiB,CAAC;YACpE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,SAAuC;QACzD,IAAI,SAAS,IAAI,SAAS,CAAC,SAAS,IAAI,CAAC,WAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YACtF,SAAS,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;SACnE;QACD,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CACxC,SAAS,CACI,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,SAAmC;QACjD,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACpD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACV,gBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,SAAoC;QACnD,8BAA8B;QAC9B,mFAAmF;QACnF,uBAAuB;QACvB,mCAAmC;QACnC,6CAA6C;IACjD,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,SAAqC;QACrD,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QAC/C,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,QAAQ,CAAC;QAEzD,kDAAkD;QAClD,MAAM,GAAG,GAAG,aAAO,CAAC,MAAM,EAAE,CAAC;QAC7B,MAAM,UAAU,qBACT,SAAS,CAAC,UAAU,CAC1B,CAAC;QACF,UAAU,CAAC,yCAAkB,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC;QACpD,UAAU,CAAC,yCAAkB,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;QACxD,UAAU,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC;QACvE,MAAM,OAAO,GAAgB;YACzB,IAAI,EAAE,cAAQ,CAAC,MAAM;YACrB,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE,SAAS;SACvB,CAAC;QACF,MAAM,IAAI,GAAQ,IAAI,CAAC,OAAO;aACzB,SAAS,EAAE;aACX,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC;YACX,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAc,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAc,CAAC,KAAK;SACrE,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED;;;;;SAKK;IACE,eAAe,CAAC,SAAwC;QAC3D,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QAC/C,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,QAAQ,CAAC;QACzD,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,EAAE;YAClD,8CAA8C;YAC9C,iDAAiD;YACjD,qEAAqE;YACrE,kEAAkE;YAClE,IAAI;gBACA,SAAS,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;aACnD;YAAC,OAAO,KAAK,EAAE;gBACZ,4DAA4D;gBAC5D,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC;gBACxB,gBAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;aACpF;SACJ;QACD,MAAM,GAAG,GAAG,aAAO,CAAC,MAAM,EAAE,CAAC;QAC7B,MAAM,UAAU,qBACT,SAAS,CAAC,UAAU,CAC1B,CAAC;QACF,IAAI,SAAS,CAAC,kBAAkB,EAAE;YAC9B,IAAI,SAAS,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gBACjE,UAAU,CAAC,yCAAkB,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,CAAC,yDAAyD;gBAC9G,UAAU,CAAC,yCAAkB,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC;gBACzD,UAAU,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC;aAC1E;iBAAM,IAAI,WAAI,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE;gBACxE,UAAU,CAAC,yCAAkB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,kBAAkB,CAAC;gBACxE,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC;aAChE;SACJ;QACD,IAAI,SAAS,CAAC,MAAM,EAAE;YAClB,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;SAClE;QACD,MAAM,OAAO,GAAgB;YACzB,IAAI,EAAE,cAAQ,CAAC,MAAM;YACrB,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE,SAAS;SACvB,CAAC;QACF,MAAM,IAAI,GAAQ,IAAI,CAAC,OAAO;aACzB,SAAS,EAAE;aACX,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC;YACX,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAc,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAc,CAAC,KAAK;SACrE,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,KAAK;QACd,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;;QACjB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,MAAA,IAAI,CAAC,WAAW,0CAAE,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,SAA8B,EAAE,aAAsC;QAC/E,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACI,8BAA8B;QACjC,gGAAgG;IACpG,CAAC;IAED;;OAEG;IACI,YAAY;QACf,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB,CACzB,KAAc,EACd,cAAuB,EACvB,cAAuB;QAEvB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACI,qBAAqB,CACxB,kBAGY;QAEZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,wBAAwB;QAC3B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEO,qBAAqB,CACzB,SAA8B,EAC9B,QAAgB,EAChB,QAAuB;QAEvB,IAAI;YACA,MAAM,UAAU,qBACT,SAAS,CAAC,UAAU,CAC1B,CAAC;YACF,MAAM,MAAM,GAAc,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,WAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;YAC7C,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,GAAG,EAAE;YACR,gBAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kDAAkD,EAAE,GAAG,CAAC,CAAC;SACtF;IACL,CAAC;IAED;;;OAGG;IACK,wBAAwB,CAC5B,SAA0C;QAE1C,MAAM,QAAQ,GAAG,kBAAkB,CAAC;QACpC,MAAM,QAAQ,GAAqB;YAC/B,EAAE,EAAE,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE;YACtD,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,QAAQ,EAAE,WAAI,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;YAC7D,OAAO,EAAE,SAAS,CAAC,OAAO;YAC1B,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,OAAO,EAAE,SAAS,CAAC,OAAO;YAC1B,YAAY,EAAE,SAAS,CAAC,YAAY;YACpC,OAAO,EAAE,CAAC;SACb,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACK,qBAAqB,CACzB,SAAuC;QAEvC,MAAM,QAAQ,GAAG,eAAe,CAAC;QACjC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,WAAW,GAAG,IAAA,uBAAU,EAAC,KAAK,CAAC,CAAC;QACtC,MAAM,gBAAgB,GAA8B;YAChD,OAAO,EAAE,SAAS,CAAC,SAAS,CAAC,OAAO;YACpC,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC,IAAI;YAClC,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,WAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC;SAClF,CAAC;QAEF,MAAM,QAAQ,GAA2B;YACrC,aAAa,EAAE,SAAS,CAAC,QAAQ,IAAI,8BAAkB,CAAC,KAAK;YAC7D,UAAU,EAAE,CAAC,gBAAgB,CAAC;YAC9B,YAAY,EAAE,SAAS,CAAC,YAAY;YACpC,OAAO,EAAE,CAAC;SACb,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,SAAmC;QACzD,MAAM,QAAQ,GAAG,aAAa,CAAC;QAC/B,MAAM,QAAQ,GAAgB;YAC1B,OAAO,EAAE,SAAS,CAAC,OAAO;YAC1B,aAAa,EAAE,SAAS,CAAC,QAAQ,IAAI,8BAAkB,CAAC,WAAW;YACnE,YAAY,EAAE,SAAS,CAAC,YAAY;YACpC,OAAO,EAAE,CAAC;SACb,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACK,oBAAoB,CACxB,SAAsC;QAEtC,MAAM,QAAQ,GAAG,cAAc,CAAC;QAChC,MAAM,QAAQ,GAAiB;YAC3B,EAAE,EAAE,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE;YACtD,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,QAAQ,EAAE,WAAI,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;YAC7D,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,YAAY,EAAE,SAAS,CAAC,YAAY;YACpC,OAAO,EAAE,CAAC;SACb,CAAC;QAEF,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,SAAmC;QACzD,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,QAAQ,GAAuB;YACjC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,YAAY,EAAE,SAAS,CAAC,YAAY;YACpC,OAAO,EAAE,CAAC;SACb,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AA9ZD,0CA8ZC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { LogRecord } from \"@opentelemetry/api-logs\";\r\nimport { LogRecord as SDKLogRecord } from \"@opentelemetry/sdk-logs\";\r\nimport { AzureMonitorOpenTelemetryClient } from \"@azure/monitor-opentelemetry\";\r\nimport { Attributes, context, SpanKind, SpanOptions, SpanStatusCode } from \"@opentelemetry/api\";\r\nimport { IdGenerator, RandomIdGenerator } from \"@opentelemetry/sdk-trace-base\";\r\nimport { SemanticAttributes } from \"@opentelemetry/semantic-conventions\";\r\nimport * as Contracts from \"../declarations/contracts\";\r\nimport { AvailabilityData, TelemetryItem as Envelope, KnownSeverityLevel, MessageData, MonitorDomain, PageViewData, TelemetryEventData, TelemetryExceptionData, TelemetryExceptionDetails } from \"../declarations/generated\";\r\nimport { Context } from \"./context\";\r\nimport { Logger } from \"./logging\";\r\nimport { Util } from \"./util\";\r\nimport { AutoCollectConsole } from \"./autoCollection/console\";\r\nimport { AutoCollectExceptions, parseStack } from \"./autoCollection/exceptions\";\r\nimport { ApplicationInsightsOptions } from \"../types\";\r\nimport { InternalConfig } from \"./configuration/internal\";\r\n\r\n\r\n/**\r\n * Application Insights telemetry client provides interface to track telemetry items, register telemetry initializers and\r\n * and manually trigger immediate sending (flushing)\r\n */\r\nexport class TelemetryClient {\r\n    private readonly _internalConfig: InternalConfig;\r\n    private _options: ApplicationInsightsOptions;\r\n    private _client: AzureMonitorOpenTelemetryClient;\r\n    private _console: AutoCollectConsole;\r\n    private _exceptions: AutoCollectExceptions;\r\n    private _idGenerator: IdGenerator;\r\n    public context: Context;\r\n    public commonProperties: { [key: string]: string }; // TODO: Add setter so Resources are updated\r\n\r\n    /**\r\n     * Constructs a new client of the client\r\n     * @param setupString the Connection String or Instrumentation Key to use (read from environment variable if not specified)\r\n     */\r\n    constructor(input?: string | ApplicationInsightsOptions) {\r\n        this.commonProperties = {};\r\n        this.context = new Context();\r\n        if (input) {\r\n            if (typeof (input) === \"object\") {\r\n                this._options = input;\r\n            } else {\r\n                // TODO: Add Support for iKey as well\r\n                this._options = {\r\n                    azureMonitorExporterConfig: {\r\n                        connectionString: input\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        // Internal config with extra configuration not available in Azure Monitor Distro\r\n        this._internalConfig = new InternalConfig(this._options);\r\n\r\n        this._client = new AzureMonitorOpenTelemetryClient(this._options);\r\n        this._console = new AutoCollectConsole(this);\r\n        if (this._internalConfig.enableAutoCollectExceptions) {\r\n            this._exceptions = new AutoCollectExceptions(this);\r\n        }\r\n        this._idGenerator = new RandomIdGenerator();\r\n        this._console.enable(this._internalConfig.logInstrumentations);\r\n    }\r\n\r\n    public getAzureMonitorOpenTelemetryClient(): AzureMonitorOpenTelemetryClient {\r\n        return this._client;\r\n    }\r\n\r\n    public getInternalConfig(): InternalConfig {\r\n        return this._internalConfig;\r\n    }\r\n\r\n    /**\r\n     * Log information about availability of an application\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackAvailability(telemetry: Contracts.AvailabilityTelemetry): void {\r\n        try {\r\n            const logRecord = this._availabilityToLogRecord(\r\n                telemetry\r\n            );\r\n            this._client.getLogger().emit(logRecord);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to send telemetry.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log a page view\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackPageView(telemetry: Contracts.PageViewTelemetry): void {\r\n        try {\r\n            const logRecord = this._pageViewToLogRecord(\r\n                telemetry\r\n            );\r\n            this._client.getLogger().emit(logRecord);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to send telemetry.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log a trace message\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackTrace(telemetry: Contracts.TraceTelemetry): void {\r\n        try {\r\n            const logRecord = this._traceToLogRecord(telemetry) as SDKLogRecord;\r\n            this._client.getLogger().emit(logRecord);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to send telemetry.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log an exception\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackException(telemetry: Contracts.ExceptionTelemetry): void {\r\n        if (telemetry && telemetry.exception && !Util.getInstance().isError(telemetry.exception)) {\r\n            telemetry.exception = new Error(telemetry.exception.toString());\r\n        }\r\n        try {\r\n            const logRecord = this._exceptionToLogRecord(\r\n                telemetry\r\n            ) as SDKLogRecord;\r\n            this._client.getLogger().emit(logRecord);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to send telemetry.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackEvent(telemetry: Contracts.EventTelemetry): void {\r\n        try {\r\n            const logRecord = this._eventToLogRecord(telemetry);\r\n            this._client.getLogger().emit(logRecord);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"Failed to send telemetry.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n     * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the\r\n     * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackMetric(telemetry: Contracts.MetricTelemetry): void {\r\n        // TODO : Create custom metric\r\n        // let meter = this.client.getMetricHandler().getCustomMetricsHandler().getMeter();\r\n        // let metricName = \"\";\r\n        // let options: MetricOptions = {};\r\n        // meter.createHistogram(metricName, options)\r\n    }\r\n\r\n    /**\r\n     * Log a request. Note that the default client will attempt to collect HTTP requests automatically so only use this for requests\r\n     * that aren't automatically captured or if you've disabled automatic request collection.\r\n     *\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    public trackRequest(telemetry: Contracts.RequestTelemetry): void {\r\n        const startTime = telemetry.time || new Date();\r\n        const endTime = startTime.getTime() + telemetry.duration;\r\n\r\n        // TODO: Change resourceManager if ID is provided?\r\n        const ctx = context.active();\r\n        const attributes: Attributes = {\r\n            ...telemetry.properties,\r\n        };\r\n        attributes[SemanticAttributes.HTTP_METHOD] = \"HTTP\";\r\n        attributes[SemanticAttributes.HTTP_URL] = telemetry.url;\r\n        attributes[SemanticAttributes.HTTP_STATUS_CODE] = telemetry.resultCode;\r\n        const options: SpanOptions = {\r\n            kind: SpanKind.SERVER,\r\n            attributes: attributes,\r\n            startTime: startTime,\r\n        };\r\n        const span: any = this._client\r\n            .getTracer()\r\n            .startSpan(telemetry.name, options, ctx);\r\n        span.setStatus({\r\n            code: telemetry.success ? SpanStatusCode.OK : SpanStatusCode.ERROR,\r\n        });\r\n        span.end(endTime);\r\n    }\r\n\r\n    /**\r\n     * Log a dependency. Note that the default client will attempt to collect dependencies automatically so only use this for dependencies\r\n     * that aren't automatically captured or if you've disabled automatic dependency collection.\r\n     *\r\n     * @param telemetry      Object encapsulating tracking option\r\n     * */\r\n    public trackDependency(telemetry: Contracts.DependencyTelemetry) {\r\n        const startTime = telemetry.time || new Date();\r\n        const endTime = startTime.getTime() + telemetry.duration;\r\n        if (telemetry && !telemetry.target && telemetry.data) {\r\n            // url.parse().host returns null for non-urls,\r\n            // making this essentially a no-op in those cases\r\n            // If this logic is moved, update jsdoc in DependencyTelemetry.target\r\n            // url.parse() is deprecated, update to use WHATWG URL API instead\r\n            try {\r\n                telemetry.target = new URL(telemetry.data).host;\r\n            } catch (error) {\r\n                // set target as null to be compliant with previous behavior\r\n                telemetry.target = null;\r\n                Logger.getInstance().warn(this.constructor.name, \"Failed to create URL.\", error);\r\n            }\r\n        }\r\n        const ctx = context.active();\r\n        const attributes: Attributes = {\r\n            ...telemetry.properties,\r\n        };\r\n        if (telemetry.dependencyTypeName) {\r\n            if (telemetry.dependencyTypeName.toLowerCase().indexOf(\"http\") > -1) {\r\n                attributes[SemanticAttributes.HTTP_METHOD] = \"HTTP\"; // TODO: Dependency doesn't expose method in any property\r\n                attributes[SemanticAttributes.HTTP_URL] = telemetry.data;\r\n                attributes[SemanticAttributes.HTTP_STATUS_CODE] = telemetry.resultCode;\r\n            } else if (Util.getInstance().isDbDependency(telemetry.dependencyTypeName)) {\r\n                attributes[SemanticAttributes.DB_SYSTEM] = telemetry.dependencyTypeName;\r\n                attributes[SemanticAttributes.DB_STATEMENT] = telemetry.data;\r\n            }\r\n        }\r\n        if (telemetry.target) {\r\n            attributes[SemanticAttributes.PEER_SERVICE] = telemetry.target;\r\n        }\r\n        const options: SpanOptions = {\r\n            kind: SpanKind.CLIENT,\r\n            attributes: attributes,\r\n            startTime: startTime,\r\n        };\r\n        const span: any = this._client\r\n            .getTracer()\r\n            .startSpan(telemetry.name, options, ctx);\r\n        span.setStatus({\r\n            code: telemetry.success ? SpanStatusCode.OK : SpanStatusCode.ERROR,\r\n        });\r\n        span.end(endTime);\r\n    }\r\n\r\n    /**\r\n     * Immediately send all queued telemetry.\r\n     */\r\n    public async flush(): Promise<void> {\r\n        this._client.flush();\r\n    }\r\n\r\n    /**\r\n     * Shutdown client\r\n     */\r\n    public async shutdown(): Promise<void> {\r\n        this._client.shutdown();\r\n        this._console.shutdown();\r\n        this._console = null;\r\n        this._exceptions?.shutdown();\r\n        this._exceptions = null;\r\n    }\r\n\r\n    /**\r\n     * Generic track method for all telemetry types\r\n     * @param data the telemetry to send\r\n     * @param telemetryType specify the type of telemetry you are tracking from the list of Contracts.DataTypes\r\n     */\r\n    public track(telemetry: Contracts.Telemetry, telemetryType: Contracts.TelemetryType) {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Automatically populate telemetry properties like RoleName when running in Azure\r\n     *\r\n     * @param value if true properties will be populated\r\n     */\r\n    public setAutoPopulateAzureProperties() {\r\n        // TODO: Config is only used during initialization of ResourceManager so it cannot be set after.\r\n    }\r\n\r\n    /*\r\n     * Get Statsbeat instance\r\n     */\r\n    public getStatsbeat(): any {\r\n        return null;\r\n    }\r\n\r\n    public setUseDiskRetryCaching(\r\n        value: boolean,\r\n        resendInterval?: number,\r\n        maxBytesOnDisk?: number\r\n    ) {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Adds telemetry processor to the collection. Telemetry processors will be called one by one\r\n     * before telemetry item is pushed for sending and in the order they were added.\r\n     *\r\n     * @param telemetryProcessor function, takes Envelope, and optional context object and returns boolean\r\n     */\r\n    public addTelemetryProcessor(\r\n        telemetryProcessor: (\r\n            envelope: Envelope,\r\n            contextObjects?: { [name: string]: any }\r\n        ) => boolean\r\n    ) {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    /*\r\n     * Removes all telemetry processors\r\n     */\r\n    public clearTelemetryProcessors() {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    private _telemetryToLogRecord(\r\n        telemetry: Contracts.Telemetry,\r\n        baseType: string,\r\n        baseData: MonitorDomain\r\n    ): LogRecord {\r\n        try {\r\n            const attributes: Attributes = {\r\n                ...telemetry.properties,\r\n            };\r\n            const record: LogRecord = { attributes: attributes, body: Util.getInstance().stringify(baseData) };\r\n            record.attributes[\"_MS.baseType\"] = baseType;\r\n            return record;\r\n        }\r\n        catch (err) {\r\n            Logger.getInstance().warn(\"Failed to convert telemetry event to Log Record.\", err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Availability Log to LogRecord parsing.\r\n     * @internal\r\n     */\r\n    private _availabilityToLogRecord(\r\n        telemetry: Contracts.AvailabilityTelemetry\r\n    ): LogRecord {\r\n        const baseType = \"AvailabilityData\";\r\n        const baseData: AvailabilityData = {\r\n            id: telemetry.id || this._idGenerator.generateSpanId(),\r\n            name: telemetry.name,\r\n            duration: Util.getInstance().msToTimeSpan(telemetry.duration),\r\n            success: telemetry.success,\r\n            runLocation: telemetry.runLocation,\r\n            message: telemetry.message,\r\n            measurements: telemetry.measurements,\r\n            version: 2,\r\n        };\r\n        const record = this._telemetryToLogRecord(telemetry, baseType, baseData);\r\n        return record;\r\n    }\r\n\r\n    /**\r\n     * Exception to LogRecord parsing.\r\n     * @internal\r\n     */\r\n    private _exceptionToLogRecord(\r\n        telemetry: Contracts.ExceptionTelemetry\r\n    ): LogRecord {\r\n        const baseType = \"ExceptionData\";\r\n        const stack = telemetry.exception[\"stack\"];\r\n        const parsedStack = parseStack(stack);\r\n        const exceptionDetails: TelemetryExceptionDetails = {\r\n            message: telemetry.exception.message,\r\n            typeName: telemetry.exception.name,\r\n            parsedStack: parsedStack,\r\n            hasFullStack: Util.getInstance().isArray(parsedStack) && parsedStack.length > 0,\r\n        };\r\n\r\n        const baseData: TelemetryExceptionData = {\r\n            severityLevel: telemetry.severity || KnownSeverityLevel.Error,\r\n            exceptions: [exceptionDetails],\r\n            measurements: telemetry.measurements,\r\n            version: 2,\r\n        };\r\n        const record = this._telemetryToLogRecord(telemetry, baseType, baseData);\r\n        return record;\r\n    }\r\n\r\n    /**\r\n     * Trace to LogRecord parsing.\r\n     * @internal\r\n     */\r\n    private _traceToLogRecord(telemetry: Contracts.TraceTelemetry): LogRecord {\r\n        const baseType = \"MessageData\";\r\n        const baseData: MessageData = {\r\n            message: telemetry.message,\r\n            severityLevel: telemetry.severity || KnownSeverityLevel.Information,\r\n            measurements: telemetry.measurements,\r\n            version: 2,\r\n        };\r\n        const record = this._telemetryToLogRecord(telemetry, baseType, baseData);\r\n        return record;\r\n    }\r\n\r\n    /**\r\n     * PageView to LogRecord parsing.\r\n     * @internal\r\n     */\r\n    private _pageViewToLogRecord(\r\n        telemetry: Contracts.PageViewTelemetry\r\n    ): LogRecord {\r\n        const baseType = \"PageViewData\";\r\n        const baseData: PageViewData = {\r\n            id: telemetry.id || this._idGenerator.generateSpanId(),\r\n            name: telemetry.name,\r\n            duration: Util.getInstance().msToTimeSpan(telemetry.duration),\r\n            url: telemetry.url,\r\n            referredUri: telemetry.referredUri,\r\n            measurements: telemetry.measurements,\r\n            version: 2,\r\n        };\r\n\r\n        const record = this._telemetryToLogRecord(telemetry, baseType, baseData);\r\n        return record;\r\n    }\r\n\r\n    /**\r\n     * Event to LogRecord parsing.\r\n     * @internal\r\n     */\r\n    private _eventToLogRecord(telemetry: Contracts.EventTelemetry): LogRecord {\r\n        const baseType = \"EventData\";\r\n        const baseData: TelemetryEventData = {\r\n            name: telemetry.name,\r\n            measurements: telemetry.measurements,\r\n            version: 2,\r\n        };\r\n        const record = this._telemetryToLogRecord(telemetry, baseType, baseData);\r\n        return record;\r\n    }\r\n}\r\n"]}