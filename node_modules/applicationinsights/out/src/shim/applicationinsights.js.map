{"version":3,"file":"applicationinsights.js","sourceRoot":"","sources":["../../../src/shim/applicationinsights.ts"],"names":[],"mappings":"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","sourcesContent":["import { IncomingMessage } from \"http\";\r\nimport { DiagLogLevel, SpanContext } from \"@opentelemetry/api\";\r\n\r\nimport { Logger } from \"./logging\";\r\nimport { ICorrelationContext, Context, HttpRequest } from \"./types\";\r\nimport { TelemetryClient } from \"./telemetryClient\";\r\nimport * as Contracts from \"../declarations/contracts\";\r\nimport { ApplicationInsightsOptions, ExtendedMetricType } from \"../types\";\r\nimport { DistributedTracingModes } from \"../shim/types\";\r\n\r\n\r\n// We export these imports so that SDK users may use these classes directly.\r\n// They're exposed using \"export import\" so that types are passed along as expected\r\nexport { Contracts, DistributedTracingModes, HttpRequest, TelemetryClient };\r\n\r\n/**\r\n * The default client, initialized when setup was called. To initialize a different client\r\n * with its own configuration, use `new TelemetryClient(instrumentationKey?)`.\r\n */\r\nexport let defaultClient: TelemetryClient;\r\n// export let liveMetricsClient: QuickPulseStateManager;\r\n\r\n\r\nlet _setupString: string | undefined;\r\nlet _options: ApplicationInsightsOptions;\r\n\r\n/**\r\n * Initializes the default client. Should be called after setting\r\n * configuration options.\r\n *\r\n * @param setupString the Connection String or Instrumentation Key to use. Optional, if\r\n * this is not specified, the value will be read from the environment\r\n * variable APPLICATIONINSIGHTS_CONNECTION_STRING or APPINSIGHTS_INSTRUMENTATIONKEY.\r\n * @returns {Configuration} the configuration class to initialize\r\n * and start the SDK.\r\n */\r\nexport function setup(setupString?: string) {\r\n    // Save the setup string and create a config to modify with other functions in this file\r\n    _setupString = setupString;\r\n    if (!_options) {\r\n        _options = { azureMonitorExporterConfig: { connectionString: _setupString } };\r\n    } else {\r\n        Logger.getInstance().info(\"Cannot run applicationinsights.setup() more than once.\");\r\n    }\r\n    return Configuration;\r\n}\r\n\r\n/**\r\n * Starts automatic collection of telemetry. Prior to calling start no\r\n * telemetry will be *automatically* collected, though manual collection\r\n * is enabled.\r\n * @returns {ApplicationInsights} this class\r\n */\r\nexport function start() {\r\n    if (!defaultClient) {\r\n        // Creates a new TelemetryClient that uses the _config we configure via the other functions in this file\r\n        defaultClient = new TelemetryClient(_options);\r\n    } else {\r\n        Logger.getInstance().info(\"Cannot run applicationinsights.start() more than once.\");\r\n    }\r\n    return Configuration;\r\n}\r\n\r\n/**\r\n * Returns an object that is shared across all code handling a given request.\r\n * This can be used similarly to thread-local storage in other languages.\r\n * Properties set on this object will be available to telemetry processors.\r\n *\r\n * Do not store sensitive information here.\r\n * Custom properties set on this object can be exposed in a future SDK\r\n * release via outgoing HTTP headers.\r\n * This is to allow for correlating data cross-component.\r\n *\r\n * This method will return null if automatic dependency correlation is disabled.\r\n * @returns A plain object for request storage or null if automatic dependency correlation is disabled.\r\n */\r\nexport function getCorrelationContext(): ICorrelationContext {\r\n    // TODO: Implement this\r\n    return null;\r\n}\r\n\r\n/**\r\n * **(Experimental!)**\r\n * Starts a fresh context or propagates the current internal one.\r\n */\r\nexport function startOperation(\r\n    arg1: Context | (IncomingMessage | HttpRequest) | SpanContext,\r\n    arg2?: HttpRequest | string\r\n): ICorrelationContext | null {\r\n    // TODO: Implement this\r\n    return null;\r\n}\r\n\r\n/**\r\n * Returns a function that will get the same correlation context within its\r\n * function body as the code executing this function.\r\n * Use this method if automatic dependency correlation is not propagating\r\n * correctly to an asynchronous callback.\r\n */\r\nexport function wrapWithCorrelationContext<T>(fn: T, context?: ICorrelationContext): T {\r\n    // TODO: Implement this\r\n    return null;\r\n}\r\n\r\n/**\r\n * The active configuration for global SDK behaviors, such as auto collection.\r\n */\r\nexport class Configuration {\r\n    // Convenience shortcut to ApplicationInsights.start\r\n    public static start = start;\r\n\r\n    /**\r\n     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)\r\n     * @param value if true logger activity will be sent to Application Insights\r\n     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectConsole(value: boolean, collectConsoleLog = false) {\r\n        if (_options) {\r\n            _options.logInstrumentations.bunyan.enabled = value;\r\n            _options.logInstrumentations.winston.enabled = value;\r\n            _options.logInstrumentations.console.enabled = collectConsoleLog;\r\n        }\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of exception tracking (enabled by default)\r\n     * @param value if true uncaught exceptions will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectExceptions(value: boolean) {\r\n        if (_options) {\r\n            _options.enableAutoCollectExceptions = value;\r\n        }\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * @param value if true performance counters will be collected every second and sent to Application Insights\r\n     * @param collectExtendedMetrics if true, extended metrics counters will be collected every minute and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectPerformance(value: boolean, collectExtendedMetrics: any) {\r\n        if (_options) {\r\n            _options.enableAutoCollectPerformance = value;\r\n            if (typeof collectExtendedMetrics === \"object\") {\r\n                _options.extendedMetrics = { ...collectExtendedMetrics }\r\n            }\r\n            if (collectExtendedMetrics === \"boolean\") {\r\n                if (!collectExtendedMetrics) {\r\n                    _options.extendedMetrics = {\r\n                        [ExtendedMetricType.gc]: true,\r\n                        [ExtendedMetricType.heap]: true,\r\n                        [ExtendedMetricType.loop]: true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of pre aggregated metrics tracking (enabled by default)\r\n     * @param value if true pre aggregated metrics will be collected every minute and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectPreAggregatedMetrics(value: boolean) {\r\n        if (_options) {\r\n            _options.enableAutoCollectStandardMetrics = value;\r\n        }\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true HeartBeat metric data will be collected every 15 minutes and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectHeartbeat(value: boolean) {\r\n        Logger.getInstance().info(\"Heartbeat is not implemented and this method is a no-op.\");\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true requests will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectRequests(value: boolean) {\r\n        // TODO: Implement this\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of dependency tracking (enabled by default)\r\n     * @param value if true dependencies will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectDependencies(value: boolean) {\r\n        // TODO: Implement this\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * @param value if true dependencies will be correlated with requests\r\n     * @param useAsyncHooks if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoDependencyCorrelation(value: boolean, useAsyncHooks?: boolean) {\r\n        // TODO: Implement this\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\r\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occured while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n\r\n    /**\r\n     * Enables debug and warning Logger for AppInsights itself.\r\n     * @param enableDebugLogger if true, enables debug Logger\r\n     * @param enableWarningLogger if true, enables warning Logger\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setInternalLogger(enableDebugLogger = false, enableWarningLogger = true) {\r\n        if (enableDebugLogger) {\r\n            Logger.getInstance().updateLogLevel(DiagLogLevel.DEBUG);\r\n            return Configuration;\r\n        }\r\n        if (enableWarningLogger) {\r\n            Logger.getInstance().updateLogLevel(DiagLogLevel.WARN);\r\n            return Configuration;\r\n        }\r\n        // Default\r\n        Logger.getInstance().updateLogLevel(DiagLogLevel.INFO);\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enables communication with Application Insights Live Metrics.\r\n     * @param enable if true, enables communication with the live metrics service\r\n     */\r\n    public static setSendLiveMetrics(enable = false) {\r\n        Logger.getInstance().info(\"Live Metrics is not implemented and this method is a no-op.\");\r\n        return Configuration;\r\n    }\r\n}\r\n\r\n/**\r\n * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration\r\n */\r\nexport function dispose() {\r\n    if (defaultClient) {\r\n        defaultClient.shutdown();\r\n    }\r\n    defaultClient = null;\r\n}\r\n"]}