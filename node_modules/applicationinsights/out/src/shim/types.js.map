{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/shim/types.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,IAAY,uBAUX;AAVD,WAAY,uBAAuB;IAC/B;;OAEG;IACH,iEAAM,CAAA;IAEN;;OAEG;IACH,iFAAU,CAAA;AACd,CAAC,EAVW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAUlC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nexport enum DistributedTracingModes {\r\n    /**\r\n     * Send Application Insights correlation headers\r\n     */\r\n    AI = 0,\r\n\r\n    /**\r\n     * (Default) Send both W3C Trace Context headers and back-compatibility Application Insights headers\r\n     */\r\n    AI_AND_W3C\r\n}\r\n\r\n/**\r\n * Interface which defines which specific extended metrics should be disabled\r\n *\r\n * @export\r\n * @interface IDisabledExtendedMetrics\r\n */\r\nexport interface IDisabledExtendedMetrics {\r\n    gc?: boolean;\r\n    heap?: boolean;\r\n    loop?: boolean;\r\n}\r\n\r\n\r\nexport interface ITraceparent {\r\n    legacyRootId: string;\r\n    parentId: string;\r\n    spanId: string;\r\n    traceFlag: string;\r\n    traceId: string;\r\n    version: string;\r\n}\r\n\r\nexport interface ITracestate {\r\n    fieldmap: string[];\r\n}\r\n\r\nexport interface ICorrelationContext {\r\n    operation: {\r\n        name: string;\r\n        id: string;\r\n        parentId: string; // Always used for dependencies, may be ignored in favor of incoming headers for requests\r\n        traceparent?: ITraceparent; // w3c context trace\r\n        tracestate?: ITracestate; // w3c context state\r\n    };\r\n    /** Do not store sensitive information here.\r\n     *  Properties here are exposed via outgoing HTTP headers for correlating data cross-component.\r\n     */\r\n    customProperties: ICustomProperties;\r\n}\r\n\r\nexport interface ICustomProperties {\r\n    /**\r\n     * Get a custom property from the correlation context\r\n     */\r\n    getProperty(key: string): string;\r\n    /**\r\n     * Store a custom property in the correlation context.\r\n     * Do not store sensitive information here.\r\n     * Properties stored here are exposed via outgoing HTTP headers for correlating data cross-component.\r\n     * The characters ',' and '=' are disallowed within keys or values.\r\n     */\r\n    setProperty(key: string, value: string): void;\r\n}\r\n\r\n/**\r\n * The context object can be used for writing logs, reading data from bindings, setting outputs and using\r\n * the context.done callback when your exported function is synchronous. A context object is passed\r\n * to your function from the Azure Functions runtime on function invocation.\r\n */\r\nexport interface Context {\r\n    traceContext: TraceContext;\r\n}\r\n\r\n/**\r\n * HTTP request object. Provided to your function when using HTTP Bindings.\r\n */\r\nexport interface HttpRequest {\r\n    method: string | null;\r\n    url: string;\r\n    headers: {\r\n        [key: string]: string;\r\n    };\r\n}\r\n\r\n/**\r\n * TraceContext information to enable distributed tracing scenarios.\r\n */\r\nexport interface TraceContext {\r\n    /** Describes the position of the incoming request in its trace graph in a portable, fixed-length format. */\r\n    traceparent: string | null | undefined;\r\n    /** Extends traceparent with vendor-specific data. */\r\n    tracestate: string | null | undefined;\r\n    /** Holds additional properties being sent as part of request telemetry. */\r\n    attributes:\r\n    | {\r\n        [k: string]: string;\r\n    }\r\n    | null\r\n    | undefined;\r\n}\r\n"]}