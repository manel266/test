{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../../src/shim/logging/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { diag, DiagLogger, DiagLogLevel } from \"@opentelemetry/api\";\r\nimport { InternalAzureLogger } from \"./internalAzureLogger\";\r\n\r\nexport class Logger implements DiagLogger {\r\n    private static _instance: Logger;\r\n\r\n    private _TAG = \"ApplicationInsights:\";\r\n    private _diagLevel: DiagLogLevel;\r\n    private _internalLogger: InternalAzureLogger;\r\n\r\n    static getInstance() {\r\n        if (!Logger._instance) {\r\n            Logger._instance = new Logger();\r\n        }\r\n        return Logger._instance;\r\n    }\r\n\r\n    constructor() {\r\n        this._internalLogger = new InternalAzureLogger();\r\n        const envLogLevel = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL;\r\n        this._diagLevel = DiagLogLevel.WARN; // Default\r\n        switch (envLogLevel) {\r\n            case \"ALL\":\r\n                this._diagLevel = DiagLogLevel.ALL;\r\n                break;\r\n            case \"DEBUG\":\r\n                this._diagLevel = DiagLogLevel.DEBUG;\r\n                break;\r\n            case \"ERROR\":\r\n                this._diagLevel = DiagLogLevel.ERROR;\r\n                break;\r\n            case \"INFO\":\r\n                this._diagLevel = DiagLogLevel.INFO;\r\n                break;\r\n            case \"NONE\":\r\n                this._diagLevel = DiagLogLevel.NONE;\r\n                break;\r\n            case \"VERBOSE\":\r\n                this._diagLevel = DiagLogLevel.VERBOSE;\r\n                break;\r\n            case \"WARN\":\r\n                this._diagLevel = DiagLogLevel.WARN;\r\n                break;\r\n        }\r\n        this.updateLogLevel(this._diagLevel);\r\n    }\r\n\r\n    /**\r\n     * Set the global LogLevel. If a global diag logger is already set, this will override it.\r\n     * @param logLevel - The DiagLogLevel used to filter logs sent to the logger.\r\n     * @param suppressOverrideMessage - Setting that suppress the warning message normally emitted when registering a logger when another logger is already registered.\r\n     */\r\n    public updateLogLevel(logLevel: DiagLogLevel, suppressOverrideMessage = true) {\r\n        this._diagLevel = logLevel;\r\n\r\n        // Set OpenTelemetry Logger\r\n        diag.setLogger(this, {\r\n            logLevel: this._diagLevel,\r\n            suppressOverrideMessage,\r\n        });\r\n    }\r\n\r\n    public error(message?: any, ...optionalParams: any[]) {\r\n        if (this._diagLevel >= DiagLogLevel.ERROR) {\r\n            this._internalLogger.logMessage(this._TAG + message, optionalParams);\r\n        }\r\n    }\r\n\r\n    public warn(message?: any, ...optionalParams: any[]) {\r\n        if (this._diagLevel >= DiagLogLevel.WARN) {\r\n            this._internalLogger.logMessage(this._TAG + message, optionalParams);\r\n        }\r\n    }\r\n\r\n    public info(message?: any, ...optionalParams: any[]) {\r\n        if (this._diagLevel >= DiagLogLevel.INFO) {\r\n            this._internalLogger.logMessage(this._TAG + message, optionalParams);\r\n        }\r\n    }\r\n\r\n    public debug(message?: any, ...optionalParams: any[]) {\r\n        if (this._diagLevel >= DiagLogLevel.DEBUG) {\r\n            this._internalLogger.logMessage(this._TAG + message, optionalParams);\r\n        }\r\n    }\r\n\r\n    public verbose(message?: any, ...optionalParams: any[]) {\r\n        if (this._diagLevel >= DiagLogLevel.VERBOSE) {\r\n            this._internalLogger.logMessage(this._TAG + message, optionalParams);\r\n        }\r\n    }\r\n}\r\n"]}