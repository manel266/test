{"version":3,"file":"internalAzureLogger.js","sourceRoot":"","sources":["../../../../src/shim/logging/internalAzureLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport * as os from \"os\";\r\nimport * as path from \"path\";\r\nimport {\r\n    accessAsync,\r\n    appendFileAsync,\r\n    confirmDirExists,\r\n    getShallowFileSize,\r\n    readdirAsync,\r\n    readFileAsync,\r\n    writeFileAsync,\r\n    unlinkAsync,\r\n} from \"../util\";\r\n\r\nexport class InternalAzureLogger {\r\n    private _TAG = \"InternalLogger:\";\r\n    private _cleanupTimeOut = 60 * 30 * 1000; // 30 minutes;\r\n    private _fileCleanupTimer: NodeJS.Timer = null;\r\n    private _tempDir: string;\r\n    private _logFileName: string;\r\n    private _fileFullPath: string;\r\n    private _backUpNameFormat: string;\r\n    private _logToFile = false;\r\n    private _logToConsole = true;\r\n    private _maxHistory: number;\r\n    private _maxSizeBytes: number;\r\n\r\n    constructor() {\r\n        const logDestination = process.env.APPLICATIONINSIGHTS_LOG_DESTINATION; // destination can be one of file, console or file+console\r\n        if (logDestination === \"file+console\") {\r\n            this._logToFile = true;\r\n        }\r\n        if (logDestination === \"file\") {\r\n            this._logToFile = true;\r\n            this._logToConsole = false;\r\n        }\r\n        this._maxSizeBytes = 50000;\r\n        this._maxHistory = 1;\r\n        this._logFileName = \"applicationinsights.log\";\r\n\r\n        // If custom path not provided use temp folder, /tmp for *nix and USERDIR/AppData/Local/Temp for Windows\r\n        const logFilePath = process.env.APPLICATIONINSIGHTS_LOGDIR;\r\n        if (!logFilePath) {\r\n            this._tempDir = path.join(os.tmpdir(), \"appInsights-node\");\r\n        } else {\r\n            if (path.isAbsolute(logFilePath)) {\r\n                this._tempDir = logFilePath;\r\n            } else {\r\n                this._tempDir = path.join(process.cwd(), logFilePath);\r\n            }\r\n        }\r\n        this._fileFullPath = path.join(this._tempDir, this._logFileName);\r\n        this._backUpNameFormat = `.${this._logFileName}`; // {currentime}.applicationinsights.log\r\n\r\n        if (this._logToFile) {\r\n            if (!this._fileCleanupTimer) {\r\n                this._fileCleanupTimer = setInterval(() => {\r\n                    this._fileCleanupTask();\r\n                }, this._cleanupTimeOut);\r\n                this._fileCleanupTimer.unref();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async logMessage(message?: any, ...optionalParams: any[]) {\r\n        try {\r\n            const args = message ? [message, ...optionalParams] : optionalParams;\r\n            if (this._logToFile) {\r\n                await this._storeToDisk(args);\r\n            }\r\n            if (this._logToConsole) {\r\n                // eslint-disable-next-line no-console\r\n                console.log(...args);\r\n            }\r\n        } catch (err) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(this._TAG, `Failed to log to file: ${err && err.message}`);\r\n        }\r\n    }\r\n\r\n    private async _storeToDisk(args: any): Promise<void> {\r\n        const data = `${args}\\r\\n`;\r\n\r\n        try {\r\n            await confirmDirExists(this._tempDir);\r\n        } catch (err) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(\r\n                this._TAG,\r\n                `Failed to create directory for log file: ${err && err.message}`\r\n            );\r\n            return;\r\n        }\r\n        try {\r\n            await accessAsync(this._fileFullPath, fs.constants.F_OK);\r\n        } catch (err) {\r\n            // No file create one\r\n            try {\r\n                await appendFileAsync(this._fileFullPath, data);\r\n            } catch (appendError) {\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    this._TAG,\r\n                    `Failed to put log into file: ${appendError && appendError.message}`\r\n                );\r\n                return;\r\n            }\r\n        }\r\n        // Check size\r\n        const size = await getShallowFileSize(this._fileFullPath);\r\n        if (size > this._maxSizeBytes) {\r\n            await this._createBackupFile(data);\r\n        } else {\r\n            await appendFileAsync(this._fileFullPath, data);\r\n        }\r\n    }\r\n\r\n    private async _createBackupFile(data: string): Promise<void> {\r\n        try {\r\n            const buffer = await readFileAsync(this._fileFullPath);\r\n            const backupPath = path.join(\r\n                this._tempDir,\r\n                `${new Date().getTime()}.${this._logFileName}`\r\n            );\r\n            await writeFileAsync(backupPath, buffer);\r\n        } catch (err) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(\"Failed to generate backup log file\", err);\r\n        } finally {\r\n            // Store logs\r\n            writeFileAsync(this._fileFullPath, data);\r\n        }\r\n    }\r\n\r\n    private async _fileCleanupTask(): Promise<void> {\r\n        try {\r\n            let files = await readdirAsync(this._tempDir);\r\n            // Filter only backup files\r\n            files = files.filter((f) => path.basename(f).indexOf(this._backUpNameFormat) > -1);\r\n            // Sort by creation date\r\n            files.sort((a: string, b: string) => {\r\n                // Check expiration\r\n                const aCreationDate: Date = new Date(parseInt(a.split(this._backUpNameFormat)[0]));\r\n                const bCreationDate: Date = new Date(parseInt(b.split(this._backUpNameFormat)[0]));\r\n                if (aCreationDate < bCreationDate) {\r\n                    return -1;\r\n                }\r\n                if (aCreationDate >= bCreationDate) {\r\n                    return 1;\r\n                }\r\n            });\r\n            const totalFiles = files.length;\r\n            for (let i = 0; i < totalFiles - this._maxHistory; i++) {\r\n                const pathToDelete = path.join(this._tempDir, files[i]);\r\n                await unlinkAsync(pathToDelete);\r\n            }\r\n        } catch (err) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(this._TAG, `Failed to cleanup log files: ${err && err.message}`);\r\n        }\r\n    }\r\n}\r\n"]}