{"version":3,"file":"appServicesLoader.js","sourceRoot":"","sources":["../../../src/agent/appServicesLoader.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,yBAAyB;AACzB,6BAA6B;AAE7B,8EAAiF;AACjF,wDAAoD;AACpD,qEAAkE;AAClE,iEAA8D;AAC9D,6DAA0D;AAC1D,+CAA4C;AAC5C,mCAAgF;AAGhF,MAAa,iBAAkB,SAAQ,yBAAW;IAE9C;QACI,KAAK,EAAE,CAAC;QACR,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,4CAA4C;YAC5C,MAAM,kBAAkB,GAAe,EAAE,CAAC;YAC1C,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE;gBAC/B,kBAAkB,CAAC,iDAA0B,CAAC,YAAY,CAAC;oBACvD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;aACrC;YACD,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE;gBACjC,kBAAkB,CAAC,iDAA0B,CAAC,mBAAmB,CAAC;oBAC9D,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;aACvC;YACD,MAAM,QAAQ,GAAG,IAAI,oBAAQ,CAAC,kBAAkB,CAAC,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAElC,IAAI,YAAY,GAAG,+BAA+B,CAAC;YACnD,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE;oBAClB,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;iBAC3F;qBACI;oBACD,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,qBAAqB,EAAE,eAAe,EAAE,UAAU,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;iBAC3I;aACJ;YACD,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,uBAAU,CAAC,YAAY,EAAE,oBAAoB,EAAE;gBAC/G,MAAM,EAAE,KAAK;gBACb,YAAY,EAAE,KAAK;gBACnB,YAAY,EAAE,WAAW;gBACzB,SAAS,EAAE,IAAI,GAAG,IAAI;aACzB,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,iBAAiB,GAAG,IAAI,mCAAgB,CACzC,IAAI,CAAC,mBAAmB,EACxB,IAAI,uBAAU,CACV,YAAY,EACZ,mCAAmC,EACnC;gBACI,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,KAAK;gBACnB,YAAY,EAAE,WAAW;gBACzB,SAAS,EAAE,IAAI,GAAG,IAAI,EAAE,OAAO;aAClC,CACJ,CACJ,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,kCAA0B,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,iCAAyB,CAAC,WAAW,CAAC,CAAC;SAC3G;IACL,CAAC;CACJ;AAlDD,8CAkDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { Attributes } from '@opentelemetry/api';\r\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\r\nimport { Resource } from '@opentelemetry/resources';\r\nimport { DiagnosticLogger } from './diagnostics/diagnosticLogger';\r\nimport { FileWriter } from \"./diagnostics/writers/fileWriter\";\r\nimport { StatusLogger } from \"./diagnostics/statusLogger\";\r\nimport { AgentLoader } from \"./agentLoader\";\r\nimport { AgentResourceProviderType, AZURE_MONITOR_AGENT_PREFIX } from './types';\r\n\r\n\r\nexport class AppServicesLoader extends AgentLoader {\r\n\r\n    constructor() {\r\n        super();\r\n        if (this._canLoad) {\r\n            // Azure App Services specific configuration\r\n            const resourceAttributes: Attributes = {};\r\n            if (process.env.WEBSITE_SITE_NAME) {\r\n                resourceAttributes[SemanticResourceAttributes.SERVICE_NAME] =\r\n                    process.env.WEBSITE_SITE_NAME;\r\n            }\r\n            if (process.env.WEBSITE_INSTANCE_ID) {\r\n                resourceAttributes[SemanticResourceAttributes.SERVICE_INSTANCE_ID] =\r\n                    process.env.WEBSITE_INSTANCE_ID;\r\n            }\r\n            const resource = new Resource(resourceAttributes);\r\n            this._options.resource = resource;\r\n\r\n            let statusLogDir = '/var/log/applicationinsights/';\r\n            if (this._isWindows) {\r\n                if (process.env.HOME) {\r\n                    statusLogDir = path.join(process.env.HOME, \"LogFiles\", \"ApplicationInsights\", \"status\");\r\n                }\r\n                else {\r\n                    statusLogDir = path.join(os.tmpdir(), \"Microsoft\", \"ApplicationInsights\", \"StatusMonitor\", \"LogFiles\", \"ApplicationInsights\", \"status\");\r\n                }\r\n            }\r\n            this._statusLogger = new StatusLogger(this._instrumentationKey, new FileWriter(statusLogDir, 'status_nodejs.json', {\r\n                append: false,\r\n                deleteOnExit: false,\r\n                renamePolicy: 'overwrite',\r\n                sizeLimit: 1024 * 1024,\r\n            }));\r\n\r\n            this._diagnosticLogger = new DiagnosticLogger(\r\n                this._instrumentationKey,\r\n                new FileWriter(\r\n                    statusLogDir,\r\n                    'applicationinsights-extension.log',\r\n                    {\r\n                        append: true,\r\n                        deleteOnExit: false,\r\n                        renamePolicy: 'overwrite',\r\n                        sizeLimit: 1024 * 1024, // 1 MB\r\n                    }\r\n                )\r\n            );\r\n            process.env[AZURE_MONITOR_AGENT_PREFIX] = this._getVersionPrefix(AgentResourceProviderType.appServices);\r\n        }\r\n    }\r\n}\r\n"]}