{"version":3,"file":"agentLoader.js","sourceRoot":"","sources":["../../../src/agent/agentLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { ManagedIdentityCredential } from \"@azure/identity\";\r\nimport { AzureMonitorOpenTelemetryClient } from \"@azure/monitor-opentelemetry\";\r\nimport { Util } from \"../shim/util\";\r\nimport { ConsoleWriter } from \"./diagnostics/writers/consoleWriter\";\r\nimport { DiagnosticLogger } from \"./diagnostics/diagnosticLogger\";\r\nimport { StatusLogger } from \"./diagnostics/statusLogger\";\r\nimport { AgentResourceProviderType, DiagnosticMessageId, IDiagnosticLog, IDiagnosticLogger, NODE_JS_RUNTIME_MAJOR_VERSION } from \"./types\";\r\nimport { ApplicationInsightsOptions } from \"../types\";\r\n\r\n\r\nconst forceStart = process.env.APPLICATIONINSIGHTS_FORCE_START === \"true\";\r\n// Azure Connection String\r\nconst ENV_connectionString = \"APPLICATIONINSIGHTS_CONNECTION_STRING\";\r\nconst ENV_AZURE_PREFIX = \"APPSETTING_\"; // Azure adds this prefix to all environment variables\r\nconst ENV_IKEY = \"APPINSIGHTS_INSTRUMENTATIONKEY\"; // This key is provided in the readme\r\nconst LEGACY_ENV_IKEY = \"APPINSIGHTS_INSTRUMENTATION_KEY\";\r\n\r\n\r\nexport class AgentLoader {\r\n    protected _canLoad: boolean;\r\n    protected _options: ApplicationInsightsOptions;\r\n    protected _instrumentationKey: string;\r\n    protected _diagnosticLogger: IDiagnosticLogger;\r\n    protected _statusLogger: StatusLogger;\r\n    protected _isWindows: boolean;\r\n    private _aadCredential: any; // Types not available as library should not be loaded in older versions of Node.js runtime\r\n\r\n    constructor() {\r\n        // Open Telemetry and AAD packages unsusable in older versions of Node.js runtime\r\n        if (NODE_JS_RUNTIME_MAJOR_VERSION <= 8) {\r\n            this._canLoad = false;\r\n        }\r\n        else {\r\n            this._canLoad = true;\r\n            this._aadCredential = this._getAuthenticationCredential();\r\n            // Default options\r\n            this._options = {\r\n                azureMonitorExporterConfig: {\r\n                    disableOfflineStorage: false,\r\n                },\r\n                enableAutoCollectExceptions: true,\r\n                enableAutoCollectPerformance: true,\r\n                enableAutoCollectStandardMetrics: true,\r\n                samplingRatio: 1, // Sample all telemetry by default\r\n                instrumentationOptions: {\r\n                    azureSdk: {\r\n                        enabled: true\r\n                    },\r\n                    http: {\r\n                        enabled: true\r\n                    },\r\n                    mongoDb: {\r\n                        enabled: true\r\n                    },\r\n                    mySql: {\r\n                        enabled: true\r\n                    },\r\n                    postgreSql: {\r\n                        enabled: true\r\n                    },\r\n                    redis4: {\r\n                        enabled: true\r\n                    },\r\n                    redis: {\r\n                        enabled: true\r\n                    },\r\n                }\r\n            };\r\n\r\n            const connectionString = process.env[ENV_connectionString];\r\n            if (connectionString) {\r\n                this._instrumentationKey = this._getInstrumentationKey(connectionString);\r\n            }\r\n            else {\r\n                const instrumentationKey =\r\n                    process.env[ENV_IKEY] ||\r\n                    process.env[ENV_AZURE_PREFIX + ENV_IKEY] ||\r\n                    process.env[LEGACY_ENV_IKEY] ||\r\n                    process.env[ENV_AZURE_PREFIX + LEGACY_ENV_IKEY];\r\n                this._instrumentationKey = instrumentationKey || \"unknown\";\r\n\r\n            }\r\n\r\n\r\n            //Default diagnostic using console\r\n            this._diagnosticLogger = new DiagnosticLogger(this._instrumentationKey, new ConsoleWriter());\r\n            this._statusLogger = new StatusLogger(this._instrumentationKey, new ConsoleWriter());\r\n            this._isWindows = process.platform === 'win32';\r\n        }\r\n    }\r\n\r\n    private _getInstrumentationKey(connectionString: string) {\r\n        if (connectionString) {\r\n            const kvPairs = connectionString.split(\";\");\r\n            for (let i = 0; i < kvPairs.length; i++) {\r\n                const kvParts = kvPairs[i].split(\"=\");\r\n                if (kvParts.length === 2 && kvParts[0].toLowerCase() === \"instrumentationkey\") {\r\n                    return kvParts[1];\r\n                }\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // Exposed so ETW logger could be provider in IPA code\r\n    public setLogger(logger: IDiagnosticLogger) {\r\n        this._diagnosticLogger = logger;\r\n    }\r\n\r\n    public initialize(): AzureMonitorOpenTelemetryClient {\r\n        if (!this._canLoad) {\r\n            const msg = `Cannot load Azure Monitor Application Insights Distro because of unsupported Node.js runtime, currently running in version ${NODE_JS_RUNTIME_MAJOR_VERSION}`;\r\n            console.log(msg);\r\n            return;\r\n        }\r\n        if (this._validate()) {\r\n            try {\r\n                // Initialize Distro\r\n                this._options.azureMonitorExporterConfig.aadTokenCredential = this._aadCredential;\r\n                const appInsightsClient = new AzureMonitorOpenTelemetryClient(this._options);\r\n                // Agent successfully initialized\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: \"Azure Monitor Application Insights Distro was started succesfully.\",\r\n                    messageId: DiagnosticMessageId.attachSuccessful\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n                this._statusLogger.logStatus({\r\n                    AgentInitializedSuccessfully: true\r\n                });\r\n                return appInsightsClient;\r\n\r\n            }\r\n            catch (error) {\r\n                const msg = `Error initializaing Azure Monitor Application Insights Distro.${Util.getInstance().dumpObj(error)}`;\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: msg,\r\n                    messageId: DiagnosticMessageId.unknownError\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n                this._statusLogger.logStatus({\r\n                    AgentInitializedSuccessfully: false,\r\n                    Reason: msg\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    private _validate(): boolean {\r\n        try {\r\n            if (!forceStart && this._sdkAlreadyExists()) {\r\n                this._statusLogger.logStatus({\r\n                    AgentInitializedSuccessfully: false,\r\n                    SDKPresent: true,\r\n                    Reason: \"Azure Monitor Application Insights Distro already available.\"\r\n                })\r\n                return false;\r\n            }\r\n            if (this._instrumentationKey === \"unknown\") {\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: \"Azure Monitor Application Insights Distro wanted to be started, but no Connection String was provided\",\r\n                    messageId: DiagnosticMessageId.missingIkey\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n                this._statusLogger.logStatus({\r\n                    AgentInitializedSuccessfully: false,\r\n                    Reason: diagnosticLog.message\r\n                });\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        catch (err: any) {\r\n            const msg = `Failed to validate Azure Monitor Application Insights Distro initialization.${Util.getInstance().dumpObj(err)}`;\r\n            console.log(msg);\r\n            if (this._diagnosticLogger) {\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: msg,\r\n                    messageId: DiagnosticMessageId.unknownError\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n            }\r\n            if (this._statusLogger) {\r\n                this._statusLogger.logStatus({\r\n                    AgentInitializedSuccessfully: false,\r\n                    Reason: msg\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getAuthenticationCredential(): any {\r\n        let credential = undefined;\r\n        // Try to add AAD Token Credential\r\n        try {\r\n            const authenticationString = process.env[\"APPLICATIONINSIGHTS_AUTHENTICATION_STRING\"];\r\n            if (authenticationString) {\r\n                const kvPairs = authenticationString.split(\";\");\r\n                const result = kvPairs.reduce((fields: any, kv: string) => {\r\n                    const kvParts = kv.split(\"=\");\r\n                    if (kvParts.length === 2) { // only save fields with valid formats\r\n                        const key = kvParts[0].toLowerCase();\r\n                        const value = kvParts[1];\r\n                        fields[key] = value as string;\r\n                    }\r\n                    return fields;\r\n                }, {});\r\n                if (result[\"authorization\"] && result[\"authorization\"] === \"AAD\") {\r\n                    const clientId = result[\"clientid\"];\r\n                    if (clientId) {\r\n                        console.log('AppInsightsAgent: ClientId found, trying to authenticate using Managed Identity.');\r\n                        credential = new ManagedIdentityCredential(clientId);\r\n                    }\r\n                    else {\r\n                        console.log('AppInsightsAgent: Trying to authenticate using System assigned Managed Identity.');\r\n                        credential = new ManagedIdentityCredential(); // System assigned identity\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (authError: any) {\r\n            const msg = `Failed to get authentication credential and enable AAD.${Util.getInstance().dumpObj(authError)}`;\r\n            console.log(msg);\r\n            if (this._diagnosticLogger) {\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: msg,\r\n                    messageId: DiagnosticMessageId.aadEnabled\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n            }\r\n        }\r\n        return credential;\r\n    }\r\n\r\n    private _sdkAlreadyExists(): boolean {\r\n        try {\r\n            // appInstance should either resolve to user SDK or crash. If it resolves to attach SDK, user probably modified their NODE_PATH\r\n            let appInstance: string;\r\n            try {\r\n                // Node 8.9+\r\n                appInstance = (require.resolve as any)(\"applicationinsights\", { paths: [process.cwd()] });\r\n            } catch (e) {\r\n                // Node <8.9\r\n                appInstance = require.resolve(`${process.cwd()}/node_modules/applicationinsights`);\r\n            }\r\n            // If loaded instance is in Azure machine home path do not attach the SDK, this means customer already instrumented their app\r\n            if (appInstance.indexOf(\"home\") > -1) {\r\n                const diagnosticLog: IDiagnosticLog = {\r\n                    message: `Azure Monitor Application Insights Distro already exists. Module is already installed in this application; not re-attaching. Location: ${appInstance}`,\r\n                    messageId: DiagnosticMessageId.sdkExists\r\n                };\r\n                this._diagnosticLogger.logMessage(diagnosticLog);\r\n                return true;\r\n            }\r\n\r\n            // ApplicationInsights could be loaded outside of customer application, attach in this case\r\n            return false;\r\n\r\n        } catch (e) {\r\n            // crashed while trying to resolve \"applicationinsights\", so SDK does not exist. Attach appinsights\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected _getVersionPrefix(rpType: AgentResourceProviderType): string {\r\n        let rp = \"u\"; // Default unknown\r\n        let os = \"u\"; // Default unknown\r\n        if (rpType === AgentResourceProviderType.aks) {\r\n            rp = \"k\";\r\n        }\r\n        else if (rpType === AgentResourceProviderType.appServices) {\r\n            rp = \"a\";\r\n        }\r\n        else if (rpType === AgentResourceProviderType.azureFunctions) {\r\n            rp = \"f\";\r\n        }\r\n        if (process.platform === 'win32') {\r\n            os = \"w\";\r\n        }\r\n        else if (process.platform === 'linux') {\r\n            os = \"l\";\r\n        }\r\n        return `${rp}${os}_`;\r\n    }\r\n\r\n}\r\n"]}