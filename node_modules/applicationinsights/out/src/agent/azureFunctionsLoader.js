"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureFunctionsLoader = void 0;
const resources_1 = require("@opentelemetry/resources");
const agentLoader_1 = require("./agentLoader");
const diagnosticLogger_1 = require("./diagnostics/diagnosticLogger");
const statusLogger_1 = require("./diagnostics/statusLogger");
const azureFunctionsWriter_1 = require("./diagnostics/writers/azureFunctionsWriter");
const types_1 = require("./types");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
class AzureFunctionsLoader extends agentLoader_1.AgentLoader {
    constructor() {
        super();
        if (this._canLoad) {
            // Azure Fn specific configuration
            this._options.enableAutoCollectPerformance = false;
            this._options.enableAutoCollectStandardMetrics = false;
            const resourceAttributes = {};
            if (process.env.WEBSITE_SITE_NAME) {
                resourceAttributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME] =
                    process.env.WEBSITE_SITE_NAME;
            }
            if (process.env.WEBSITE_INSTANCE_ID) {
                resourceAttributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_INSTANCE_ID] =
                    process.env.WEBSITE_INSTANCE_ID;
            }
            const resource = new resources_1.Resource(resourceAttributes);
            this._options.resource = resource;
            const writer = new azureFunctionsWriter_1.AzureFunctionsWriter(this._instrumentationKey);
            this._diagnosticLogger = new diagnosticLogger_1.DiagnosticLogger(this._instrumentationKey, writer);
            this._statusLogger = new statusLogger_1.StatusLogger(this._instrumentationKey, writer);
            process.env[types_1.AZURE_MONITOR_AGENT_PREFIX] = this._getVersionPrefix(types_1.AgentResourceProviderType.azureFunctions);
        }
    }
}
exports.AzureFunctionsLoader = AzureFunctionsLoader;
//# sourceMappingURL=azureFunctionsLoader.js.map