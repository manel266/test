"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationInsightsClient = void 0;
const logging_1 = require("./shim/logging");
const monitor_opentelemetry_1 = require("@azure/monitor-opentelemetry");
/**
* @deprecated Use TelemetryClient instead
*/
class ApplicationInsightsClient {
    /**
     * Constructs a new client
     * @param options AzureMonitorOpenTelemetryOptions
     */
    constructor(options) {
        this._client = new monitor_opentelemetry_1.AzureMonitorOpenTelemetryClient(options);
    }
    start() {
        // No Op
    }
    getTraceHandler() {
        return this._client["_traceHandler"];
    }
    getMetricHandler() {
        return this._client["_metricHandler"];
    }
    getLogHandler() {
        return this._client["_logHandler"];
    }
    /**
     * @deprecated This method should not be used
     */
    getConfig() {
        return null;
    }
    getLogger() {
        return logging_1.Logger.getInstance();
    }
    /**
   *Try to send all queued telemetry if present.
   */
    async flush() {
        try {
            await this._client.flush();
        }
        catch (err) {
            logging_1.Logger.getInstance().error("Failed to flush telemetry", err);
        }
    }
    /**
  *Shutdown all handlers
  */
    async shutdown() {
        this._client.shutdown();
    }
}
exports.ApplicationInsightsClient = ApplicationInsightsClient;
//# sourceMappingURL=applicationInsightsClient.js.map