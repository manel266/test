"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationInsightsConfig = void 0;
/**
* @deprecated Use ApplicationInsightsOptions instead
*/
class ApplicationInsightsConfig {
    /** Connection String used to send telemetry payloads to
     * @deprecated This config should not be used, use azureMonitorExporterConfig to configure Connection String
     */
    set connectionString(connectionString) {
        this.azureMonitorExporterConfig.connectionString = connectionString;
    }
    get connectionString() {
        return this.azureMonitorExporterConfig.connectionString;
    }
    /** AAD TokenCredential to use to authenticate the app
     * @deprecated This config should not be used, use azureMonitorExporterConfig to configure aadTokenCredential
     */
    set aadTokenCredential(aadTokenCredential) {
        this.azureMonitorExporterConfig.aadTokenCredential = aadTokenCredential;
    }
    get aadTokenCredential() {
        return this.azureMonitorExporterConfig.aadTokenCredential;
    }
    /**
     * Disable offline storage when telemetry cannot be exported.
     * @deprecated This config should not be used, use azureMonitorExporterConfig to configure disableOfflineStorage
     */
    set disableOfflineStorage(disableOfflineStorage) {
        this.azureMonitorExporterConfig.disableOfflineStorage = disableOfflineStorage;
    }
    get disableOfflineStorage() {
        return this.azureMonitorExporterConfig.disableOfflineStorage;
    }
    /**
     * Directory to store retriable telemetry when it fails to export.
     * @deprecated This config should not be used, use azureMonitorExporterConfig to configure storageDirectory
     */
    set storageDirectory(storageDirectory) {
        this.azureMonitorExporterConfig.storageDirectory = storageDirectory;
    }
    get storageDirectory() {
        return this.azureMonitorExporterConfig.storageDirectory;
    }
    /**
     * @deprecated This config should not be used, use instrumentationOptions
     */
    set instrumentations(instrumentations) {
        this.instrumentationOptions = instrumentations;
    }
    get instrumentations() {
        return this.instrumentationOptions;
    }
    /**
     * Get Instrumentation Key
     * @deprecated This method should not be used
     */
    getInstrumentationKey() {
        return "";
    }
    /**
     * Get Instrumentation Key
     * @deprecated This method should not be used
     */
    getIngestionEndpoint() {
        return "";
    }
    /**
     * Get Instrumentation Key
     * @deprecated This method should not be used
     */
    getDisableStatsbeat() {
        return false;
    }
}
exports.ApplicationInsightsConfig = ApplicationInsightsConfig;
//# sourceMappingURL=applicationInsightsConfig.js.map