{"version":3,"file":"statsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/statsbeatMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createDefaultHttpClient,\n  createPipelineRequest,\n  HttpMethods,\n} from \"@azure/core-rest-pipeline\";\nimport { diag } from \"@opentelemetry/api\";\nimport {\n  AIMS_API_VERSION,\n  AIMS_FORMAT,\n  AIMS_URI,\n  EU_CONNECTION_STRING,\n  EU_ENDPOINTS,\n  NON_EU_CONNECTION_STRING,\n  StatsbeatResourceProvider,\n  VirtualMachineInfo,\n} from \"./types\";\n\nconst os = require(\"os\");\n\nexport class StatsbeatMetrics {\n  protected _resourceProvider: string = StatsbeatResourceProvider.unknown;\n  protected _vmInfo: VirtualMachineInfo = {};\n  protected _os: string = os.type();\n  protected _resourceIdentifier = \"\";\n\n  protected async _getResourceProvider(): Promise<void> {\n    // Check resource provider\n    this._resourceProvider = StatsbeatResourceProvider.unknown;\n    if (process.env.WEBSITE_SITE_NAME) {\n      // Web apps\n      this._resourceProvider = StatsbeatResourceProvider.appsvc;\n    } else if (process.env.FUNCTIONS_WORKER_RUNTIME) {\n      // Function apps\n      this._resourceProvider = StatsbeatResourceProvider.functions;\n    } else if (await this.getAzureComputeMetadata()) {\n      this._resourceProvider = StatsbeatResourceProvider.vm;\n      this._resourceIdentifier = this._vmInfo.id + \"/\" + this._vmInfo.subscriptionId;\n      // Overrride OS as VM info have higher precedence\n      if (this._vmInfo.osType) {\n        this._os = this._vmInfo.osType;\n      }\n    } else {\n      this._resourceProvider = StatsbeatResourceProvider.unknown;\n    }\n  }\n\n  public async getAzureComputeMetadata(): Promise<boolean> {\n    const httpClient = createDefaultHttpClient();\n    const method: HttpMethods = \"GET\";\n\n    const options = {\n      url: `${AIMS_URI}?${AIMS_API_VERSION}&${AIMS_FORMAT}`,\n      timeout: 5000, // 5 seconds\n      method: method,\n      allowInsecureConnection: true,\n    };\n    const request = createPipelineRequest(options);\n\n    await httpClient\n      .sendRequest(request)\n      .then((res: any) => {\n        if (res.status === 200) {\n          // Success; VM\n          this._vmInfo.isVM = true;\n          let virtualMachineData = \"\";\n          res.on(\"data\", (data: any) => {\n            virtualMachineData += data;\n          });\n          res.on(\"end\", () => {\n            try {\n              let data = JSON.parse(virtualMachineData);\n              this._vmInfo.id = data[\"vmId\"] || \"\";\n              this._vmInfo.subscriptionId = data[\"subscriptionId\"] || \"\";\n              this._vmInfo.osType = data[\"osType\"] || \"\";\n            } catch (error) {\n              diag.debug(\"Failed to parse JSON: \", error);\n            }\n          });\n          return true;\n        } else {\n          return false;\n        }\n      })\n      .catch(() => {\n        return false;\n      });\n    return false;\n  }\n\n  protected _getConnectionString(endpointUrl: string) {\n    let currentEndpoint = endpointUrl;\n    for (let i = 0; i < EU_ENDPOINTS.length; i++) {\n      if (currentEndpoint.includes(EU_ENDPOINTS[i])) {\n        return EU_CONNECTION_STRING;\n      }\n    }\n    return NON_EU_CONNECTION_STRING;\n  }\n}\n"]}