{"version":3,"file":"longIntervalStatsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/longIntervalStatsbeatMetrics.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EACL,IAAI,GAKL,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAgB,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACrE,OAAO,EACL,aAAa,EACb,6BAA6B,GAE9B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAA+B,6BAA6B,EAAE,MAAM,aAAa,CAAC;AACzF,OAAO,KAAK,EAAE,MAAM,2CAA2C,CAAC;AAChE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EACL,gBAAgB,EAChB,kBAAkB,EAGlB,oBAAoB,GAErB,MAAM,SAAS,CAAC;AAEjB,IAAI,QAAQ,GAAwC,IAAI,CAAC;AAEzD;;;GAGG;AACH,MAAM,4BAA6B,SAAQ,gBAAgB;IA8BzD,YAAY,OAAyB;QACnC,KAAK,EAAE,CAAC;QA9BF,sCAAiC,GAAG,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC;QACjF,iCAA4B,GAAW,QAAQ,CAAC,CAAC,QAAQ;QACzD,mBAAc,GAAY,KAAK,CAAC;QAOhC,YAAO,GAAW,KAAK,CAAC;QAKxB,aAAQ,GAAW,CAAC,CAAC;QACrB,qBAAgB,GAAW,CAAC,CAAC;QAgBnC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzE,MAAM,cAAc,GAAgC;YAClD,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;SACzC,CAAC;QAEF,IAAI,IAAI,CAAC,iCAAiC,EAAE;YAC1C,IAAI;gBACF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC,OAAO,CAAC;gBAC3E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC,eAAe,CAAC;aAC5F;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CACR,2EAA2E,KAAK,GAAG,CACpF,CAAC;aACH;SACF;QAED,IAAI,CAAC,mCAAmC,GAAG,IAAI,aAAa,EAAE,CAAC;QAC/D,IAAI,CAAC,0BAA0B,GAAG,IAAI,6BAA6B,CAAC,cAAc,CAAC,CAAC;QAEpF,4CAA4C;QAC5C,MAAM,+BAA+B,GAAyC;YAC5E,QAAQ,EAAE,IAAI,CAAC,0BAA0B;YACzC,oBAAoB,EAClB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,IAAI,IAAI,CAAC,4BAA4B,EAAE,QAAQ;SACjG,CAAC;QAEF,IAAI,CAAC,yBAAyB,GAAG,IAAI,6BAA6B,CAChE,+BAA+B,CAChC,CAAC;QACF,IAAI,CAAC,mCAAmC,CAAC,eAAe,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACzF,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,mCAAmC,CAAC,QAAQ,CAClF,uCAAuC,CACxC,CAAC;QAEF,2BAA2B;QAC3B,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,cAAc,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAEzC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CAClF,gBAAgB,CAAC,OAAO,CACzB,CAAC;QACF,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CACjF,gBAAgB,CAAC,MAAM,CACxB,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG;YACvB,EAAE,EAAE,KAAK,CAAC,GAAG;YACb,EAAE,EAAE,KAAK,CAAC,iBAAiB;YAC3B,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,cAAc,EAAE,IAAI,CAAC,eAAe;YACpC,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,mBAAmB;SAChC,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,WAAW;QACvB,IAAI;YACF,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAElC,yCAAyC;YACzC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,2BAA2B,CAAC,0BAA0B,CACzD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAChC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAC9B,CAAC;YAEF,+DAA+D;YAC/D,IAAI,CAAC,0BAA0B,CAAC,MAAM,CACpC,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC,CAAC,eAAe,EAChE,CAAC,MAAoB,EAAE,EAAE;gBACvB,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,OAAO,EAAE;oBAC5C,IAAI,CAAC,KAAK,CAAC,uDAAuD,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;iBACpF;YACH,CAAC,CACF,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;SACzD;IACH,CAAC;IAEO,gBAAgB,CAAC,gBAAuC;QAC9D,IAAI,UAAU,CAAC;QACf,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,UAAU,mCACL,IAAI,CAAC,iBAAiB,KACzB,OAAO,EAAE,IAAI,CAAC,gBAAgB,EAC9B,IAAI,EAAE,oBAAoB,CAAC,eAAe,GAC3C,CAAC;YACF,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,oBAAO,UAAU,EAAG,CAAC;SAC7E;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,UAAU,mCACL,IAAI,CAAC,iBAAiB,KACzB,OAAO,EAAE,IAAI,CAAC,QAAQ,EACtB,IAAI,EAAE,oBAAoB,CAAC,OAAO,GACnC,CAAC;YACF,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,oBAAO,UAAU,EAAG,CAAC;SAC7E;IACH,CAAC;IAEO,eAAe,CAAC,gBAAkC;QACxD,IAAI,UAAU,mCAAQ,IAAI,CAAC,iBAAiB,GAAK,IAAI,CAAC,iBAAiB,CAAE,CAAC;QAC1E,gBAAgB,CAAC,OAAO,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,mCAAmC,CAAC,QAAQ,EAAE,CAAC;IACtD,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,OAAyB;IACnD,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,4BAA4B,CAAC,OAAO,CAAC,CAAC;KACtD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  diag,\n  BatchObservableResult,\n  ObservableGauge,\n  ObservableResult,\n  Meter,\n} from \"@opentelemetry/api\";\nimport { ExportResult, ExportResultCode } from \"@opentelemetry/core\";\nimport {\n  MeterProvider,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { AzureMonitorExporterOptions, AzureMonitorStatsbeatExporter } from \"../../index\";\nimport * as ai from \"../../utils/constants/applicationinsights\";\nimport { StatsbeatMetrics } from \"./statsbeatMetrics\";\nimport {\n  StatsbeatCounter,\n  STATSBEAT_LANGUAGE,\n  CommonStatsbeatProperties,\n  AttachStatsbeatProperties,\n  StatsbeatFeatureType,\n  StatsbeatOptions,\n} from \"./types\";\n\nlet instance: LongIntervalStatsbeatMetrics | null = null;\n\n/**\n * Long Interval Statsbeat Metrics\n * @internal\n */\nclass LongIntervalStatsbeatMetrics extends StatsbeatMetrics {\n  private _AZURE_MONITOR_STATSBEAT_FEATURES = process.env.AZURE_MONITOR_STATSBEAT_FEATURES;\n  private _statsCollectionLongInterval: number = 86400000; // 1 day\n  private _isInitialized: boolean = false;\n\n  // Custom dimensions\n  private _cikey: string;\n  private _runtimeVersion: string;\n  private _language: string;\n  private _version: string;\n  private _attach: string = \"sdk\";\n\n  private _commonProperties: CommonStatsbeatProperties;\n  private _attachProperties: AttachStatsbeatProperties;\n\n  private _feature: number = 0;\n  private _instrumentation: number = 0;\n\n  private _longIntervalStatsbeatMeterProvider: MeterProvider;\n  private _longIntervalAzureExporter: AzureMonitorStatsbeatExporter;\n  private _longIntervalMetricReader: PeriodicExportingMetricReader;\n  private _longIntervalStatsbeatMeter: Meter;\n\n  // Network Attributes\n  private _connectionString: string;\n\n  // Observable Gauges\n  private _featureStatsbeatGauge: ObservableGauge;\n  private _attachStatsbeatGauge: ObservableGauge;\n\n  constructor(options: StatsbeatOptions) {\n    super();\n    this._connectionString = super._getConnectionString(options.endpointUrl);\n    const exporterConfig: AzureMonitorExporterOptions = {\n      connectionString: this._connectionString,\n    };\n\n    if (this._AZURE_MONITOR_STATSBEAT_FEATURES) {\n      try {\n        this._feature = JSON.parse(this._AZURE_MONITOR_STATSBEAT_FEATURES).feature;\n        this._instrumentation = JSON.parse(this._AZURE_MONITOR_STATSBEAT_FEATURES).instrumentation;\n      } catch (error) {\n        diag.error(\n          `LongIntervalStatsbeat: Failed to parse features/instrumentations (error ${error})`\n        );\n      }\n    }\n\n    this._longIntervalStatsbeatMeterProvider = new MeterProvider();\n    this._longIntervalAzureExporter = new AzureMonitorStatsbeatExporter(exporterConfig);\n\n    // Export Long Interval Statsbeats every day\n    const longIntervalMetricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._longIntervalAzureExporter,\n      exportIntervalMillis:\n        Number(process.env.LONG_INTERVAL_EXPORT_MILLIS) || this._statsCollectionLongInterval, // 1 day\n    };\n\n    this._longIntervalMetricReader = new PeriodicExportingMetricReader(\n      longIntervalMetricReaderOptions\n    );\n    this._longIntervalStatsbeatMeterProvider.addMetricReader(this._longIntervalMetricReader);\n    this._longIntervalStatsbeatMeter = this._longIntervalStatsbeatMeterProvider.getMeter(\n      \"Azure Monitor Long Interval Statsbeat\"\n    );\n\n    // Assign Common Properties\n    this._runtimeVersion = process.version;\n    this._language = STATSBEAT_LANGUAGE;\n    this._version = ai.packageVersion;\n    this._cikey = options.instrumentationKey;\n\n    this._featureStatsbeatGauge = this._longIntervalStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.FEATURE\n    );\n    this._attachStatsbeatGauge = this._longIntervalStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.ATTACH\n    );\n\n    this._commonProperties = {\n      os: super._os,\n      rp: super._resourceProvider,\n      cikey: this._cikey,\n      runtimeVersion: this._runtimeVersion,\n      language: this._language,\n      version: this._version,\n      attach: this._attach,\n    };\n\n    this._attachProperties = {\n      rpId: super._resourceIdentifier,\n    };\n\n    this._isInitialized = true;\n    this._initialize();\n  }\n\n  private async _initialize() {\n    try {\n      await this._getResourceProvider();\n\n      // Add long interval observable callbacks\n      this._attachStatsbeatGauge.addCallback(this._attachCallback.bind(this));\n      this._longIntervalStatsbeatMeter.addBatchObservableCallback(\n        this._featureCallback.bind(this),\n        [this._featureStatsbeatGauge]\n      );\n\n      // Export Feature/Attach Statsbeat once upon app initialization\n      this._longIntervalAzureExporter.export(\n        (await this._longIntervalMetricReader.collect()).resourceMetrics,\n        (result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            diag.error(`LongIntervalStatsbeat: metrics export failed (error ${result.error})`);\n          }\n        }\n      );\n    } catch (error) {\n      diag.debug(\"Call to get the resource provider failed.\");\n    }\n  }\n\n  private _featureCallback(observableResult: BatchObservableResult) {\n    let attributes;\n    if (this._instrumentation) {\n      attributes = {\n        ...this._commonProperties,\n        feature: this._instrumentation,\n        type: StatsbeatFeatureType.INSTRUMENTATION,\n      };\n      observableResult.observe(this._featureStatsbeatGauge, 1, { ...attributes });\n    }\n\n    if (this._feature) {\n      attributes = {\n        ...this._commonProperties,\n        feature: this._feature,\n        type: StatsbeatFeatureType.FEATURE,\n      };\n      observableResult.observe(this._featureStatsbeatGauge, 1, { ...attributes });\n    }\n  }\n\n  private _attachCallback(observableResult: ObservableResult) {\n    let attributes = { ...this._commonProperties, ...this._attachProperties };\n    observableResult.observe(1, attributes);\n  }\n\n  public isInitialized() {\n    return this._isInitialized;\n  }\n\n  public shutdown() {\n    this._longIntervalStatsbeatMeterProvider.shutdown();\n  }\n}\n\n/**\n * Singleton LongIntervalStatsbeatMetrics instance.\n * @internal\n */\nexport function getInstance(options: StatsbeatOptions): LongIntervalStatsbeatMetrics {\n  if (!instance) {\n    instance = new LongIntervalStatsbeatMetrics(options);\n  }\n  return instance;\n}\n"]}