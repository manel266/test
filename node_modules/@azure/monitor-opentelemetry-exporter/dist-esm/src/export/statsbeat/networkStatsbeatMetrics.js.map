{"version":3,"file":"networkStatsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/networkStatsbeatMetrics.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EACL,IAAI,GAKL,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,aAAa,EACb,6BAA6B,GAE9B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAA+B,6BAA6B,EAAE,MAAM,aAAa,CAAC;AACzF,OAAO,KAAK,EAAE,MAAM,2CAA2C,CAAC;AAChE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EACL,gBAAgB,EAChB,kBAAkB,EAClB,gBAAgB,GAIjB,MAAM,SAAS,CAAC;AAEjB,MAAM,OAAO,uBAAwB,SAAQ,gBAAgB;IAgC3D,YAAY,OAAyB;QACnC,KAAK,EAAE,CAAC;QA9BF,mBAAc,GAAY,KAAK,CAAC;QAChC,kCAA6B,GAAW,MAAM,CAAC,CAAC,aAAa;QAE7D,gCAA2B,GAA4B,EAAE,CAAC;QAW1D,YAAO,GAAW,KAAK,CAAC;QAiB9B,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,8BAA8B,GAAG,IAAI,aAAa,EAAE,CAAC;QAE1D,MAAM,cAAc,GAAgC;YAClD,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;SACzC,CAAC;QAEF,IAAI,CAAC,qBAAqB,GAAG,IAAI,6BAA6B,CAAC,cAAc,CAAC,CAAC;QAE/E,6CAA6C;QAC7C,MAAM,0BAA0B,GAAyC;YACvE,QAAQ,EAAE,IAAI,CAAC,qBAAqB;YACpC,oBAAoB,EAAE,OAAO,CAAC,yBAAyB,IAAI,IAAI,CAAC,6BAA6B,EAAE,aAAa;SAC7G,CAAC;QAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,6BAA6B,CAAC,0BAA0B,CAAC,CAAC;QAC1F,IAAI,CAAC,8BAA8B,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC/E,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CACxE,iCAAiC,CAClC,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,cAAc,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAEzC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CACzE,gBAAgB,CAAC,aAAa,CAC/B,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CACzE,gBAAgB,CAAC,aAAa,CAC/B,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CACvE,gBAAgB,CAAC,WAAW,CAC7B,CAAC;QACF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAC1E,gBAAgB,CAAC,cAAc,CAChC,CAAC;QACF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAC3E,gBAAgB,CAAC,eAAe,CACjC,CAAC;QACF,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAC5E,gBAAgB,CAAC,gBAAgB,CAClC,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG;YACvB,EAAE,EAAE,KAAK,CAAC,GAAG;YACb,EAAE,EAAE,KAAK,CAAC,iBAAiB;YAC3B,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,cAAc,EAAE,IAAI,CAAC,eAAe;YACpC,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG;YACxB,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,IAAI,EAAE,IAAI,CAAC,KAAK;SACjB,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,8BAA8B,CAAC,QAAQ,EAAE,CAAC;IACjD,CAAC;IAEO,KAAK,CAAC,WAAW;QACvB,IAAI;YACF,MAAM,KAAK,CAAC,oBAAoB,EAAE,CAAC;YAEnC,mCAAmC;YACnC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACvF,IAAI,CAAC,kBAAkB;aACxB,CAAC,CAAC;YACH,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACrF,IAAI,CAAC,gBAAgB;aACtB,CAAC,CAAC;YACH,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACxF,IAAI,CAAC,mBAAmB;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACzF,IAAI,CAAC,oBAAoB;aAC1B,CAAC,CAAC;YACH,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3E;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;SACzD;IACH,CAAC;IAED,6BAA6B;IACrB,gBAAgB,CAAC,gBAAkC;QACzD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,UAAU,mCAAQ,IAAI,CAAC,iBAAiB,GAAK,IAAI,CAAC,kBAAkB,CAAE,CAAC;QAC3E,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,EAAE,UAAU,CAAC,CAAC;QACzE,OAAO,CAAC,0BAA0B,GAAG,CAAC,CAAC;IACzC,CAAC;IAEO,gBAAgB,CAAC,gBAAuC;QAC9D,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhG;;;;UAIE;QACF,IAAI,UAAU,iDAAQ,IAAI,CAAC,kBAAkB,GAAK,IAAI,CAAC,iBAAiB,KAAE,UAAU,EAAE,CAAC,GAAE,CAAC;QAE1F,uHAAuH;QACvH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/D,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACtE,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,KAAK,oBACrF,UAAU,EACb,CAAC;YACH,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;SAC9C;IACH,CAAC;IAEO,cAAc,CAAC,gBAAuC;QAC5D,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,UAAU,iDAAQ,IAAI,CAAC,kBAAkB,GAAK,IAAI,CAAC,iBAAiB,KAAE,UAAU,EAAE,CAAC,GAAE,CAAC;QAE1F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClD,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACzD,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,oBACtE,UAAU,EACb,CAAC;YACH,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,iBAAiB,CAAC,gBAAuC;QAC/D,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,UAAU,iDAAQ,IAAI,CAAC,kBAAkB,GAAK,IAAI,CAAC,iBAAiB,KAAE,UAAU,EAAE,CAAC,GAAE,CAAC;QAE1F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrD,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAC5D,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,oBAC5E,UAAU,EACb,CAAC;YACH,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;SACpC;IACH,CAAC;IAEO,kBAAkB,CAAC,gBAAuC;QAChE,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,UAAU,iDAAQ,IAAI,CAAC,kBAAkB,GAAK,IAAI,CAAC,iBAAiB,KAAE,aAAa,EAAE,EAAE,GAAE,CAAC;QAE9F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtD,UAAU,CAAC,aAAa,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;YACnE,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,oBAC9E,UAAU,EACb,CAAC;YACH,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,iBAAiB,CAAC,gBAAkC;QAC1D,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,UAAU,mCAAQ,IAAI,CAAC,kBAAkB,GAAK,IAAI,CAAC,iBAAiB,CAAE,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChE,IAAI,cAAc,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;YACzD,cAAc,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;YACzC,IAAI,gBAAgB,GAClB,cAAc,CAAC,iBAAiB,GAAG,cAAc,CAAC,gBAAgB,IAAI,CAAC,CAAC;YAC1E,cAAc,CAAC,2BAA2B;gBACxC,CAAC,cAAc,CAAC,4BAA4B;oBAC1C,cAAc,CAAC,gCAAgC,CAAC;oBAChD,gBAAgB,IAAI,CAAC,CAAC;YAC1B,cAAc,CAAC,gCAAgC,GAAG,cAAc,CAAC,4BAA4B,CAAC,CAAC,QAAQ;YAEvG,cAAc,CAAC,gBAAgB,GAAG,cAAc,CAAC,iBAAiB,CAAC;YACnE,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;SAC/C;QACD,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,EAAE,UAAU,CAAC,CAAC;QAE1E,OAAO,CAAC,2BAA2B,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED,sCAAsC;IAC/B,YAAY,CAAC,QAAgB;QAClC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,OAAO,CAAC,iBAAiB,EAAE,CAAC;QAC5B,OAAO,CAAC,0BAA0B,EAAE,CAAC;QACrC,OAAO,CAAC,4BAA4B,IAAI,QAAQ,CAAC;IACnD,CAAC;IAEM,YAAY,CAAC,QAAgB,EAAE,UAAkB;QACtD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,oBAAoB,GAAG,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAC7D,CAAC,aAAa,EAAE,EAAE,CAAC,UAAU,KAAK,aAAa,CAAC,UAAU,CAC3D,CAAC;QAEF,IAAI,oBAAoB,EAAE;YACxB,oBAAoB,CAAC,KAAK,EAAE,CAAC;SAC9B;aAAM;YACL,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC5E;QAED,OAAO,CAAC,iBAAiB,EAAE,CAAC;QAC5B,OAAO,CAAC,4BAA4B,IAAI,QAAQ,CAAC;IACnD,CAAC;IAEM,UAAU,CAAC,UAAkB;QAClC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,oBAAoB,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAChD,CAAC,aAAa,EAAE,EAAE,CAAC,UAAU,KAAK,aAAa,CAAC,UAAU,CAC3D,CAAC;QAEF,IAAI,oBAAoB,EAAE;YACxB,oBAAoB,CAAC,KAAK,EAAE,CAAC;SAC9B;aAAM;YACL,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC/D;IACH,CAAC;IAEM,aAAa,CAAC,UAAkB;QACrC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,oBAAoB,GAAG,OAAO,CAAC,aAAa,CAAC,IAAI,CACnD,CAAC,aAAa,EAAE,EAAE,CAAC,UAAU,KAAK,aAAa,CAAC,UAAU,CAC3D,CAAC;QAEF,IAAI,oBAAoB,EAAE;YACxB,oBAAoB,CAAC,KAAK,EAAE,CAAC;SAC9B;aAAM;YACL,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAClE;IACH,CAAC;IAEM,cAAc,CAAC,aAAoB;QACxC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QACD,IAAI,OAAO,GAAqB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,IAAI,mBAAmB,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CACnD,CAAC,gBAAgB,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,KAAK,gBAAgB,CAAC,aAAa,CAC5E,CAAC;QACF,IAAI,mBAAmB,EAAE;YACvB,mBAAmB,CAAC,KAAK,EAAE,CAAC;SAC7B;aAAM;YACL,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC9E;IACH,CAAC;IAED,uEAAuE;IAC/D,2BAA2B,CAAC,QAAgB,EAAE,IAAY;QAChE,oCAAoC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChE,cAAc;YACd,IACE,QAAQ,KAAK,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,QAAQ;gBACzD,IAAI,KAAK,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,IAAI,EACjD;gBACA,OAAO,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;aAC5C;SACF;QACD,oCAAoC;QACpC,IAAI,UAAU,GAAG,IAAI,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,aAAa,CAAC,YAAoB;QACxC,IAAI,SAAS,GAAG,YAAY,CAAC;QAC7B,IAAI;YACF,IAAI,SAAS,GAAG,IAAI,MAAM,CAAC,kCAAkC,CAAC,CAAC;YAC/D,IAAI,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACvC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;aACpB;YACD,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;SACxE;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;SAClD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  diag,\n  BatchObservableResult,\n  Meter,\n  ObservableGauge,\n  ObservableResult,\n} from \"@opentelemetry/api\";\nimport {\n  MeterProvider,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { AzureMonitorExporterOptions, AzureMonitorStatsbeatExporter } from \"../../index\";\nimport * as ai from \"../../utils/constants/applicationinsights\";\nimport { StatsbeatMetrics } from \"./statsbeatMetrics\";\nimport {\n  StatsbeatCounter,\n  STATSBEAT_LANGUAGE,\n  NetworkStatsbeat,\n  CommonStatsbeatProperties,\n  NetworkStatsbeatProperties,\n  StatsbeatOptions,\n} from \"./types\";\n\nexport class NetworkStatsbeatMetrics extends StatsbeatMetrics {\n  private _commonProperties: CommonStatsbeatProperties;\n  private _networkProperties: NetworkStatsbeatProperties;\n  private _isInitialized: boolean = false;\n  private _statsCollectionShortInterval: number = 900000; // 15 minutes\n\n  private _networkStatsbeatCollection: Array<NetworkStatsbeat> = [];\n  private _networkStatsbeatMeter: Meter;\n  private _networkStatsbeatMeterProvider: MeterProvider;\n  private _networkAzureExporter: AzureMonitorStatsbeatExporter;\n  private _networkMetricReader: PeriodicExportingMetricReader;\n\n  // Custom dimensions\n  private _cikey: string;\n  private _runtimeVersion: string;\n  private _language: string;\n  private _version: string;\n  private _attach: string = \"sdk\";\n\n  // Observable Gauges\n  private _successCountGauge: ObservableGauge;\n  private _failureCountGauge: ObservableGauge;\n  private _retryCountGauge: ObservableGauge;\n  private _throttleCountGauge: ObservableGauge;\n  private _exceptionCountGauge: ObservableGauge;\n  private _averageDurationGauge: ObservableGauge;\n\n  // Network attributes\n  private _connectionString: string;\n  private _endpointUrl: string;\n  private _host: string;\n\n  constructor(options: StatsbeatOptions) {\n    super();\n    this._connectionString = super._getConnectionString(options.endpointUrl);\n    this._networkStatsbeatMeterProvider = new MeterProvider();\n\n    const exporterConfig: AzureMonitorExporterOptions = {\n      connectionString: this._connectionString,\n    };\n\n    this._networkAzureExporter = new AzureMonitorStatsbeatExporter(exporterConfig);\n\n    // Exports Network Statsbeat every 15 minutes\n    const networkMetricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._networkAzureExporter,\n      exportIntervalMillis: options.networkCollectionInterval || this._statsCollectionShortInterval, // 15 minutes\n    };\n\n    this._networkMetricReader = new PeriodicExportingMetricReader(networkMetricReaderOptions);\n    this._networkStatsbeatMeterProvider.addMetricReader(this._networkMetricReader);\n    this._networkStatsbeatMeter = this._networkStatsbeatMeterProvider.getMeter(\n      \"Azure Monitor Network Statsbeat\"\n    );\n\n    this._endpointUrl = options.endpointUrl;\n    this._runtimeVersion = process.version;\n    this._language = STATSBEAT_LANGUAGE;\n    this._version = ai.packageVersion;\n    this._host = this._getShortHost(options.endpointUrl);\n    this._cikey = options.instrumentationKey;\n\n    this._successCountGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.SUCCESS_COUNT\n    );\n    this._failureCountGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.FAILURE_COUNT\n    );\n    this._retryCountGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.RETRY_COUNT\n    );\n    this._throttleCountGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.THROTTLE_COUNT\n    );\n    this._exceptionCountGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.EXCEPTION_COUNT\n    );\n    this._averageDurationGauge = this._networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.AVERAGE_DURATION\n    );\n\n    this._commonProperties = {\n      os: super._os,\n      rp: super._resourceProvider,\n      cikey: this._cikey,\n      runtimeVersion: this._runtimeVersion,\n      language: this._language,\n      version: this._version,\n      attach: this._attach,\n    };\n\n    this._networkProperties = {\n      endpoint: this._endpointUrl,\n      host: this._host,\n    };\n\n    this._isInitialized = true;\n    this._initialize();\n  }\n\n  public isInitialized() {\n    return this._isInitialized;\n  }\n\n  public shutdown() {\n    this._networkStatsbeatMeterProvider.shutdown();\n  }\n\n  private async _initialize() {\n    try {\n      await super._getResourceProvider();\n\n      // Add network observable callbacks\n      this._successCountGauge.addCallback(this._successCallback.bind(this));\n      this._networkStatsbeatMeter.addBatchObservableCallback(this._failureCallback.bind(this), [\n        this._failureCountGauge,\n      ]);\n      this._networkStatsbeatMeter.addBatchObservableCallback(this._retryCallback.bind(this), [\n        this._retryCountGauge,\n      ]);\n      this._networkStatsbeatMeter.addBatchObservableCallback(this._throttleCallback.bind(this), [\n        this._throttleCountGauge,\n      ]);\n      this._networkStatsbeatMeter.addBatchObservableCallback(this._exceptionCallback.bind(this), [\n        this._exceptionCountGauge,\n      ]);\n      this._averageDurationGauge.addCallback(this._durationCallback.bind(this));\n    } catch (error) {\n      diag.debug(\"Call to get the resource provider failed.\");\n    }\n  }\n\n  // Observable gauge callbacks\n  private _successCallback(observableResult: ObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let attributes = { ...this._commonProperties, ...this._networkProperties };\n    observableResult.observe(counter.totalSuccesfulRequestCount, attributes);\n    counter.totalSuccesfulRequestCount = 0;\n  }\n\n  private _failureCallback(observableResult: BatchObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n\n    /*\n      Takes the failureCountGauge, value (of the counter), and attributes\n      create a unqiue counter based on statusCode as well\n      append statusCode to attributes so the newly created attributes are unique.\n    */\n    let attributes = { ...this._networkProperties, ...this._commonProperties, statusCode: 0 };\n\n    // For each { statusCode -> count } mapping, call observe, passing the count and attributes that include the statusCode\n    for (let i = 0; i < counter.totalFailedRequestCount.length; i++) {\n      attributes.statusCode = counter.totalFailedRequestCount[i].statusCode;\n      observableResult.observe(this._failureCountGauge, counter.totalFailedRequestCount[i].count, {\n        ...attributes,\n      });\n      counter.totalFailedRequestCount[i].count = 0;\n    }\n  }\n\n  private _retryCallback(observableResult: BatchObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let attributes = { ...this._networkProperties, ...this._commonProperties, statusCode: 0 };\n\n    for (let i = 0; i < counter.retryCount.length; i++) {\n      attributes.statusCode = counter.retryCount[i].statusCode;\n      observableResult.observe(this._retryCountGauge, counter.retryCount[i].count, {\n        ...attributes,\n      });\n      counter.retryCount[i].count = 0;\n    }\n  }\n\n  private _throttleCallback(observableResult: BatchObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let attributes = { ...this._networkProperties, ...this._commonProperties, statusCode: 0 };\n\n    for (let i = 0; i < counter.throttleCount.length; i++) {\n      attributes.statusCode = counter.throttleCount[i].statusCode;\n      observableResult.observe(this._throttleCountGauge, counter.throttleCount[i].count, {\n        ...attributes,\n      });\n      counter.throttleCount[i].count = 0;\n    }\n  }\n\n  private _exceptionCallback(observableResult: BatchObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let attributes = { ...this._networkProperties, ...this._commonProperties, exceptionType: \"\" };\n\n    for (let i = 0; i < counter.exceptionCount.length; i++) {\n      attributes.exceptionType = counter.exceptionCount[i].exceptionType;\n      observableResult.observe(this._exceptionCountGauge, counter.exceptionCount[i].count, {\n        ...attributes,\n      });\n      counter.exceptionCount[i].count = 0;\n    }\n  }\n\n  private _durationCallback(observableResult: ObservableResult) {\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let attributes = { ...this._networkProperties, ...this._commonProperties };\n    for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\n      let currentCounter = this._networkStatsbeatCollection[i];\n      currentCounter.time = Number(new Date());\n      let intervalRequests =\n        currentCounter.totalRequestCount - currentCounter.lastRequestCount || 0;\n      currentCounter.averageRequestExecutionTime =\n        (currentCounter.intervalRequestExecutionTime -\n          currentCounter.lastIntervalRequestExecutionTime) /\n          intervalRequests || 0;\n      currentCounter.lastIntervalRequestExecutionTime = currentCounter.intervalRequestExecutionTime; // reset\n\n      currentCounter.lastRequestCount = currentCounter.totalRequestCount;\n      currentCounter.lastTime = currentCounter.time;\n    }\n    observableResult.observe(counter.averageRequestExecutionTime, attributes);\n\n    counter.averageRequestExecutionTime = 0;\n  }\n\n  // Public methods to increase counters\n  public countSuccess(duration: number) {\n    if (!this._isInitialized) {\n      return;\n    }\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    counter.totalRequestCount++;\n    counter.totalSuccesfulRequestCount++;\n    counter.intervalRequestExecutionTime += duration;\n  }\n\n  public countFailure(duration: number, statusCode: number) {\n    if (!this._isInitialized) {\n      return;\n    }\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let currentStatusCounter = counter.totalFailedRequestCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.totalFailedRequestCount.push({ statusCode: statusCode, count: 1 });\n    }\n\n    counter.totalRequestCount++;\n    counter.intervalRequestExecutionTime += duration;\n  }\n\n  public countRetry(statusCode: number) {\n    if (!this._isInitialized) {\n      return;\n    }\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let currentStatusCounter = counter.retryCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.retryCount.push({ statusCode: statusCode, count: 1 });\n    }\n  }\n\n  public countThrottle(statusCode: number) {\n    if (!this._isInitialized) {\n      return;\n    }\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let currentStatusCounter = counter.throttleCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.throttleCount.push({ statusCode: statusCode, count: 1 });\n    }\n  }\n\n  public countException(exceptionType: Error) {\n    if (!this._isInitialized) {\n      return;\n    }\n    let counter: NetworkStatsbeat = this._getNetworkStatsbeatCounter(this._endpointUrl, this._host);\n    let currentErrorCounter = counter.exceptionCount.find(\n      (exceptionCounter) => exceptionType.name === exceptionCounter.exceptionType\n    );\n    if (currentErrorCounter) {\n      currentErrorCounter.count++;\n    } else {\n      counter.exceptionCount.push({ exceptionType: exceptionType.name, count: 1 });\n    }\n  }\n\n  // Gets a networkStatsbeat counter if one exists for the given endpoint\n  private _getNetworkStatsbeatCounter(endpoint: string, host: string): NetworkStatsbeat {\n    // Check if the counter is available\n    for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\n      // Same object\n      if (\n        endpoint === this._networkStatsbeatCollection[i].endpoint &&\n        host === this._networkStatsbeatCollection[i].host\n      ) {\n        return this._networkStatsbeatCollection[i];\n      }\n    }\n    // Create a new counter if not found\n    let newCounter = new NetworkStatsbeat(endpoint, host);\n    this._networkStatsbeatCollection.push(newCounter);\n    return newCounter;\n  }\n\n  private _getShortHost(originalHost: string) {\n    let shortHost = originalHost;\n    try {\n      let hostRegex = new RegExp(/^https?:\\/\\/(?:www\\.)?([^\\/.-]+)/);\n      let res = hostRegex.exec(originalHost);\n      if (res != null && res.length > 1) {\n        shortHost = res[1];\n      }\n      shortHost = shortHost.replace(\".in.applicationinsights.azure.com\", \"\");\n    } catch (error) {\n      diag.debug(\"Failed to get the short host name.\");\n    }\n    return shortHost;\n  }\n}\n"]}