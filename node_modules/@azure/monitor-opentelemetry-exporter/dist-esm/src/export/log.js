// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { diag } from "@opentelemetry/api";
import { ExportResultCode } from "@opentelemetry/core";
import { AzureMonitorBaseExporter } from "./base";
import { logToEnvelope } from "../utils/logUtils";
/**
 * Azure Monitor OpenTelemetry Log Exporter.
 */
export class AzureMonitorLogExporter extends AzureMonitorBaseExporter {
    /**
     * Initializes a new instance of the AzureMonitorLogExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options = {}) {
        super(options);
        /**
         * Flag to determine if Exporter is shutdown.
         */
        this._isShutdown = false;
        diag.debug("AzureMonitorLogExporter was successfully setup");
    }
    /**
     * Export OpenTelemetry logs.
     * @param logs - Logs to export.
     * @param resultCallback - Result callback.
     */
    async export(logs, resultCallback) {
        if (this._isShutdown) {
            diag.info("Exporter shut down. Failed to export spans.");
            setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);
            return;
        }
        diag.info(`Exporting ${logs.length} logs(s). Converting to envelopes...`);
        let envelopes = [];
        logs.forEach((log) => {
            let envelope = logToEnvelope(log, this._instrumentationKey);
            if (envelope) {
                envelopes.push(envelope);
            }
        });
        resultCallback(await this._exportEnvelopes(envelopes));
    }
    /**
     * Shutdown AzureMonitorLogExporter.
     */
    async shutdown() {
        this._isShutdown = true;
        diag.info("AzureMonitorLogExporter shutting down");
        return this._shutdown();
    }
}
//# sourceMappingURL=log.js.map