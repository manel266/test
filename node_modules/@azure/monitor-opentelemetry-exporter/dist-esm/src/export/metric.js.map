{"version":3,"file":"metric.js","sourceRoot":"","sources":["../../../src/export/metric.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EACL,sBAAsB,EACtB,cAAc,GAGf,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAgB,gBAAgB,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtF,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAElD,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AAGjE;;GAEG;AACH,MAAM,OAAO,0BACX,SAAQ,wBAAwB;IAOhC;;;OAGG;IAEH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAVjB;;WAEG;QACK,gBAAW,GAAG,KAAK,CAAC;QAQ1B,IAAI,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,OAAwB,EACxB,cAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,YAAY,CAAC,MAAM,yCAAyC,CAAC,CAAC;QAE7F,IAAI,SAAS,GAAe,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzF,6DAA6D;QAC7D,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,IAAI,EAAE;YACzD,cAAc,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,4BAA4B,CAAC,eAA+B;QACjE,IACE,eAAe,IAAI,cAAc,CAAC,eAAe;YACjD,eAAe,IAAI,cAAc,CAAC,0BAA0B,EAC5D;YACA,OAAO,sBAAsB,CAAC,UAAU,CAAC;SAC1C;QACD,OAAO,sBAAsB,CAAC,KAAK,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { context, diag } from \"@opentelemetry/api\";\nimport {\n  AggregationTemporality,\n  InstrumentType,\n  PushMetricExporter,\n  ResourceMetrics,\n} from \"@opentelemetry/sdk-metrics\";\nimport { ExportResult, ExportResultCode, suppressTracing } from \"@opentelemetry/core\";\nimport { AzureMonitorBaseExporter } from \"./base\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { resourceMetricsToEnvelope } from \"../utils/metricUtils\";\nimport { AzureMonitorExporterOptions } from \"../config\";\n\n/**\n * Azure Monitor OpenTelemetry Metric Exporter.\n */\nexport class AzureMonitorMetricExporter\n  extends AzureMonitorBaseExporter\n  implements PushMetricExporter\n{\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private _isShutdown = false;\n  /**\n   * Initializes a new instance of the AzureMonitorMetricExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    diag.debug(\"AzureMonitorMetricExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry resource metrics.\n   * @param metrics - Resource metrics to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): Promise<void> {\n    if (this._isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n    diag.info(`Exporting ${metrics.scopeMetrics.length} metrics(s). Converting to envelopes...`);\n\n    let envelopes: Envelope[] = resourceMetricsToEnvelope(metrics, this._instrumentationKey);\n    // Supress tracing until OpenTelemetry Metrics SDK support it\n    context.with(suppressTracing(context.active()), async () => {\n      resultCallback(await this._exportEnvelopes(envelopes));\n    });\n  }\n\n  /**\n   * Shutdown AzureMonitorMetricExporter.\n   */\n  public async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    diag.info(\"AzureMonitorMetricExporter shutting down\");\n    return this._shutdown();\n  }\n\n  /**\n   * Select aggregation temporality\n   */\n  public selectAggregationTemporality(_instrumentType: InstrumentType): AggregationTemporality {\n    if (\n      _instrumentType == InstrumentType.UP_DOWN_COUNTER ||\n      _instrumentType == InstrumentType.OBSERVABLE_UP_DOWN_COUNTER\n    ) {\n      return AggregationTemporality.CUMULATIVE;\n    }\n    return AggregationTemporality.DELTA;\n  }\n\n  /**\n   * Force flush\n   */\n  public async forceFlush() {\n    return Promise.resolve();\n  }\n}\n"]}