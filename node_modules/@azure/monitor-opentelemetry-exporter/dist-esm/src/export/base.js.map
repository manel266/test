{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/export/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ExportResult, ExportResultCode } from \"@opentelemetry/core\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { ConnectionStringParser } from \"../utils/connectionStringParser\";\nimport { HttpSender, FileSystemPersist } from \"../platform\";\nimport { AzureMonitorExporterOptions } from \"../config\";\nimport { PersistentStorage, Sender } from \"../types\";\nimport { isRetriable, BreezeResponse } from \"../utils/breezeUtils\";\nimport {\n  DEFAULT_BREEZE_ENDPOINT,\n  ENV_CONNECTION_STRING,\n  ENV_DISABLE_STATSBEAT,\n} from \"../Declarations/Constants\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { NetworkStatsbeatMetrics } from \"./statsbeat/networkStatsbeatMetrics\";\nimport { MAX_STATSBEAT_FAILURES } from \"./statsbeat/types\";\nimport { getInstance } from \"./statsbeat/longIntervalStatsbeatMetrics\";\n\nconst DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS = 60_000;\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport abstract class AzureMonitorBaseExporter {\n  /**\n   * Instrumentation key to be used for exported envelopes\n   */\n  protected _instrumentationKey: string = \"\";\n  private _endpointUrl: string = \"\";\n  private readonly _persister: PersistentStorage;\n  private readonly _sender: Sender;\n  private _numConsecutiveRedirects: number;\n  private _retryTimer: NodeJS.Timer | null;\n  private _networkStatsbeatMetrics: NetworkStatsbeatMetrics | undefined;\n  private _longIntervalStatsbeatMetrics;\n  private _isStatsbeatExporter: boolean;\n  private _statsbeatFailureCount: number = 0;\n  private _batchSendRetryIntervalMs: number = DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS;\n  /**\n   * Exporter internal configuration\n   */\n  private readonly _options: AzureMonitorExporterOptions;\n\n  /**\n   * Initializes a new instance of the AzureMonitorBaseExporter class.\n   * @param AzureMonitorExporterOptions - Exporter configuration.\n   */\n  constructor(options: AzureMonitorExporterOptions = {}, isStatsbeatExporter?: boolean) {\n    this._options = options;\n    this._numConsecutiveRedirects = 0;\n    this._instrumentationKey = \"\";\n    this._endpointUrl = DEFAULT_BREEZE_ENDPOINT;\n    const connectionString = this._options.connectionString || process.env[ENV_CONNECTION_STRING];\n    this._isStatsbeatExporter = isStatsbeatExporter ? isStatsbeatExporter : false;\n\n    if (connectionString) {\n      const parsedConnectionString = ConnectionStringParser.parse(connectionString);\n      this._instrumentationKey =\n        parsedConnectionString.instrumentationkey || this._instrumentationKey;\n      this._endpointUrl = parsedConnectionString.ingestionendpoint?.trim() || this._endpointUrl;\n    }\n\n    // Instrumentation key is required\n    if (!this._instrumentationKey) {\n      const message =\n        \"No instrumentation key or connection string was provided to the Azure Monitor Exporter\";\n      diag.error(message);\n      throw new Error(message);\n    }\n    this._sender = new HttpSender(this._endpointUrl, this._options);\n    this._persister = new FileSystemPersist(this._instrumentationKey, this._options);\n\n    if (!this._isStatsbeatExporter && !process.env[ENV_DISABLE_STATSBEAT]) {\n      // Initialize statsbeatMetrics\n      this._networkStatsbeatMetrics = new NetworkStatsbeatMetrics({\n        instrumentationKey: this._instrumentationKey,\n        endpointUrl: this._endpointUrl,\n      });\n      this._longIntervalStatsbeatMetrics = getInstance({\n        instrumentationKey: this._instrumentationKey,\n        endpointUrl: this._endpointUrl,\n      });\n    }\n    this._retryTimer = null;\n    diag.debug(\"AzureMonitorExporter was successfully setup\");\n  }\n\n  /**\n   * Persist envelopes to disk\n   */\n  private async _persist(envelopes: unknown[]): Promise<ExportResult> {\n    try {\n      const success = await this._persister.push(envelopes);\n      return success\n        ? { code: ExportResultCode.SUCCESS }\n        : {\n            code: ExportResultCode.FAILED,\n            error: new Error(\"Failed to persist envelope in disk.\"),\n          };\n    } catch (ex: any) {\n      return { code: ExportResultCode.FAILED, error: ex };\n    }\n  }\n\n  /**\n   * Shutdown exporter\n   */\n  protected async _shutdown(): Promise<void> {\n    return this._sender.shutdown();\n  }\n\n  /**\n   * Export envelopes\n   */\n  protected async _exportEnvelopes(envelopes: Envelope[]): Promise<ExportResult> {\n    diag.info(`Exporting ${envelopes.length} envelope(s)`);\n\n    if (envelopes.length < 1) {\n      return { code: ExportResultCode.SUCCESS };\n    }\n\n    try {\n      const startTime = new Date().getTime();\n      const { result, statusCode } = await this._sender.send(envelopes);\n      const endTime = new Date().getTime();\n      const duration = endTime - startTime;\n      this._numConsecutiveRedirects = 0;\n\n      if (statusCode === 200) {\n        // Success -- @todo: start retry timer\n        if (!this._retryTimer) {\n          this._retryTimer = setTimeout(() => {\n            this._retryTimer = null;\n            this._sendFirstPersistedFile();\n          }, this._batchSendRetryIntervalMs);\n          this._retryTimer.unref();\n        }\n        // If we are not exportings statsbeat and statsbeat is not disabled -- count success\n        this._networkStatsbeatMetrics?.countSuccess(duration);\n        return { code: ExportResultCode.SUCCESS };\n      } else if (statusCode && isRetriable(statusCode)) {\n        // Failed -- persist failed data\n        if (statusCode === 429 || statusCode === 439) {\n          this._networkStatsbeatMetrics?.countThrottle(statusCode);\n        }\n        if (result) {\n          diag.info(result);\n          const breezeResponse = JSON.parse(result) as BreezeResponse;\n          const filteredEnvelopes: Envelope[] = [];\n          if (breezeResponse.errors) {\n            breezeResponse.errors.forEach((error) => {\n              if (error.statusCode && isRetriable(error.statusCode)) {\n                filteredEnvelopes.push(envelopes[error.index]);\n              }\n            });\n          }\n          if (filteredEnvelopes.length > 0) {\n            this._networkStatsbeatMetrics?.countRetry(statusCode);\n            // calls resultCallback(ExportResult) based on result of persister.push\n            return await this._persist(filteredEnvelopes);\n          }\n          // Failed -- not retriable\n          this._networkStatsbeatMetrics?.countFailure(duration, statusCode);\n          return {\n            code: ExportResultCode.FAILED,\n          };\n        } else {\n          // calls resultCallback(ExportResult) based on result of persister.push\n          this._networkStatsbeatMetrics?.countRetry(statusCode);\n          return await this._persist(envelopes);\n        }\n      } else {\n        // Failed -- not retriable\n        if (this._networkStatsbeatMetrics) {\n          if (statusCode) {\n            this._networkStatsbeatMetrics.countFailure(duration, statusCode);\n          }\n        } else {\n          this._incrementStatsbeatFailure();\n        }\n        return {\n          code: ExportResultCode.FAILED,\n        };\n      }\n    } catch (error: any) {\n      const restError = error as RestError;\n      if (\n        restError.statusCode &&\n        (restError.statusCode === 307 || // Temporary redirect\n          restError.statusCode === 308)\n      ) {\n        // Permanent redirect\n        this._numConsecutiveRedirects++;\n        // To prevent circular redirects\n        if (this._numConsecutiveRedirects < 10) {\n          if (restError.response && restError.response.headers) {\n            const location = restError.response.headers.get(\"location\");\n            if (location) {\n              // Update sender URL\n              this._sender.handlePermanentRedirect(location);\n              // Send to redirect endpoint as HTTPs library doesn't handle redirect automatically\n              return this._exportEnvelopes(envelopes);\n            }\n          }\n        } else {\n          let redirectError = new Error(\"Circular redirect\");\n          this._networkStatsbeatMetrics?.countException(redirectError);\n          return { code: ExportResultCode.FAILED, error: redirectError };\n        }\n      } else if (restError.statusCode && isRetriable(restError.statusCode)) {\n        this._networkStatsbeatMetrics?.countRetry(restError.statusCode);\n        return await this._persist(envelopes);\n      }\n      if (this._isNetworkError(restError)) {\n        if (restError.statusCode) {\n          this._networkStatsbeatMetrics?.countRetry(restError.statusCode);\n        }\n        diag.error(\n          \"Retrying due to transient client side error. Error message:\",\n          restError.message\n        );\n        return await this._persist(envelopes);\n      }\n      this._networkStatsbeatMetrics?.countException(restError);\n      diag.error(\n        \"Envelopes could not be exported and are not retriable. Error message:\",\n        restError.message\n      );\n      return { code: ExportResultCode.FAILED, error: restError };\n    }\n  }\n\n  // Disable collection of statsbeat metrics after max failures\n  private _incrementStatsbeatFailure() {\n    this._statsbeatFailureCount++;\n    if (this._statsbeatFailureCount > MAX_STATSBEAT_FAILURES) {\n      this._isStatsbeatExporter = false;\n      this._networkStatsbeatMetrics?.shutdown();\n      this._longIntervalStatsbeatMetrics?.shutdown();\n      this._networkStatsbeatMetrics = undefined;\n      this._statsbeatFailureCount = 0;\n    }\n  }\n\n  private async _sendFirstPersistedFile(): Promise<void> {\n    try {\n      const envelopes = (await this._persister.shift()) as Envelope[] | null;\n      if (envelopes) {\n        await this._sender.send(envelopes);\n      }\n    } catch (err: any) {\n      diag.warn(`Failed to fetch persisted file`, err);\n    }\n  }\n\n  private _isNetworkError(error: RestError): boolean {\n    if (error && error.code && error.code === \"REQUEST_SEND_ERROR\") {\n      return true;\n    }\n    return false;\n  }\n}\n"]}