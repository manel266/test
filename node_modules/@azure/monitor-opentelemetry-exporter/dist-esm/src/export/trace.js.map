{"version":3,"file":"trace.js","sourceRoot":"","sources":["../../../src/export/trace.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAgB,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAErE,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAGlD,OAAO,EAAE,sBAAsB,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AACnF,OAAO,EAAE,4BAA4B,EAAE,MAAM,iBAAiB,CAAC;AAE/D;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,wBAAwB;IAMrE;;;OAGG;IACH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAVjB;;WAEG;QACK,gBAAW,GAAG,KAAK,CAAC;QAQ1B,IAAI,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,KAAqB,EACrB,cAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,MAAM,sCAAsC,CAAC,CAAC;QAE3E,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,SAAS,GAAe,EAAE,CAAC;YAC/B,MAAM,sBAAsB,GAAG,4BAA4B,CACzD,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EACjB,IAAI,CAAC,mBAAmB,CACzB,CAAC;YACF,IAAI,sBAAsB,EAAE;gBAC1B,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aACxC;YACD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACrB,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACvE,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAC/E,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjC,SAAS,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;YACH,cAAc,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;SACxD;QACD,oBAAoB;QACpB,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ExportResult, ExportResultCode } from \"@opentelemetry/core\";\nimport { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport { AzureMonitorBaseExporter } from \"./base\";\nimport { AzureMonitorExporterOptions } from \"../config\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { readableSpanToEnvelope, spanEventsToEnvelopes } from \"../utils/spanUtils\";\nimport { createResourceMetricEnvelope } from \"../utils/common\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport class AzureMonitorTraceExporter extends AzureMonitorBaseExporter implements SpanExporter {\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private _isShutdown = false;\n\n  /**\n   * Initializes a new instance of the AzureMonitorTraceExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    diag.debug(\"AzureMonitorTraceExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry spans.\n   * @param spans - Spans to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): Promise<void> {\n    if (this._isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    diag.info(`Exporting ${spans.length} span(s). Converting to envelopes...`);\n\n    if (spans.length > 0) {\n      let envelopes: Envelope[] = [];\n      const resourceMetricEnvelope = createResourceMetricEnvelope(\n        spans[0].resource,\n        this._instrumentationKey\n      );\n      if (resourceMetricEnvelope) {\n        envelopes.push(resourceMetricEnvelope);\n      }\n      spans.forEach((span) => {\n        envelopes.push(readableSpanToEnvelope(span, this._instrumentationKey));\n        let spanEventEnvelopes = spanEventsToEnvelopes(span, this._instrumentationKey);\n        if (spanEventEnvelopes.length > 0) {\n          envelopes.push(...spanEventEnvelopes);\n        }\n      });\n      resultCallback(await this._exportEnvelopes(envelopes));\n    }\n    // No data to export\n    resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  /**\n   * Shutdown AzureMonitorTraceExporter.\n   */\n  async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    diag.info(\"AzureMonitorTraceExporter shutting down\");\n    return this._shutdown();\n  }\n}\n"]}