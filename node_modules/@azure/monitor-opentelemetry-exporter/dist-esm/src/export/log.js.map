{"version":3,"file":"log.js","sourceRoot":"","sources":["../../../src/export/log.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAgB,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACrE,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAElD,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAKlD;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,wBAAwB;IAKnE;;;OAGG;IAEH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAVjB;;WAEG;QACK,gBAAW,GAAG,KAAK,CAAC;QAQ1B,IAAI,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,MAAM,CAAC,IAAyB,EAAE,cAA8C;QAC3F,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,MAAM,sCAAsC,CAAC,CAAC;QAE1E,IAAI,SAAS,GAAe,EAAE,CAAC;QAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC5D,IAAI,QAAQ,EAAE;gBACZ,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { diag } from \"@opentelemetry/api\";\nimport { ExportResult, ExportResultCode } from \"@opentelemetry/core\";\nimport { AzureMonitorBaseExporter } from \"./base\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { logToEnvelope } from \"../utils/logUtils\";\nimport { AzureMonitorExporterOptions } from \"../config\";\n\nimport type { ReadableLogRecord, LogRecordExporter } from \"@opentelemetry/sdk-logs\";\n\n/**\n * Azure Monitor OpenTelemetry Log Exporter.\n */\nexport class AzureMonitorLogExporter extends AzureMonitorBaseExporter implements LogRecordExporter {\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private _isShutdown = false;\n  /**\n   * Initializes a new instance of the AzureMonitorLogExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    diag.debug(\"AzureMonitorLogExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry logs.\n   * @param logs - Logs to export.\n   * @param resultCallback - Result callback.\n   */\n  public async export(logs: ReadableLogRecord[], resultCallback: (result: ExportResult) => void) {\n    if (this._isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n    diag.info(`Exporting ${logs.length} logs(s). Converting to envelopes...`);\n\n    let envelopes: Envelope[] = [];\n    logs.forEach((log) => {\n      let envelope = logToEnvelope(log, this._instrumentationKey);\n      if (envelope) {\n        envelopes.push(envelope);\n      }\n    });\n    resultCallback(await this._exportEnvelopes(envelopes));\n  }\n\n  /**\n   * Shutdown AzureMonitorLogExporter.\n   */\n  public async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    diag.info(\"AzureMonitorLogExporter shutting down\");\n    return this._shutdown();\n  }\n}\n"]}