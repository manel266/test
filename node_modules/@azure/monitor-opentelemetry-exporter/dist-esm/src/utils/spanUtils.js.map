{"version":3,"file":"spanUtils.js","sourceRoot":"","sources":["../../../src/utils/spanUtils.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAE1B,OAAO,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAoB,MAAM,oBAAoB,CAAC;AACtF,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAE,MAAM,qCAAqC,CAAC;AAEzF,OAAO,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AAExF,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAC/C,OAAO,EAAE,sBAAsB,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AACpG,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAC/E,OAAO,EAML,mBAAmB,GAEpB,MAAM,cAAc,CAAC;AAEtB,SAAS,kBAAkB,CAAC,IAAkB;IAC5C,MAAM,IAAI,GAAS,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC;IACrE,IAAI,IAAI,CAAC,YAAY,EAAE;QACrB,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;KACnE;IACD,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;IAC1E,IAAI,aAAa,EAAE;QACjB,mDAAmD;QACnD,IAAI,CAAC,mBAAmB,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;KACnD;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QACxE,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAClE,IAAI,UAAU,EAAE;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC7D,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU;YACjE,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,GAAG,UAAoB,IACjE,SACF,EAAE,CAAC;aACJ;iBAAM,IAAI,OAAO,EAAE;gBAClB,IAAI;oBACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,GAAG,UAAU,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;iBAC7E;gBAAC,OAAO,EAAO,EAAE,GAAE;aACrB;YACD,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;aAC/D;iBAAM,IAAI,SAAS,EAAE;gBACpB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;aAC5D;SACF;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YACtD,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;aAC5D;SACF;KACF;IACD,gEAAgE;IAEhE,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,kCAAkC,CAAC,UAAuB;IAGjE,MAAM,UAAU,GAAuC,EAAE,CAAC;IAC1D,IAAI,UAAU,EAAE;QACd,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACzC,oDAAoD;YACpD,IACE,CAAC,CACC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;gBACtB,GAAG,IAAI,kBAAkB,CAAC,WAAW;gBACrC,GAAG,IAAI,kBAAkB,CAAC,aAAa;gBACvC,GAAG,IAAI,kBAAkB,CAAC,YAAY;gBACtC,GAAG,IAAI,kBAAkB,CAAC,WAAW;gBACrC,GAAG,IAAI,kBAAkB,CAAC,QAAQ;gBAClC,GAAG,IAAI,kBAAkB,CAAC,gBAAgB;gBAC1C,GAAG,IAAI,kBAAkB,CAAC,UAAU;gBACpC,GAAG,IAAI,kBAAkB,CAAC,SAAS;gBACnC,GAAG,IAAI,kBAAkB,CAAC,QAAQ;gBAClC,GAAG,IAAI,kBAAkB,CAAC,SAAS;gBACnC,GAAG,IAAI,kBAAkB,CAAC,YAAY;gBACtC,GAAG,IAAI,kBAAkB,CAAC,YAAY;gBACtC,GAAG,IAAI,kBAAkB,CAAC,OAAO;gBACjC,GAAG,IAAI,kBAAkB,CAAC,UAAU;gBACpC,GAAG,IAAI,kBAAkB,CAAC,oBAAoB,CAC/C,EACD;gBACA,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAW,CAAC;aAC7C;SACF;KACF;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,wBAAwB,CAAC,IAAkB;IAClD,MAAM,UAAU,GAAe,kCAAkC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnF,MAAM,YAAY,GAAiB,EAAE,CAAC;IAEtC,MAAM,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAU,EAAE,EAAE,CAAC,CAAC;QACtD,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;QAClC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;KACxB,CAAC,CAAC,CAAC;IACJ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACpB,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC9C;IACD,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,oBAAoB,CAAC,IAAkB;IAC9C,MAAM,oBAAoB,GAAyB;QACjD,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,cAAc,CAAC,KAAK;QACjD,UAAU,EAAE,GAAG;QACf,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,OAAO,EAAE,CAAC;KACX,CAAC;IACF,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;QACnC,oBAAoB,CAAC,IAAI,GAAG,eAAe,CAAC,YAAY,CAAC;KAC1D;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;QACxD,oBAAoB,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC;KACpD;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAC/D,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACjE,kBAAkB;IAClB,IAAI,UAAU,EAAE;QACd,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,OAAO,EAAE;YACX,IAAI;gBACF,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/C,oBAAoB,CAAC,IAAI,GAAG,GAAG,UAAU,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC;aACvE;YAAC,OAAO,EAAO,EAAE,GAAE;SACrB;QACD,oBAAoB,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;QACjD,oBAAoB,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAC5E,IAAI,cAAc,EAAE;YAClB,oBAAoB,CAAC,UAAU,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;SAC1D;QACD,IAAI,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,MAAM,EAAE;YACV,IAAI;gBACF,sBAAsB;gBACtB,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,8BAA8B,CAAC,CAAC;gBAC7D,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACnC,IAAI,GAAG,IAAI,IAAI,EAAE;oBACf,MAAM,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE;wBACpF,YAAY;wBACZ,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnC;iBACF;aACF;YAAC,OAAO,EAAO,EAAE,GAAE;YACpB,oBAAoB,CAAC,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC;SAC3C;KACF;IACD,gBAAgB;SACX,IAAI,QAAQ,EAAE;QACjB,2EAA2E;QAC3E,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,KAAK,EAAE;YAC7C,oBAAoB,CAAC,IAAI,GAAG,OAAO,CAAC;SACrC;aAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,UAAU,EAAE;YACzD,oBAAoB,CAAC,IAAI,GAAG,YAAY,CAAC;SAC1C;aAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,OAAO,EAAE;YACtD,oBAAoB,CAAC,IAAI,GAAG,SAAS,CAAC;SACvC;aAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,KAAK,EAAE;YACpD,oBAAoB,CAAC,IAAI,GAAG,OAAO,CAAC;SACrC;aAAM,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;YACpC,oBAAoB,CAAC,IAAI,GAAG,KAAK,CAAC;SACnC;aAAM;YACL,oBAAoB,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC9C;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACrE,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,WAAW,EAAE;YACf,oBAAoB,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;SACjD;aAAM,IAAI,WAAW,EAAE;YACtB,oBAAoB,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;SACjD;QACD,MAAM,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,MAAM,EAAE;YACV,oBAAoB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC;SAC5E;aAAM;YACL,oBAAoB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,EAAE,CAAC;SACpE;KACF;IACD,kBAAkB;SACb,IAAI,SAAS,EAAE;QAClB,oBAAoB,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;QACjD,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;QAChF,IAAI,cAAc,EAAE;YAClB,oBAAoB,CAAC,UAAU,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;SAC1D;QACD,MAAM,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,MAAM,EAAE;YACV,oBAAoB,CAAC,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC;SAC3C;aAAM,IAAI,SAAS,EAAE;YACpB,oBAAoB,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;SACjD;KACF;IACD,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAED,SAAS,iBAAiB,CAAC,IAAkB;IAC3C,MAAM,WAAW,GAAgB;QAC/B,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,cAAc,CAAC,KAAK;QACjD,YAAY,EAAE,GAAG;QACjB,QAAQ,EAAE,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,OAAO,EAAE,CAAC;QACV,MAAM,EAAE,SAAS;KAClB,CAAC;IACF,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACnE,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;IAChF,IAAI,UAAU,EAAE;QACd,WAAW,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAC5E,IAAI,cAAc,EAAE;YAClB,WAAW,CAAC,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;SACnD;KACF;SAAM,IAAI,cAAc,EAAE;QACzB,WAAW,CAAC,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;KACnD;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,sBAAsB,CAAC,IAAkB,EAAE,IAAY;IACrE,IAAI,IAAY,CAAC;IACjB,IAAI,QAAgD,CAAC;IACrD,IAAI,QAA4C,CAAC;IAEjD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5D,MAAM,kBAAkB,GAAG,IAAI,CAAC;IAChC,MAAM,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;IAClE,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,QAAQ,CAAC,MAAM,CAAC;QACrB,KAAK,QAAQ,CAAC,QAAQ,CAAC;QACvB,KAAK,QAAQ,CAAC,QAAQ;YACpB,IAAI,GAAG,gDAAgD,CAAC;YACxD,QAAQ,GAAG,sBAAsB,CAAC;YAClC,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,QAAQ,CAAC,MAAM,CAAC;QACrB,KAAK,QAAQ,CAAC,QAAQ;YACpB,IAAI,GAAG,uCAAuC,CAAC;YAC/C,QAAQ,GAAG,aAAa,CAAC;YACzB,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACnC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;YAC1D,MAAM;QACR;YACE,QAAQ;YACR,IAAI,CAAC,KAAK,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KACzD;IAED,IAAI,UAAU,GAAG,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE;QAC3C,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;KAC9D;IAED,YAAY;IACZ,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;QAChC,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE;YACnC,QAAQ,CAAC,IAAI,GAAG,GAAG,eAAe,CAAC,MAAM,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;SAC/E;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,iBAAiB,EAAE;YACtD,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SACnC;KACF;IAED,OAAO;QACL,IAAI;QACJ,UAAU;QACV,IAAI;QACJ,kBAAkB;QAClB,IAAI;QACJ,OAAO,EAAE,CAAC;QACV,IAAI,EAAE;YACJ,QAAQ;YACR,QAAQ,kCACH,QAAQ,KACX,UAAU;gBACV,YAAY,GACb;SACF;KACF,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAkB,EAAE,IAAY;IACpE,MAAM,SAAS,GAAe,EAAE,CAAC;IACjC,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAiB,EAAE,EAAE;;YACxC,IAAI,QAAyC,CAAC;YAC9C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,QAA8C,CAAC;YACnD,MAAM,UAAU,GAAG,kCAAkC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAExE,MAAM,IAAI,GAAS,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC;YACrE,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,MAAM,CAAC;YAC1C,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,GAAG,MAAM,CAAC;aACxD;YAED,0DAA0D;YAC1D,IAAI,KAAK,CAAC,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAC7D,IAAI,GAAG,yCAAyC,CAAC;gBACjD,QAAQ,GAAG,eAAe,CAAC;gBAC3B,IAAI,QAAQ,GAAG,EAAE,CAAC;gBAClB,IAAI,OAAO,GAAG,WAAW,CAAC;gBAC1B,IAAI,KAAK,GAAG,EAAE,CAAC;gBACf,IAAI,YAAY,GAAG,KAAK,CAAC;gBACzB,IAAI,KAAK,CAAC,UAAU,EAAE;oBACpB,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;oBACvE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBAC1E,IAAI,KAAK,EAAE;wBACT,YAAY,GAAG,IAAI,CAAC;qBACrB;oBACD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;oBAC5E,IAAI,YAAY,EAAE;wBAChB,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;qBAChC;oBACD,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;oBACvE,IAAI,OAAO,IAAI,SAAS,EAAE;wBACxB,UAAU,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;qBACpE;iBACF;gBACD,MAAM,gBAAgB,GAA8B;oBAClD,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,OAAO;oBAChB,KAAK,EAAE,KAAK;oBACZ,YAAY,EAAE,YAAY;iBAC3B,CAAC;gBACF,MAAM,aAAa,GAA2B;oBAC5C,UAAU,EAAE,CAAC,gBAAgB,CAAC;oBAC9B,OAAO,EAAE,CAAC;oBACV,UAAU,EAAE,UAAU;iBACvB,CAAC;gBACF,QAAQ,GAAG,aAAa,CAAC;aAC1B;iBAAM;gBACL,IAAI,GAAG,uCAAuC,CAAC;gBAC/C,QAAQ,GAAG,aAAa,CAAC;gBACzB,MAAM,WAAW,GAAgB;oBAC/B,OAAO,EAAE,KAAK,CAAC,IAAI;oBACnB,OAAO,EAAE,CAAC;oBACV,UAAU,EAAE,UAAU;iBACvB,CAAC;gBACF,QAAQ,GAAG,WAAW,CAAC;aACxB;YACD,IAAI,UAAU,GAAG,GAAG,CAAC;YACrB,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE;gBAC3C,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;aAC9D;YACD,MAAM,GAAG,GAAa;gBACpB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,kBAAkB,EAAE,IAAI;gBACxB,OAAO,EAAE,CAAC;gBACV,UAAU,EAAE,UAAU;gBACtB,IAAI,EAAE;oBACJ,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,QAAQ;iBACnB;gBACD,IAAI,EAAE,IAAI;aACX,CAAC;YACF,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URL } from \"url\";\nimport { ReadableSpan, TimedEvent } from \"@opentelemetry/sdk-trace-base\";\nimport { hrTimeToMilliseconds } from \"@opentelemetry/core\";\nimport { diag, SpanKind, SpanStatusCode, Link, Attributes } from \"@opentelemetry/api\";\nimport { SemanticAttributes, DbSystemValues } from \"@opentelemetry/semantic-conventions\";\n\nimport { createTagsFromResource, getDependencyTarget, getUrl, isSqlDB } from \"./common\";\nimport { Tags, Properties, MSLink, Measurements } from \"../types\";\nimport { msToTimeSpan } from \"./breezeUtils\";\nimport { parseEventHubSpan } from \"./eventhub\";\nimport { AzureMonitorSampleRate, DependencyTypes, MS_LINKS } from \"./constants/applicationinsights\";\nimport { AzNamespace, MicrosoftEventHub } from \"./constants/span/azAttributes\";\nimport {\n  TelemetryExceptionData,\n  MessageData,\n  RemoteDependencyData,\n  RequestData,\n  TelemetryItem as Envelope,\n  KnownContextTagKeys,\n  TelemetryExceptionDetails,\n} from \"../generated\";\n\nfunction createTagsFromSpan(span: ReadableSpan): Tags {\n  const tags: Tags = createTagsFromResource(span.resource);\n  tags[KnownContextTagKeys.AiOperationId] = span.spanContext().traceId;\n  if (span.parentSpanId) {\n    tags[KnownContextTagKeys.AiOperationParentId] = span.parentSpanId;\n  }\n  const httpUserAgent = span.attributes[SemanticAttributes.HTTP_USER_AGENT];\n  if (httpUserAgent) {\n    // TODO: Not exposed in Swagger, need to update def\n    tags[\"ai.user.userAgent\"] = String(httpUserAgent);\n  }\n  if (span.kind === SpanKind.SERVER) {\n    const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\n    const httpClientIp = span.attributes[SemanticAttributes.HTTP_CLIENT_IP];\n    const netPeerIp = span.attributes[SemanticAttributes.NET_PEER_IP];\n    if (httpMethod) {\n      const httpRoute = span.attributes[SemanticAttributes.HTTP_ROUTE];\n      const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\n      tags[KnownContextTagKeys.AiOperationName] = span.name; // Default\n      if (httpRoute) {\n        tags[KnownContextTagKeys.AiOperationName] = `${httpMethod as string} ${\n          httpRoute as string\n        }`;\n      } else if (httpUrl) {\n        try {\n          const url = new URL(String(httpUrl));\n          tags[KnownContextTagKeys.AiOperationName] = `${httpMethod} ${url.pathname}`;\n        } catch (ex: any) {}\n      }\n      if (httpClientIp) {\n        tags[KnownContextTagKeys.AiLocationIp] = String(httpClientIp);\n      } else if (netPeerIp) {\n        tags[KnownContextTagKeys.AiLocationIp] = String(netPeerIp);\n      }\n    } else {\n      tags[KnownContextTagKeys.AiOperationName] = span.name;\n      if (netPeerIp) {\n        tags[KnownContextTagKeys.AiLocationIp] = String(netPeerIp);\n      }\n    }\n  }\n  // TODO: Operation Name and Location IP TBD for non server spans\n\n  return tags;\n}\n\nfunction createPropertiesFromSpanAttributes(attributes?: Attributes): {\n  [propertyName: string]: string;\n} {\n  const properties: { [propertyName: string]: string } = {};\n  if (attributes) {\n    for (const key of Object.keys(attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key == SemanticAttributes.NET_PEER_IP ||\n          key == SemanticAttributes.NET_PEER_NAME ||\n          key == SemanticAttributes.PEER_SERVICE ||\n          key == SemanticAttributes.HTTP_METHOD ||\n          key == SemanticAttributes.HTTP_URL ||\n          key == SemanticAttributes.HTTP_STATUS_CODE ||\n          key == SemanticAttributes.HTTP_ROUTE ||\n          key == SemanticAttributes.HTTP_HOST ||\n          key == SemanticAttributes.HTTP_URL ||\n          key == SemanticAttributes.DB_SYSTEM ||\n          key == SemanticAttributes.DB_STATEMENT ||\n          key == SemanticAttributes.DB_OPERATION ||\n          key == SemanticAttributes.DB_NAME ||\n          key == SemanticAttributes.RPC_SYSTEM ||\n          key == SemanticAttributes.RPC_GRPC_STATUS_CODE\n        )\n      ) {\n        properties[key] = attributes[key] as string;\n      }\n    }\n  }\n  return properties;\n}\n\nfunction createPropertiesFromSpan(span: ReadableSpan): [Properties, Measurements] {\n  const properties: Properties = createPropertiesFromSpanAttributes(span.attributes);\n  const measurements: Measurements = {};\n\n  const links: MSLink[] = span.links.map((link: Link) => ({\n    operation_Id: link.context.traceId,\n    id: link.context.spanId,\n  }));\n  if (links.length > 0) {\n    properties[MS_LINKS] = JSON.stringify(links);\n  }\n  return [properties, measurements];\n}\n\nfunction createDependencyData(span: ReadableSpan): RemoteDependencyData {\n  const remoteDependencyData: RemoteDependencyData = {\n    name: span.name, // Default\n    id: `${span.spanContext().spanId}`,\n    success: span.status.code != SpanStatusCode.ERROR,\n    resultCode: \"0\",\n    type: \"Dependency\",\n    duration: msToTimeSpan(hrTimeToMilliseconds(span.duration)),\n    version: 2,\n  };\n  if (span.kind === SpanKind.PRODUCER) {\n    remoteDependencyData.type = DependencyTypes.QueueMessage;\n  }\n  if (span.kind === SpanKind.INTERNAL && span.parentSpanId) {\n    remoteDependencyData.type = DependencyTypes.InProc;\n  }\n\n  const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\n  const dbSystem = span.attributes[SemanticAttributes.DB_SYSTEM];\n  const rpcSystem = span.attributes[SemanticAttributes.RPC_SYSTEM];\n  // HTTP Dependency\n  if (httpMethod) {\n    const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\n    if (httpUrl) {\n      try {\n        const dependencyUrl = new URL(String(httpUrl));\n        remoteDependencyData.name = `${httpMethod} ${dependencyUrl.pathname}`;\n      } catch (ex: any) {}\n    }\n    remoteDependencyData.type = DependencyTypes.Http;\n    remoteDependencyData.data = getUrl(span.attributes);\n    const httpStatusCode = span.attributes[SemanticAttributes.HTTP_STATUS_CODE];\n    if (httpStatusCode) {\n      remoteDependencyData.resultCode = String(httpStatusCode);\n    }\n    let target = getDependencyTarget(span.attributes);\n    if (target) {\n      try {\n        // Remove default port\n        const portRegex = new RegExp(/(https?)(:\\/\\/.*)(:\\d+)(\\S*)/);\n        const res = portRegex.exec(target);\n        if (res != null) {\n          const protocol = res[1];\n          const port = res[3];\n          if ((protocol == \"https\" && port == \":443\") || (protocol == \"http\" && port == \":80\")) {\n            // Drop port\n            target = res[1] + res[2] + res[4];\n          }\n        }\n      } catch (ex: any) {}\n      remoteDependencyData.target = `${target}`;\n    }\n  }\n  // DB Dependency\n  else if (dbSystem) {\n    // TODO: Remove special logic when Azure UX supports OpenTelemetry dbSystem\n    if (String(dbSystem) === DbSystemValues.MYSQL) {\n      remoteDependencyData.type = \"mysql\";\n    } else if (String(dbSystem) === DbSystemValues.POSTGRESQL) {\n      remoteDependencyData.type = \"postgresql\";\n    } else if (String(dbSystem) === DbSystemValues.MONGODB) {\n      remoteDependencyData.type = \"mongodb\";\n    } else if (String(dbSystem) === DbSystemValues.REDIS) {\n      remoteDependencyData.type = \"redis\";\n    } else if (isSqlDB(String(dbSystem))) {\n      remoteDependencyData.type = \"SQL\";\n    } else {\n      remoteDependencyData.type = String(dbSystem);\n    }\n    const dbStatement = span.attributes[SemanticAttributes.DB_STATEMENT];\n    const dbOperation = span.attributes[SemanticAttributes.DB_OPERATION];\n    if (dbStatement) {\n      remoteDependencyData.data = String(dbStatement);\n    } else if (dbOperation) {\n      remoteDependencyData.data = String(dbOperation);\n    }\n    const target = getDependencyTarget(span.attributes);\n    const dbName = span.attributes[SemanticAttributes.DB_NAME];\n    if (target) {\n      remoteDependencyData.target = dbName ? `${target}|${dbName}` : `${target}`;\n    } else {\n      remoteDependencyData.target = dbName ? `${dbName}` : `${dbSystem}`;\n    }\n  }\n  // grpc Dependency\n  else if (rpcSystem) {\n    remoteDependencyData.type = DependencyTypes.Grpc;\n    const grpcStatusCode = span.attributes[SemanticAttributes.RPC_GRPC_STATUS_CODE];\n    if (grpcStatusCode) {\n      remoteDependencyData.resultCode = String(grpcStatusCode);\n    }\n    const target = getDependencyTarget(span.attributes);\n    if (target) {\n      remoteDependencyData.target = `${target}`;\n    } else if (rpcSystem) {\n      remoteDependencyData.target = String(rpcSystem);\n    }\n  }\n  return remoteDependencyData;\n}\n\nfunction createRequestData(span: ReadableSpan): RequestData {\n  const requestData: RequestData = {\n    id: `${span.spanContext().spanId}`,\n    success: span.status.code != SpanStatusCode.ERROR,\n    responseCode: \"0\",\n    duration: msToTimeSpan(hrTimeToMilliseconds(span.duration)),\n    version: 2,\n    source: undefined,\n  };\n  const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\n  const grpcStatusCode = span.attributes[SemanticAttributes.RPC_GRPC_STATUS_CODE];\n  if (httpMethod) {\n    requestData.url = getUrl(span.attributes);\n    const httpStatusCode = span.attributes[SemanticAttributes.HTTP_STATUS_CODE];\n    if (httpStatusCode) {\n      requestData.responseCode = String(httpStatusCode);\n    }\n  } else if (grpcStatusCode) {\n    requestData.responseCode = String(grpcStatusCode);\n  }\n  return requestData;\n}\n\n/**\n * Span to Azure envelope parsing.\n * @internal\n */\nexport function readableSpanToEnvelope(span: ReadableSpan, ikey: string): Envelope {\n  let name: string;\n  let baseType: \"RemoteDependencyData\" | \"RequestData\";\n  let baseData: RemoteDependencyData | RequestData;\n\n  const time = new Date(hrTimeToMilliseconds(span.startTime));\n  const instrumentationKey = ikey;\n  const tags = createTagsFromSpan(span);\n  const [properties, measurements] = createPropertiesFromSpan(span);\n  switch (span.kind) {\n    case SpanKind.CLIENT:\n    case SpanKind.PRODUCER:\n    case SpanKind.INTERNAL:\n      name = \"Microsoft.ApplicationInsights.RemoteDependency\";\n      baseType = \"RemoteDependencyData\";\n      baseData = createDependencyData(span);\n      break;\n    case SpanKind.SERVER:\n    case SpanKind.CONSUMER:\n      name = \"Microsoft.ApplicationInsights.Request\";\n      baseType = \"RequestData\";\n      baseData = createRequestData(span);\n      baseData.name = tags[KnownContextTagKeys.AiOperationName];\n      break;\n    default:\n      // never\n      diag.error(`Unsupported span kind ${span.kind}`);\n      throw new Error(`Unsupported span kind ${span.kind}`);\n  }\n\n  let sampleRate = 100;\n  if (span.attributes[AzureMonitorSampleRate]) {\n    sampleRate = Number(span.attributes[AzureMonitorSampleRate]);\n  }\n\n  // Azure SDK\n  if (span.attributes[AzNamespace]) {\n    if (span.kind === SpanKind.INTERNAL) {\n      baseData.type = `${DependencyTypes.InProc} | ${span.attributes[AzNamespace]}`;\n    }\n    if (span.attributes[AzNamespace] === MicrosoftEventHub) {\n      parseEventHubSpan(span, baseData);\n    }\n  }\n\n  return {\n    name,\n    sampleRate,\n    time,\n    instrumentationKey,\n    tags,\n    version: 1,\n    data: {\n      baseType,\n      baseData: {\n        ...baseData,\n        properties,\n        measurements,\n      },\n    },\n  };\n}\n\n/**\n * Span Events to Azure envelopes parsing.\n * @internal\n */\nexport function spanEventsToEnvelopes(span: ReadableSpan, ikey: string): Envelope[] {\n  const envelopes: Envelope[] = [];\n  if (span.events) {\n    span.events.forEach((event: TimedEvent) => {\n      let baseType: \"ExceptionData\" | \"MessageData\";\n      const time = new Date(hrTimeToMilliseconds(event.time));\n      let name = \"\";\n      let baseData: TelemetryExceptionData | MessageData;\n      const properties = createPropertiesFromSpanAttributes(event.attributes);\n\n      const tags: Tags = createTagsFromResource(span.resource);\n      tags[KnownContextTagKeys.AiOperationId] = span.spanContext().traceId;\n      const spanId = span.spanContext()?.spanId;\n      if (spanId) {\n        tags[KnownContextTagKeys.AiOperationParentId] = spanId;\n      }\n\n      // Only generate exception telemetry for incoming requests\n      if (event.name == \"exception\" && span.kind == SpanKind.SERVER) {\n        name = \"Microsoft.ApplicationInsights.Exception\";\n        baseType = \"ExceptionData\";\n        let typeName = \"\";\n        let message = \"Exception\";\n        let stack = \"\";\n        let hasFullStack = false;\n        if (event.attributes) {\n          typeName = String(event.attributes[SemanticAttributes.EXCEPTION_TYPE]);\n          stack = String(event.attributes[SemanticAttributes.EXCEPTION_STACKTRACE]);\n          if (stack) {\n            hasFullStack = true;\n          }\n          const exceptionMsg = event.attributes[SemanticAttributes.EXCEPTION_MESSAGE];\n          if (exceptionMsg) {\n            message = String(exceptionMsg);\n          }\n          const escaped = event.attributes[SemanticAttributes.EXCEPTION_ESCAPED];\n          if (escaped != undefined) {\n            properties[SemanticAttributes.EXCEPTION_ESCAPED] = String(escaped);\n          }\n        }\n        const exceptionDetails: TelemetryExceptionDetails = {\n          typeName: typeName,\n          message: message,\n          stack: stack,\n          hasFullStack: hasFullStack,\n        };\n        const exceptionData: TelemetryExceptionData = {\n          exceptions: [exceptionDetails],\n          version: 2,\n          properties: properties,\n        };\n        baseData = exceptionData;\n      } else {\n        name = \"Microsoft.ApplicationInsights.Message\";\n        baseType = \"MessageData\";\n        const messageData: MessageData = {\n          message: event.name,\n          version: 2,\n          properties: properties,\n        };\n        baseData = messageData;\n      }\n      let sampleRate = 100;\n      if (span.attributes[AzureMonitorSampleRate]) {\n        sampleRate = Number(span.attributes[AzureMonitorSampleRate]);\n      }\n      const env: Envelope = {\n        name: name,\n        time: time,\n        instrumentationKey: ikey,\n        version: 1,\n        sampleRate: sampleRate,\n        data: {\n          baseType: baseType,\n          baseData: baseData,\n        },\n        tags: tags,\n      };\n      envelopes.push(env);\n    });\n  }\n  return envelopes;\n}\n"]}