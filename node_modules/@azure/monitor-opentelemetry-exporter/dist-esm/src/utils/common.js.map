{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/utils/common.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport os from \"os\";\nimport {\n  SemanticResourceAttributes,\n  SemanticAttributes,\n  DbSystemValues,\n} from \"@opentelemetry/semantic-conventions\";\nimport { Tags } from \"../types\";\nimport { getInstance } from \"../platform\";\nimport { KnownContextTagKeys, TelemetryItem as Envelope, MetricsData } from \"../generated\";\nimport { Resource } from \"@opentelemetry/resources\";\nimport { Attributes } from \"@opentelemetry/api\";\n\nexport function createTagsFromResource(resource: Resource): Tags {\n  const context = getInstance();\n  const tags: Tags = { ...context.tags };\n  if (resource && resource.attributes) {\n    tags[KnownContextTagKeys.AiCloudRole] = getCloudRole(resource);\n    tags[KnownContextTagKeys.AiCloudRoleInstance] = getCloudRoleInstance(resource);\n    const endUserId = resource.attributes[SemanticAttributes.ENDUSER_ID];\n    if (endUserId) {\n      tags[KnownContextTagKeys.AiUserId] = String(endUserId);\n    }\n  }\n  return tags;\n}\n\nfunction getCloudRole(resource: Resource): string {\n  let cloudRole = \"\";\n  // Service attributes\n  const serviceName = resource.attributes[SemanticResourceAttributes.SERVICE_NAME];\n  const serviceNamespace = resource.attributes[SemanticResourceAttributes.SERVICE_NAMESPACE];\n  if (serviceName) {\n    // Custom Service name provided by customer is highest precedence\n    if (!String(serviceName).startsWith(\"unknown_service\")) {\n      if (serviceNamespace) {\n        return `${serviceNamespace}.${serviceName}`;\n      } else {\n        return String(serviceName);\n      }\n    } else {\n      // Service attributes will be only used if K8S attributes are not present\n      if (serviceNamespace) {\n        cloudRole = `${serviceNamespace}.${serviceName}`;\n      } else {\n        cloudRole = String(serviceName);\n      }\n    }\n  }\n  // Kubernetes attributes should take precedence\n  const kubernetesDeploymentName =\n    resource.attributes[SemanticResourceAttributes.K8S_DEPLOYMENT_NAME];\n  if (kubernetesDeploymentName) {\n    return String(kubernetesDeploymentName);\n  }\n  const kuberneteReplicasetName =\n    resource.attributes[SemanticResourceAttributes.K8S_REPLICASET_NAME];\n  if (kuberneteReplicasetName) {\n    return String(kuberneteReplicasetName);\n  }\n  const kubernetesStatefulSetName =\n    resource.attributes[SemanticResourceAttributes.K8S_STATEFULSET_NAME];\n  if (kubernetesStatefulSetName) {\n    return String(kubernetesStatefulSetName);\n  }\n  const kubernetesJobName = resource.attributes[SemanticResourceAttributes.K8S_JOB_NAME];\n  if (kubernetesJobName) {\n    return String(kubernetesJobName);\n  }\n  const kubernetesCronjobName = resource.attributes[SemanticResourceAttributes.K8S_CRONJOB_NAME];\n  if (kubernetesCronjobName) {\n    return String(kubernetesCronjobName);\n  }\n  const kubernetesDaemonsetName =\n    resource.attributes[SemanticResourceAttributes.K8S_DAEMONSET_NAME];\n  if (kubernetesDaemonsetName) {\n    return String(kubernetesDaemonsetName);\n  }\n  return cloudRole;\n}\n\nfunction getCloudRoleInstance(resource: Resource): string {\n  // Kubernetes attributes should take precedence\n  const kubernetesPodName = resource.attributes[SemanticResourceAttributes.K8S_POD_NAME];\n  if (kubernetesPodName) {\n    return String(kubernetesPodName);\n  }\n  // Service attributes\n  const serviceInstanceId = resource.attributes[SemanticResourceAttributes.SERVICE_INSTANCE_ID];\n  if (serviceInstanceId) {\n    return String(serviceInstanceId);\n  }\n  // Default\n  return os && os.hostname();\n}\n\nexport function isSqlDB(dbSystem: string) {\n  return (\n    dbSystem === DbSystemValues.DB2 ||\n    dbSystem === DbSystemValues.DERBY ||\n    dbSystem === DbSystemValues.MARIADB ||\n    dbSystem === DbSystemValues.MSSQL ||\n    dbSystem === DbSystemValues.ORACLE ||\n    dbSystem === DbSystemValues.SQLITE ||\n    dbSystem === DbSystemValues.OTHER_SQL ||\n    dbSystem === DbSystemValues.HSQLDB ||\n    dbSystem === DbSystemValues.H2\n  );\n}\n\nexport function getUrl(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const httpMethod = attributes[SemanticAttributes.HTTP_METHOD];\n  if (httpMethod) {\n    const httpUrl = attributes[SemanticAttributes.HTTP_URL];\n    if (httpUrl) {\n      return String(httpUrl);\n    } else {\n      const httpScheme = attributes[SemanticAttributes.HTTP_SCHEME];\n      const httpTarget = attributes[SemanticAttributes.HTTP_TARGET];\n      if (httpScheme && httpTarget) {\n        const httpHost = attributes[SemanticAttributes.HTTP_HOST];\n        if (httpHost) {\n          return `${httpScheme}://${httpHost}${httpTarget}`;\n        } else {\n          const netPeerPort = attributes[SemanticAttributes.NET_PEER_PORT];\n          if (netPeerPort) {\n            const netPeerName = attributes[SemanticAttributes.NET_PEER_NAME];\n            if (netPeerName) {\n              return `${httpScheme}://${netPeerName}:${netPeerPort}${httpTarget}`;\n            } else {\n              const netPeerIp = attributes[SemanticAttributes.NET_PEER_IP];\n              if (netPeerIp) {\n                return `${httpScheme}://${netPeerIp}:${netPeerPort}${httpTarget}`;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n\nexport function getDependencyTarget(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const peerService = attributes[SemanticAttributes.PEER_SERVICE];\n  const httpHost = attributes[SemanticAttributes.HTTP_HOST];\n  const httpUrl = attributes[SemanticAttributes.HTTP_URL];\n  const netPeerName = attributes[SemanticAttributes.NET_PEER_NAME];\n  const netPeerIp = attributes[SemanticAttributes.NET_PEER_IP];\n  if (peerService) {\n    return String(peerService);\n  } else if (httpHost) {\n    return String(httpHost);\n  } else if (httpUrl) {\n    return String(httpUrl);\n  } else if (netPeerName) {\n    return String(netPeerName);\n  } else if (netPeerIp) {\n    return String(netPeerIp);\n  }\n  return \"\";\n}\n\nexport function createResourceMetricEnvelope(\n  resource: Resource,\n  instrumentationKey: string\n): Envelope | undefined {\n  if (resource && resource.attributes) {\n    const tags = createTagsFromResource(resource);\n    const resourceAttributes: { [propertyName: string]: string } = {};\n    for (const key of Object.keys(resource.attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key == SemanticResourceAttributes.TELEMETRY_SDK_VERSION ||\n          key == SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE ||\n          key == SemanticResourceAttributes.TELEMETRY_SDK_NAME\n        )\n      ) {\n        resourceAttributes[key] = resource.attributes[key] as string;\n      }\n    }\n    // Only send event when resource attributes are available\n    if (Object.keys(resourceAttributes).length > 0) {\n      let baseData: MetricsData = {\n        version: 2,\n        metrics: [{ name: \"_APPRESOURCEPREVIEW_\", value: 1 }],\n        properties: resourceAttributes,\n      };\n      let envelope: Envelope = {\n        name: \"Microsoft.ApplicationInsights.Metric\",\n        time: new Date(),\n        sampleRate: 100, // Metrics are never sampled\n        instrumentationKey: instrumentationKey,\n        version: 1,\n        data: {\n          baseType: \"MetricData\",\n          baseData: baseData,\n        },\n        tags: tags,\n      };\n      return envelope;\n    }\n  }\n  return;\n}\n"]}