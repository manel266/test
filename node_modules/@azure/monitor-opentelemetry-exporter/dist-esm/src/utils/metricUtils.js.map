{"version":3,"file":"metricUtils.js","sourceRoot":"","sources":["../../../src/utils/metricUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Attributes } from \"@opentelemetry/api\";\nimport { DataPointType, Histogram, ResourceMetrics } from \"@opentelemetry/sdk-metrics\";\nimport { TelemetryItem as Envelope, MetricsData, MetricDataPoint } from \"../generated\";\nimport { createTagsFromResource } from \"./common\";\n\nfunction createPropertiesFromMetricAttributes(attributes?: Attributes): {\n  [propertyName: string]: string;\n} {\n  const properties: { [propertyName: string]: string } = {};\n  if (attributes) {\n    for (const key of Object.keys(attributes)) {\n      properties[key] = attributes[key] as string;\n    }\n  }\n  return properties;\n}\n\n/**\n * Metric to Azure envelope parsing.\n * @internal\n */\nexport function resourceMetricsToEnvelope(\n  metrics: ResourceMetrics,\n  ikey: string,\n  isStatsbeat?: boolean\n): Envelope[] {\n  let envelopes: Envelope[] = [];\n  const time = new Date();\n  const instrumentationKey = ikey;\n  const tags = createTagsFromResource(metrics.resource);\n  let envelopeName: string;\n\n  if (isStatsbeat) {\n    envelopeName = \"Microsoft.ApplicationInsights.Statsbeat\";\n  } else {\n    envelopeName = \"Microsoft.ApplicationInsights.Metric\";\n  }\n\n  metrics.scopeMetrics.forEach((scopeMetric) => {\n    scopeMetric.metrics.forEach((metric) => {\n      metric.dataPoints.forEach((dataPoint) => {\n        let baseData: MetricsData = {\n          metrics: [],\n          version: 2,\n          properties: {},\n        };\n        baseData.properties = createPropertiesFromMetricAttributes(dataPoint.attributes);\n        var metricDataPoint: MetricDataPoint = {\n          name: metric.descriptor.name,\n          value: 0,\n          dataPointType: \"Aggregation\",\n        };\n        if (\n          metric.dataPointType == DataPointType.SUM ||\n          metric.dataPointType == DataPointType.GAUGE\n        ) {\n          metricDataPoint.value = dataPoint.value as number;\n          metricDataPoint.count = 1;\n        } else {\n          metricDataPoint.value = (dataPoint.value as Histogram).sum || 0;\n          metricDataPoint.count = (dataPoint.value as Histogram).count;\n          metricDataPoint.max = (dataPoint.value as Histogram).max;\n          metricDataPoint.min = (dataPoint.value as Histogram).min;\n        }\n        baseData.metrics.push(metricDataPoint);\n        let envelope: Envelope = {\n          name: envelopeName,\n          time: time,\n          sampleRate: 100, // Metrics are never sampled\n          instrumentationKey: instrumentationKey,\n          tags: tags,\n          version: 1,\n          data: {\n            baseType: \"MetricData\",\n            baseData: {\n              ...baseData,\n            },\n          },\n        };\n        envelopes.push(envelope);\n      });\n    });\n  });\n\n  return envelopes;\n}\n"]}