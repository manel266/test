import { AzureMonitorExporterOptions } from '@azure/monitor-opentelemetry-exporter';
import { InstrumentationConfig } from '@opentelemetry/instrumentation';
import { Logger } from '@opentelemetry/sdk-logs';
import { LoggerProvider } from '@opentelemetry/sdk-logs';
import { Meter } from '@opentelemetry/api';
import { MeterProvider } from '@opentelemetry/sdk-metrics';
import { OTLPExporterNodeConfigBase } from '@opentelemetry/otlp-exporter-base';
import { Resource } from '@opentelemetry/resources';
import { Tracer } from '@opentelemetry/sdk-trace-base';
import { TracerProvider } from '@opentelemetry/api';

/**
 * Azure Monitor OpenTelemetry Client
 */
export declare class AzureMonitorOpenTelemetryClient {
    private _config;
    private _traceHandler;
    private _metricHandler;
    private _logHandler;
    /**
     * Initializes a new instance of the AzureMonitorOpenTelemetryClient class.
     * @param options Azure Monitor OpenTelemetry Options
     */
    constructor(options?: AzureMonitorOpenTelemetryOptions);
    /**
     *Get OpenTelemetry TracerProvider
     */
    getTracerProvider(): TracerProvider;
    /**
     *Get OpenTelemetry TracerProvider
     */
    getTracer(): Tracer;
    /**
     *Get OpenTelemetry MeterProvider
     */
    getMeterProvider(): MeterProvider;
    /**
     *Get OpenTelemetry Meter
     */
    getMeter(): Meter;
    /**
     *Get OpenTelemetry LoggerProvider
     */
    getLoggerProvider(): LoggerProvider;
    /**
     *Get OpenTelemetry Logger
     */
    getLogger(): Logger;
    /**
     *Try to send all queued telemetry if present.
     */
    flush(): Promise<void>;
    /**
     *Shutdown all handlers
     */
    shutdown(): Promise<void>;
    private _setStatsbeatFeatures;
}

/**
 * Azure Monitor OpenTelemetry Options
 */
export declare interface AzureMonitorOpenTelemetryOptions {
    /** Azure Monitor Exporter Configuration */
    azureMonitorExporterConfig?: AzureMonitorExporterOptions;
    /** OTLP Trace Exporter Configuration */
    otlpTraceExporterConfig?: OTLPExporterConfig;
    /** OTLP Metric Exporter Configuration */
    otlpMetricExporterConfig?: OTLPExporterConfig;
    /** OTLP Log Exporter Configuration */
    otlpLogExporterConfig?: OTLPExporterConfig;
    /** OpenTelemetry Resource */
    resource?: Resource;
    /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */
    samplingRatio?: number;
    /**
     * Sets the state of performance tracking (enabled by default)
     * if true performance counters will be collected every second and sent to Azure Monitor
     */
    enableAutoCollectPerformance?: boolean;
    /**
     * Sets the state of standard metrics tracking (enabled by default)
     * if true Standard metrics will be collected every minute and sent to Azure Monitor
     */
    enableAutoCollectStandardMetrics?: boolean;
    /**
     * OpenTelemetry Instrumentations options included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)
     */
    instrumentationOptions?: InstrumentationOptions;
}

/**
 * OpenTelemetry Instrumentations Configuration interface
 */
export declare interface InstrumentationOptions {
    /** Azure SDK Instrumentation Config */
    azureSdk?: InstrumentationConfig;
    /** HTTP Instrumentation Config */
    http?: InstrumentationConfig;
    /** MongoDB Instrumentation Config */
    mongoDb?: InstrumentationConfig;
    /** MySQL Instrumentation Config */
    mySql?: InstrumentationConfig;
    /** PostgreSql Instrumentation Config */
    postgreSql?: InstrumentationConfig;
    /** Redis Instrumentation Config */
    redis?: InstrumentationConfig;
    /** Redis4 Instrumentation Config */
    redis4?: InstrumentationConfig;
}

/**
 * OTLP Exporter Options
 */
export declare interface OTLPExporterConfig extends OTLPExporterNodeConfigBase {
    /** Enable/Disable OTLP Exporter */
    enabled?: boolean;
}

export { }
