{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/logs/handler.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAC;AAChF,OAAO,EAAE,eAAe,EAAE,MAAM,wCAAwC,CAAC;AACzE,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EACL,cAAc,EACd,uBAAuB,GAExB,MAAM,yBAAyB,CAAC;AAIjC,OAAO,EAAE,uBAAuB,EAAE,MAAM,sBAAsB,CAAC;AAE/D;;GAEG;AACH,MAAM,OAAO,UAAU;IAUrB;;;;OAIG;IACH,YAAY,MAAuC,EAAE,aAA4B;;QAC/E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,MAAM,oBAAoB,GAAyB;YACjD,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;SAChC,CAAC;QACF,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,oBAAoB,CAAC,CAAC;QAChE,IAAI,CAAC,cAAc,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAC3F,0DAA0D;QAC1D,8GAA8G;QAC9G,IAAI,CAAC,mBAAmB,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACrE,IAAI,CAAC,mBAAmB,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAErE,IAAI,MAAA,MAAM,CAAC,qBAAqB,0CAAE,OAAO,EAAE;YACzC,IAAI,CAAC,aAAa,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;YACvE,MAAM,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACzE,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAe,CAAC;IAC/F,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,KAAK;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;IAC3C,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureMonitorLogExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport { OTLPLogExporter } from \"@opentelemetry/exporter-logs-otlp-http\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport {\n  LoggerProvider,\n  BatchLogRecordProcessor,\n  Logger as OtelLogger,\n} from \"@opentelemetry/sdk-logs\";\nimport { LoggerProviderConfig } from \"@opentelemetry/sdk-logs/build/src/types\";\nimport { AzureMonitorOpenTelemetryConfig } from \"../shared/config\";\nimport { MetricHandler } from \"../metrics/handler\";\nimport { AzureLogRecordProcessor } from \"./logRecordProcessor\";\n\n/**\n * Azure Monitor OpenTelemetry Log Handler\n */\nexport class LogHandler {\n  private _loggerProvider: LoggerProvider;\n  private _logger: OtelLogger;\n  private _azureExporter: AzureMonitorLogExporter;\n  private _otlpExporter?: OTLPLogExporter;\n  private _logRecordProcessor: BatchLogRecordProcessor;\n  private _config: AzureMonitorOpenTelemetryConfig;\n  private _metricHandler?: MetricHandler;\n  private _azureLogProccessor: AzureLogRecordProcessor;\n\n  /**\n   * Initializes a new instance of the TraceHandler class.\n   * @param _config - Distro configuration.\n   * @param _metricHandler - MetricHandler.\n   */\n  constructor(config: AzureMonitorOpenTelemetryConfig, metricHandler: MetricHandler) {\n    this._config = config;\n    this._metricHandler = metricHandler;\n    const loggerProviderConfig: LoggerProviderConfig = {\n      resource: this._config.resource,\n    };\n    this._loggerProvider = new LoggerProvider(loggerProviderConfig);\n    this._azureExporter = new AzureMonitorLogExporter(this._config.azureMonitorExporterConfig);\n    // Log Processor could be configured through env variables\n    // https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-logrecord-processor\n    this._logRecordProcessor = new BatchLogRecordProcessor(this._azureExporter);\n    this._loggerProvider.addLogRecordProcessor(this._logRecordProcessor);\n    this._azureLogProccessor = new AzureLogRecordProcessor(this._metricHandler);\n    this._loggerProvider.addLogRecordProcessor(this._azureLogProccessor);\n\n    if (config.otlpLogExporterConfig?.enabled) {\n      this._otlpExporter = new OTLPLogExporter(config.otlpLogExporterConfig);\n      const otlpLogProcessor = new BatchLogRecordProcessor(this._otlpExporter);\n      this._loggerProvider.addLogRecordProcessor(otlpLogProcessor);\n    }\n    logs.setGlobalLoggerProvider(this._loggerProvider);\n    this._logger = this._loggerProvider.getLogger(\"AzureMonitorLogger\", undefined) as OtelLogger;\n  }\n\n  /**\n   *Get OpenTelemetry LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return this._loggerProvider;\n  }\n\n  /**\n   *Get OpenTelemetry Logger\n   */\n  public getLogger(): OtelLogger {\n    return this._logger;\n  }\n\n  /**\n   * Shutdown handler, all Logger providers will return no-op Loggers\n   */\n  public async shutdown(): Promise<void> {\n    await this._loggerProvider.shutdown();\n  }\n\n  /**\n   * Force flush Logger Provider\n   */\n  public async flush(): Promise<void> {\n    return this._loggerProvider.forceFlush();\n  }\n}\n"]}