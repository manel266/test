// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { AzureMonitorLogExporter } from "@azure/monitor-opentelemetry-exporter";
import { OTLPLogExporter } from "@opentelemetry/exporter-logs-otlp-http";
import { logs } from "@opentelemetry/api-logs";
import { LoggerProvider, BatchLogRecordProcessor, } from "@opentelemetry/sdk-logs";
import { AzureLogRecordProcessor } from "./logRecordProcessor";
/**
 * Azure Monitor OpenTelemetry Log Handler
 */
export class LogHandler {
    /**
     * Initializes a new instance of the TraceHandler class.
     * @param _config - Distro configuration.
     * @param _metricHandler - MetricHandler.
     */
    constructor(config, metricHandler) {
        var _a;
        this._config = config;
        this._metricHandler = metricHandler;
        const loggerProviderConfig = {
            resource: this._config.resource,
        };
        this._loggerProvider = new LoggerProvider(loggerProviderConfig);
        this._azureExporter = new AzureMonitorLogExporter(this._config.azureMonitorExporterConfig);
        // Log Processor could be configured through env variables
        // https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-logrecord-processor
        this._logRecordProcessor = new BatchLogRecordProcessor(this._azureExporter);
        this._loggerProvider.addLogRecordProcessor(this._logRecordProcessor);
        this._azureLogProccessor = new AzureLogRecordProcessor(this._metricHandler);
        this._loggerProvider.addLogRecordProcessor(this._azureLogProccessor);
        if ((_a = config.otlpLogExporterConfig) === null || _a === void 0 ? void 0 : _a.enabled) {
            this._otlpExporter = new OTLPLogExporter(config.otlpLogExporterConfig);
            const otlpLogProcessor = new BatchLogRecordProcessor(this._otlpExporter);
            this._loggerProvider.addLogRecordProcessor(otlpLogProcessor);
        }
        logs.setGlobalLoggerProvider(this._loggerProvider);
        this._logger = this._loggerProvider.getLogger("AzureMonitorLogger", undefined);
    }
    /**
     *Get OpenTelemetry LoggerProvider
     */
    getLoggerProvider() {
        return this._loggerProvider;
    }
    /**
     *Get OpenTelemetry Logger
     */
    getLogger() {
        return this._logger;
    }
    /**
     * Shutdown handler, all Logger providers will return no-op Loggers
     */
    async shutdown() {
        await this._loggerProvider.shutdown();
    }
    /**
     * Force flush Logger Provider
     */
    async flush() {
        return this._loggerProvider.forceFlush();
    }
}
//# sourceMappingURL=handler.js.map