// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { AzureMonitorOpenTelemetryConfig } from "./shared/config";
import { MetricHandler } from "./metrics";
import { TraceHandler } from "./traces/handler";
import { Logger as InternalLogger } from "./shared/logging";
import { LogHandler } from "./logs";
import { AZURE_MONITOR_STATSBEAT_FEATURES, StatsbeatFeature, StatsbeatInstrumentation, } from "./types";
/**
 * Azure Monitor OpenTelemetry Client
 */
export class AzureMonitorOpenTelemetryClient {
    /**
     * Initializes a new instance of the AzureMonitorOpenTelemetryClient class.
     * @param options Azure Monitor OpenTelemetry Options
     */
    constructor(options) {
        this._config = new AzureMonitorOpenTelemetryConfig(options);
        this._setStatsbeatFeatures();
        this._metricHandler = new MetricHandler(this._config);
        this._traceHandler = new TraceHandler(this._config, this._metricHandler);
        this._logHandler = new LogHandler(this._config, this._metricHandler);
    }
    /**
     *Get OpenTelemetry TracerProvider
     */
    getTracerProvider() {
        return this._traceHandler.getTracerProvider();
    }
    /**
     *Get OpenTelemetry TracerProvider
     */
    getTracer() {
        return this._traceHandler.getTracer();
    }
    /**
     *Get OpenTelemetry MeterProvider
     */
    getMeterProvider() {
        return this._metricHandler.getMeterProvider();
    }
    /**
     *Get OpenTelemetry Meter
     */
    getMeter() {
        return this._metricHandler.getMeter();
    }
    /**
     *Get OpenTelemetry LoggerProvider
     */
    getLoggerProvider() {
        return this._logHandler.getLoggerProvider();
    }
    /**
     *Get OpenTelemetry Logger
     */
    getLogger() {
        return this._logHandler.getLogger();
    }
    /**
     *Try to send all queued telemetry if present.
     */
    async flush() {
        try {
            await this._traceHandler.flush();
            await this._metricHandler.flush();
            await this._logHandler.flush();
        }
        catch (err) {
            InternalLogger.getInstance().error("Failed to flush telemetry", err);
        }
    }
    /**
     *Shutdown all handlers
     */
    async shutdown() {
        this._traceHandler.shutdown();
        this._metricHandler.shutdown();
        this._logHandler.shutdown();
    }
    _setStatsbeatFeatures() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        let instrumentationBitMap = 0;
        if ((_b = (_a = this._config.instrumentationOptions) === null || _a === void 0 ? void 0 : _a.azureSdk) === null || _b === void 0 ? void 0 : _b.enabled) {
            instrumentationBitMap |= StatsbeatInstrumentation.AZURE_CORE_TRACING;
        }
        if ((_d = (_c = this._config.instrumentationOptions) === null || _c === void 0 ? void 0 : _c.mongoDb) === null || _d === void 0 ? void 0 : _d.enabled) {
            instrumentationBitMap |= StatsbeatInstrumentation.MONGODB;
        }
        if ((_f = (_e = this._config.instrumentationOptions) === null || _e === void 0 ? void 0 : _e.mySql) === null || _f === void 0 ? void 0 : _f.enabled) {
            instrumentationBitMap |= StatsbeatInstrumentation.MYSQL;
        }
        if ((_h = (_g = this._config.instrumentationOptions) === null || _g === void 0 ? void 0 : _g.postgreSql) === null || _h === void 0 ? void 0 : _h.enabled) {
            instrumentationBitMap |= StatsbeatInstrumentation.POSTGRES;
        }
        if ((_k = (_j = this._config.instrumentationOptions) === null || _j === void 0 ? void 0 : _j.redis) === null || _k === void 0 ? void 0 : _k.enabled) {
            instrumentationBitMap |= StatsbeatInstrumentation.REDIS;
        }
        let featureBitMap = 0;
        featureBitMap |= StatsbeatFeature.DISTRO;
        try {
            process.env[AZURE_MONITOR_STATSBEAT_FEATURES] = JSON.stringify({
                instrumentation: instrumentationBitMap,
                feature: featureBitMap,
            });
        }
        catch (error) {
            InternalLogger.getInstance().error("Failed call to JSON.stringify.", error);
        }
    }
}
//# sourceMappingURL=client.js.map