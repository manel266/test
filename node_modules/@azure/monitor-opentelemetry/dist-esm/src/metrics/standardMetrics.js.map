{"version":3,"file":"standardMetrics.js","sourceRoot":"","sources":["../../../src/metrics/standardMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  MeterProvider,\n  MeterProviderOptions,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { AzureMonitorOpenTelemetryConfig } from \"../shared/config\";\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport { Attributes, Counter, Histogram, Meter, SpanKind, ValueType } from \"@opentelemetry/api\";\nimport { ReadableSpan, Span, TimedEvent } from \"@opentelemetry/sdk-trace-base\";\nimport {\n  SemanticAttributes,\n  SemanticResourceAttributes,\n} from \"@opentelemetry/semantic-conventions\";\nimport {\n  MetricDependencyDimensions,\n  MetricRequestDimensions,\n  StandardMetricBaseDimensions,\n} from \"./types\";\nimport { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport { Resource } from \"@opentelemetry/resources\";\n\n/**\n * Azure Monitor Standard Metrics\n * @internal\n */\nexport class StandardMetrics {\n  private _config: AzureMonitorOpenTelemetryConfig;\n  private _collectionInterval = 60000; // 60 seconds\n  private _meterProvider: MeterProvider;\n  private _azureExporter: AzureMonitorMetricExporter;\n  private _metricReader: PeriodicExportingMetricReader;\n  private _meter: Meter;\n  private _incomingRequestDurationHistogram: Histogram;\n  private _outgoingRequestDurationHistogram: Histogram;\n  private _exceptionsCounter: Counter;\n  private _tracesCounter: Counter;\n\n  /**\n   * Initializes a new instance of the StandardMetrics class.\n   * @param config - Distro configuration.\n   * @param options - Standard Metrics options.\n   */\n  constructor(config: AzureMonitorOpenTelemetryConfig, options?: { collectionInterval: number }) {\n    this._config = config;\n    const meterProviderConfig: MeterProviderOptions = {\n      resource: this._config.resource,\n    };\n    this._meterProvider = new MeterProvider(meterProviderConfig);\n    this._azureExporter = new AzureMonitorMetricExporter(this._config.azureMonitorExporterConfig);\n    const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._azureExporter as any,\n      exportIntervalMillis: options?.collectionInterval || this._collectionInterval,\n    };\n    this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n    this._meterProvider.addMetricReader(this._metricReader);\n    this._meter = this._meterProvider.getMeter(\"AzureMonitorStandardMetricsMeter\");\n    this._incomingRequestDurationHistogram = this._meter.createHistogram(\n      \"azureMonitor.http.requestDuration\",\n      {\n        valueType: ValueType.DOUBLE,\n      }\n    );\n    this._outgoingRequestDurationHistogram = this._meter.createHistogram(\n      \"azureMonitor.http.dependencyDuration\",\n      {\n        valueType: ValueType.DOUBLE,\n      }\n    );\n\n    this._exceptionsCounter = this._meter.createCounter(\"azureMonitor.exceptionCount\", {\n      valueType: ValueType.INT,\n    });\n    this._tracesCounter = this._meter.createCounter(\"azureMonitor.traceCount\", {\n      valueType: ValueType.INT,\n    });\n  }\n\n  /**\n   * Shutdown Meter Provider it will return no-op Meters after being called.\n   */\n  public shutdown() {\n    this._meterProvider.shutdown();\n  }\n\n  /**\n   * Force flush Meter Provider.\n   */\n  public async flush(): Promise<void> {\n    await this._meterProvider.forceFlush();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider {\n    return this._meterProvider;\n  }\n\n  /**\n   * Add extra attributes to Span so Ingestion doesn't aggregate the data again\n   * @internal\n   */\n  public markSpanAsProcessed(span: Span): void {\n    if (this._config.enableAutoCollectStandardMetrics) {\n      if (span.kind === SpanKind.CLIENT) {\n        span.setAttributes({\n          \"_MS.ProcessedByMetricExtractors\": \"(Name:'Dependencies', Ver:'1.1')\",\n        });\n      } else if (span.kind === SpanKind.SERVER) {\n        span.setAttributes({\n          \"_MS.ProcessedByMetricExtractors\": \"(Name:'Requests', Ver:'1.1')\",\n        });\n      }\n    }\n  }\n\n  /**\n   * Record Span metrics\n   * @internal\n   */\n  public recordSpan(span: ReadableSpan): void {\n    const durationMs = span.duration[0];\n    if (span.kind === SpanKind.SERVER) {\n      this._incomingRequestDurationHistogram.record(durationMs, this._getRequestDimensions(span));\n    } else {\n      this._outgoingRequestDurationHistogram.record(\n        durationMs,\n        this._getDependencyDimensions(span)\n      );\n    }\n    if (span.events) {\n      span.events.forEach((event: TimedEvent) => {\n        event.attributes = event.attributes || {};\n        if (event.name === \"exception\") {\n          event.attributes[\"_MS.ProcessedByMetricExtractors\"] = \"(Name:'Exceptions', Ver:'1.1')\";\n          this._exceptionsCounter.add(1, this._getExceptionDimensions(span.resource));\n        } else {\n          event.attributes[\"_MS.ProcessedByMetricExtractors\"] = \"(Name:'Traces', Ver:'1.1')\";\n          this._tracesCounter.add(1, this._getTraceDimensions(span.resource));\n        }\n      });\n    }\n  }\n\n  /**\n   * Record LogRecord metrics, add attribute so data is not aggregated again in ingestion\n   * @internal\n   */\n  public recordLog(logRecord: LogRecord): void {\n    if (this._isExceptionTelemetry(logRecord)) {\n      logRecord.setAttribute(\"_MS.ProcessedByMetricExtractors\", \"(Name:'Exceptions', Ver:'1.1')\");\n      this._exceptionsCounter.add(1, this._getExceptionDimensions(logRecord.resource));\n    } else if (this._isTraceTelemetry(logRecord)) {\n      logRecord.setAttribute(\"_MS.ProcessedByMetricExtractors\", \"(Name:'Traces', Ver:'1.1')\");\n      this._tracesCounter.add(1, this._getTraceDimensions(logRecord.resource));\n    }\n  }\n\n  private _getRequestDimensions(span: ReadableSpan): Attributes {\n    const dimensions: MetricRequestDimensions = this._getBaseDimensions(span.resource);\n    dimensions.metricId = \"requests/duration\";\n    const statusCode = String(span.attributes[\"http.status_code\"]);\n    dimensions.requestResultCode = statusCode;\n    dimensions.requestSuccess = statusCode === \"200\" ? \"True\" : \"False\";\n    return dimensions as Attributes;\n  }\n\n  private _getDependencyDimensions(span: ReadableSpan): Attributes {\n    const dimensions: MetricDependencyDimensions = this._getBaseDimensions(span.resource);\n    dimensions.metricId = \"dependencies/duration\";\n    const statusCode = String(span.attributes[\"http.status_code\"]);\n    dimensions.dependencyTarget = this._getDependencyTarget(span.attributes);\n    dimensions.dependencyResultCode = statusCode;\n    dimensions.dependencyType = \"http\";\n    dimensions.dependencySuccess = statusCode === \"200\" ? \"True\" : \"False\";\n    return dimensions as Attributes;\n  }\n\n  private _getExceptionDimensions(resource: Resource): Attributes {\n    const dimensions: StandardMetricBaseDimensions = this._getBaseDimensions(resource);\n    dimensions.metricId = \"exceptions/count\";\n    return dimensions as Attributes;\n  }\n\n  private _getTraceDimensions(resource: Resource): Attributes {\n    const dimensions: StandardMetricBaseDimensions = this._getBaseDimensions(resource);\n    dimensions.metricId = \"traces/count\";\n    return dimensions as Attributes;\n  }\n\n  private _getBaseDimensions(resource: Resource): StandardMetricBaseDimensions {\n    const dimensions: StandardMetricBaseDimensions = {};\n    dimensions.IsAutocollected = \"True\";\n    if (resource) {\n      const spanResourceAttributes = resource.attributes;\n      const serviceName = spanResourceAttributes[SemanticResourceAttributes.SERVICE_NAME];\n      const serviceNamespace = spanResourceAttributes[SemanticResourceAttributes.SERVICE_NAMESPACE];\n      if (serviceName) {\n        if (serviceNamespace) {\n          dimensions.cloudRoleName = `${serviceNamespace}.${serviceName}`;\n        } else {\n          dimensions.cloudRoleName = String(serviceName);\n        }\n      }\n      const serviceInstanceId =\n        spanResourceAttributes[SemanticResourceAttributes.SERVICE_INSTANCE_ID];\n      dimensions.cloudRoleInstance = String(serviceInstanceId);\n    }\n    return dimensions;\n  }\n\n  private _getDependencyTarget(attributes: Attributes): string {\n    if (!attributes) {\n      return \"\";\n    }\n    const peerService = attributes[SemanticAttributes.PEER_SERVICE];\n    const httpHost = attributes[SemanticAttributes.HTTP_HOST];\n    const httpUrl = attributes[SemanticAttributes.HTTP_URL];\n    const netPeerName = attributes[SemanticAttributes.NET_PEER_NAME];\n    const netPeerIp = attributes[SemanticAttributes.NET_PEER_IP];\n    if (peerService) {\n      return String(peerService);\n    } else if (httpHost) {\n      return String(httpHost);\n    } else if (httpUrl) {\n      return String(httpUrl);\n    } else if (netPeerName) {\n      return String(netPeerName);\n    } else if (netPeerIp) {\n      return String(netPeerIp);\n    }\n    return \"\";\n  }\n\n  private _isExceptionTelemetry(logRecord: LogRecord) {\n    const baseType = logRecord.attributes[\"_MS.baseType\"];\n    // If Application Insights Legacy logs\n    if (baseType && baseType === \"ExceptionData\") {\n      return true;\n    } else if (\n      logRecord.attributes[SemanticAttributes.EXCEPTION_MESSAGE] ||\n      logRecord.attributes[SemanticAttributes.EXCEPTION_TYPE]\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _isTraceTelemetry(logRecord: LogRecord) {\n    const baseType = logRecord.attributes[\"_MS.baseType\"];\n    // If Application Insights Legacy logs\n    if (baseType && baseType === \"MessageData\") {\n      return true;\n    } else if (\n      !logRecord.attributes[SemanticAttributes.EXCEPTION_MESSAGE] &&\n      !logRecord.attributes[SemanticAttributes.EXCEPTION_TYPE]\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}