{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/metrics/handler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport { Meter, metrics } from \"@opentelemetry/api\";\nimport { OTLPMetricExporter } from \"@opentelemetry/exporter-metrics-otlp-http\";\nimport {\n  MeterProvider,\n  MeterProviderOptions,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { AzureMonitorOpenTelemetryConfig } from \"../shared/config\";\nimport { PerformanceCounterMetrics } from \"./performanceCounters\";\nimport { StandardMetrics } from \"./standardMetrics\";\nimport { ReadableSpan, Span } from \"@opentelemetry/sdk-trace-base\";\nimport { LogRecord } from \"@opentelemetry/sdk-logs\";\n\n/**\n * Azure Monitor OpenTelemetry Metric Handler\n */\nexport class MetricHandler {\n  private _collectionInterval = 60000; // 60 seconds\n  private _meterProvider: MeterProvider;\n  private _azureExporter: AzureMonitorMetricExporter;\n  private _otlpExporter?: OTLPMetricExporter;\n  private _metricReader: PeriodicExportingMetricReader;\n  private _meter: Meter;\n  private _perfCounterMetrics?: PerformanceCounterMetrics;\n  private _standardMetrics?: StandardMetrics;\n  private _config: AzureMonitorOpenTelemetryConfig;\n\n  /**\n   * Initializes a new instance of the MetricHandler class.\n   * @param config - Distro configuration.\n   * @param options - Metric Handler options.\n   */\n  constructor(config: AzureMonitorOpenTelemetryConfig, options?: { collectionInterval: number }) {\n    this._config = config;\n    if (this._config.enableAutoCollectStandardMetrics) {\n      this._standardMetrics = new StandardMetrics(this._config);\n    }\n    if (this._config.enableAutoCollectPerformance) {\n      this._perfCounterMetrics = new PerformanceCounterMetrics(this._config);\n    }\n    const meterProviderConfig: MeterProviderOptions = {\n      resource: this._config.resource,\n    };\n    this._meterProvider = new MeterProvider(meterProviderConfig);\n    this._azureExporter = new AzureMonitorMetricExporter(this._config.azureMonitorExporterConfig);\n    let metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._azureExporter as any,\n      exportIntervalMillis: options?.collectionInterval || this._collectionInterval,\n    };\n    this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n    this._meterProvider.addMetricReader(this._metricReader);\n\n    if (config.otlpMetricExporterConfig?.enabled) {\n      this._otlpExporter = new OTLPMetricExporter(config.otlpMetricExporterConfig);\n      const otlpMetricReader = new PeriodicExportingMetricReader({\n        exporter: this._otlpExporter,\n        exportIntervalMillis: options?.collectionInterval || this._collectionInterval,\n      });\n      this._meterProvider.addMetricReader(otlpMetricReader);\n    }\n    metrics.setGlobalMeterProvider(this._meterProvider);\n    this._meter = this._meterProvider.getMeter(\"AzureMonitorMeter\");\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider {\n    return this._meterProvider;\n  }\n\n  /**\n   *Get OpenTelemetry Meter\n   */\n  public getMeter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider for standard metrics\n   */\n  public getStandardMetricsMeterProvider(): MeterProvider | undefined {\n    return this._standardMetrics?.getMeterProvider();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider for performance counter metrics\n   */\n  public getPerfCountersMeterProvider(): MeterProvider | undefined {\n    return this._perfCounterMetrics?.getMeterProvider();\n  }\n\n  public markSpanAsProcessed(span: Span): void {\n    this._standardMetrics?.markSpanAsProcessed(span);\n  }\n\n  public recordSpan(span: ReadableSpan): void {\n    this._standardMetrics?.recordSpan(span);\n    this._perfCounterMetrics?.recordSpan(span);\n  }\n\n  public recordLog(logRecord: LogRecord): void {\n    this._standardMetrics?.recordLog(logRecord);\n  }\n\n  /**\n   * Shutdown handler, all Meter providers will return no-op Meters\n   */\n  public async shutdown(): Promise<void> {\n    this._meterProvider.shutdown();\n    this._perfCounterMetrics?.shutdown();\n    this._standardMetrics?.shutdown();\n  }\n\n  /**\n   * Force flush all Meter Providers\n   */\n  public async flush(): Promise<void> {\n    await this._meterProvider.forceFlush();\n    await this._perfCounterMetrics?.flush();\n    await this._standardMetrics?.flush();\n  }\n}\n"]}