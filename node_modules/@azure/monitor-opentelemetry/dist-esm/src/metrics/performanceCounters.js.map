{"version":3,"file":"performanceCounters.js","sourceRoot":"","sources":["../../../src/metrics/performanceCounters.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as os from \"os\";\nimport {\n  Histogram,\n  Meter,\n  ObservableCallback,\n  ObservableGauge,\n  ObservableResult,\n  SpanKind,\n  ValueType,\n} from \"@opentelemetry/api\";\nimport { AzureMonitorOpenTelemetryConfig } from \"../shared/config\";\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport {\n  MeterProvider,\n  MeterProviderOptions,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\nimport { SemanticAttributes } from \"@opentelemetry/semantic-conventions\";\nimport { PerformanceCounterMetricNames } from \"./types\";\n\n/**\n * Azure Monitor Performance Counter Metrics\n * @internal\n */\nexport class PerformanceCounterMetrics {\n  private _config: AzureMonitorOpenTelemetryConfig;\n  private _collectionInterval = 60000; // 60 seconds\n  private _meterProvider: MeterProvider;\n  private _azureExporter: AzureMonitorMetricExporter;\n  private _metricReader: PeriodicExportingMetricReader;\n  private _meter: Meter;\n  private _requestDurationHistogram: Histogram;\n  private _requestRateGauge: ObservableGauge;\n  private _requestRateGaugeCallback: ObservableCallback;\n  private _memoryPrivateBytesGauge: ObservableGauge;\n  private _memoryPrivateBytesGaugeCallback: ObservableCallback;\n  private _memoryAvailableBytesGauge: ObservableGauge;\n  private _memoryAvailableBytesGaugeCallback: ObservableCallback;\n  private _processorTimeGauge: ObservableGauge;\n  private _processorTimeGaugeCallback: ObservableCallback;\n  private _processTimeGauge: ObservableGauge;\n  private _processTimeGaugeCallback: ObservableCallback;\n  private _totalCount = 0;\n  private _intervalExecutionTime = 0;\n  private _lastRequestRate: { count: number; time: number; executionInterval: number };\n  private _lastAppCpuUsage: { user: number; system: number };\n  private _lastHrtime: number[];\n  private _lastCpus: {\n    model: string;\n    speed: number;\n    times: { user: number; nice: number; sys: number; idle: number; irq: number };\n  }[];\n  private _lastCpusProcess: {\n    model: string;\n    speed: number;\n    times: { user: number; nice: number; sys: number; idle: number; irq: number };\n  }[];\n\n  /**\n   * Initializes a new instance of the PerformanceCounterMetrics class.\n   * @param config - Distro configuration.\n   * @param options - Performance Counters options.\n   */\n  constructor(config: AzureMonitorOpenTelemetryConfig, options?: { collectionInterval: number }) {\n    this._config = config;\n    this._lastCpus = os.cpus();\n    this._lastCpusProcess = os.cpus();\n    this._lastAppCpuUsage = (process as any).cpuUsage();\n    this._lastHrtime = process.hrtime();\n\n    this._lastRequestRate = {\n      count: this._totalCount,\n      time: +new Date(),\n      executionInterval: this._intervalExecutionTime,\n    };\n\n    const meterProviderConfig: MeterProviderOptions = {\n      resource: this._config.resource,\n    };\n    this._meterProvider = new MeterProvider(meterProviderConfig);\n    this._azureExporter = new AzureMonitorMetricExporter(this._config.azureMonitorExporterConfig);\n    const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._azureExporter as any,\n      exportIntervalMillis: options?.collectionInterval || this._collectionInterval,\n    };\n    this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n    this._meterProvider.addMetricReader(this._metricReader);\n    this._meter = this._meterProvider.getMeter(\"AzureMonitorPerformanceCountersMeter\");\n\n    this._lastRequestRate = { count: 0, time: 0, executionInterval: 0 };\n\n    // Create Instruments\n    this._requestDurationHistogram = this._meter.createHistogram(\n      PerformanceCounterMetricNames.REQUEST_DURATION,\n      { valueType: ValueType.DOUBLE }\n    );\n    this._requestRateGauge = this._meter.createObservableGauge(\n      PerformanceCounterMetricNames.REQUEST_RATE,\n      {\n        description: \"Incoming Requests Average Execution Time\",\n        valueType: ValueType.DOUBLE,\n      }\n    );\n    this._memoryPrivateBytesGauge = this._meter.createObservableGauge(\n      PerformanceCounterMetricNames.PRIVATE_BYTES,\n      { description: \"Amount of memory process has used in bytes\", valueType: ValueType.INT }\n    );\n    this._memoryAvailableBytesGauge = this._meter.createObservableGauge(\n      PerformanceCounterMetricNames.AVAILABLE_BYTES,\n      { description: \"Amount of available memory in bytes\", valueType: ValueType.INT }\n    );\n    this._processorTimeGauge = this._meter.createObservableGauge(\n      PerformanceCounterMetricNames.PROCESSOR_TIME,\n      {\n        description: \"Processor time as a percentage\",\n        valueType: ValueType.DOUBLE,\n      }\n    );\n    this._processTimeGauge = this._meter.createObservableGauge(\n      PerformanceCounterMetricNames.PROCESS_TIME,\n      {\n        description: \"Process CPU usage as a percentage\",\n        valueType: ValueType.DOUBLE,\n      }\n    );\n\n    // Add callbacks\n    this._requestRateGaugeCallback = this._getRequestRate.bind(this);\n    this._memoryPrivateBytesGaugeCallback = this._getPrivateMemory.bind(this);\n    this._memoryAvailableBytesGaugeCallback = this._getAvailableMemory.bind(this);\n    this._processorTimeGaugeCallback = this._getProcessorTime.bind(this);\n    this._processTimeGaugeCallback = this._getProcessTime.bind(this);\n    this._memoryPrivateBytesGauge.addCallback(this._memoryPrivateBytesGaugeCallback);\n    this._memoryAvailableBytesGauge.addCallback(this._memoryAvailableBytesGaugeCallback);\n    this._processTimeGauge.addCallback(this._processTimeGaugeCallback);\n    this._processorTimeGauge.addCallback(this._processorTimeGaugeCallback);\n    this._requestRateGauge.addCallback(this._requestRateGaugeCallback);\n  }\n\n  /**\n   * Shutdown Meter Provider it will return no-op Meters after being called.\n   */\n  public shutdown() {\n    this._meterProvider.shutdown();\n  }\n\n  /**\n   * Force flush Meter Provider.\n   */\n  public async flush(): Promise<void> {\n    await this._meterProvider.forceFlush();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider {\n    return this._meterProvider;\n  }\n\n  /**\n   * Record Span metrics\n   */\n  public recordSpan(span: ReadableSpan): void {\n    if (span.kind !== SpanKind.SERVER) {\n      return;\n    }\n    const durationMs = span.duration[0];\n    this._requestDurationHistogram.record(durationMs);\n\n    let success = false;\n    const statusCode = parseInt(String(span.attributes[SemanticAttributes.HTTP_STATUS_CODE]));\n    if (!isNaN(statusCode)) {\n      success = 0 < statusCode && statusCode < 500;\n    }\n    if (success) {\n      this._totalCount++;\n    }\n    this._intervalExecutionTime += durationMs;\n  }\n\n  private _getRequestRate(observableResult: ObservableResult) {\n    const currentTime = +new Date();\n    const intervalRequests = this._totalCount - this._lastRequestRate.count || 0;\n    const elapsedMs = currentTime - this._lastRequestRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const requestsPerSec = intervalRequests / elapsedSeconds;\n      observableResult.observe(requestsPerSec);\n    }\n    this._lastRequestRate = {\n      count: this._totalCount,\n      time: currentTime,\n      executionInterval: this._lastRequestRate.executionInterval,\n    };\n  }\n\n  private _getPrivateMemory(observableResult: ObservableResult) {\n    observableResult.observe(process.memoryUsage().rss);\n  }\n\n  private _getAvailableMemory(observableResult: ObservableResult) {\n    observableResult.observe(os.freemem());\n  }\n\n  private _getTotalCombinedCpu(cpus: os.CpuInfo[], lastCpus: os.CpuInfo[]) {\n    let totalUser = 0;\n    let totalSys = 0;\n    let totalNice = 0;\n    let totalIdle = 0;\n    let totalIrq = 0;\n    for (let i = 0; !!cpus && i < cpus.length; i++) {\n      const cpu = cpus[i];\n      const lastCpu = lastCpus[i];\n      const times = cpu.times;\n      const lastTimes = lastCpu.times;\n      // user cpu time (or) % CPU time spent in user space\n      let user = times.user - lastTimes.user;\n      user = user > 0 ? user : 0; // Avoid negative values\n      totalUser += user;\n      // system cpu time (or) % CPU time spent in kernel space\n      let sys = times.sys - lastTimes.sys;\n      sys = sys > 0 ? sys : 0; // Avoid negative values\n      totalSys += sys;\n      // user nice cpu time (or) % CPU time spent on low priority processes\n      let nice = times.nice - lastTimes.nice;\n      nice = nice > 0 ? nice : 0; // Avoid negative values\n      totalNice += nice;\n      // idle cpu time (or) % CPU time spent idle\n      let idle = times.idle - lastTimes.idle;\n      idle = idle > 0 ? idle : 0; // Avoid negative values\n      totalIdle += idle;\n      // irq (or) % CPU time spent servicing/handling hardware interrupts\n      let irq = times.irq - lastTimes.irq;\n      irq = irq > 0 ? irq : 0; // Avoid negative values\n      totalIrq += irq;\n    }\n    const combinedTotal = totalUser + totalSys + totalNice + totalIdle + totalIrq;\n    return {\n      combinedTotal: combinedTotal,\n      totalUser: totalUser,\n      totalIdle: totalIdle,\n    };\n  }\n\n  private _getProcessorTime(observableResult: ObservableResult) {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    const cpus = os.cpus();\n    if (cpus && cpus.length && this._lastCpus && cpus.length === this._lastCpus.length) {\n      const cpuTotals = this._getTotalCombinedCpu(cpus, this._lastCpus);\n\n      const value =\n        cpuTotals.combinedTotal > 0\n          ? ((cpuTotals.combinedTotal - cpuTotals.totalIdle) / cpuTotals.combinedTotal) * 100\n          : 0;\n      observableResult.observe(value);\n    }\n    this._lastCpus = cpus;\n  }\n\n  private _getProcessTime(observableResult: ObservableResult) {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    const cpus = os.cpus();\n    if (\n      cpus &&\n      cpus.length &&\n      this._lastCpusProcess &&\n      cpus.length === this._lastCpusProcess.length\n    ) {\n      // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\n      let appCpuPercent: number | undefined = undefined;\n      const appCpuUsage = (process as any).cpuUsage();\n      const hrtime = process.hrtime();\n      const totalApp =\n        appCpuUsage.user -\n          this._lastAppCpuUsage.user +\n          (appCpuUsage.system - this._lastAppCpuUsage.system) || 0;\n\n      if (typeof this._lastHrtime !== \"undefined\" && this._lastHrtime.length === 2) {\n        const elapsedTime =\n          (hrtime[0] - this._lastHrtime[0]) * 1e6 + (hrtime[1] - this._lastHrtime[1]) / 1e3 || 0; // convert to microseconds\n\n        appCpuPercent = (100 * totalApp) / (elapsedTime * cpus.length);\n      }\n      // Set previous\n      this._lastAppCpuUsage = appCpuUsage;\n      this._lastHrtime = hrtime;\n      const cpuTotals = this._getTotalCombinedCpu(cpus, this._lastCpusProcess);\n      const value = appCpuPercent || (cpuTotals.totalUser / cpuTotals.combinedTotal) * 100;\n      observableResult.observe(value);\n    }\n    this._lastCpusProcess = cpus;\n  }\n}\n"]}