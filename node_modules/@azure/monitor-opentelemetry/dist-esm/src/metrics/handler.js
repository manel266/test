// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { AzureMonitorMetricExporter } from "@azure/monitor-opentelemetry-exporter";
import { metrics } from "@opentelemetry/api";
import { OTLPMetricExporter } from "@opentelemetry/exporter-metrics-otlp-http";
import { MeterProvider, PeriodicExportingMetricReader, } from "@opentelemetry/sdk-metrics";
import { PerformanceCounterMetrics } from "./performanceCounters";
import { StandardMetrics } from "./standardMetrics";
/**
 * Azure Monitor OpenTelemetry Metric Handler
 */
export class MetricHandler {
    /**
     * Initializes a new instance of the MetricHandler class.
     * @param config - Distro configuration.
     * @param options - Metric Handler options.
     */
    constructor(config, options) {
        var _a;
        this._collectionInterval = 60000; // 60 seconds
        this._config = config;
        if (this._config.enableAutoCollectStandardMetrics) {
            this._standardMetrics = new StandardMetrics(this._config);
        }
        if (this._config.enableAutoCollectPerformance) {
            this._perfCounterMetrics = new PerformanceCounterMetrics(this._config);
        }
        const meterProviderConfig = {
            resource: this._config.resource,
        };
        this._meterProvider = new MeterProvider(meterProviderConfig);
        this._azureExporter = new AzureMonitorMetricExporter(this._config.azureMonitorExporterConfig);
        let metricReaderOptions = {
            exporter: this._azureExporter,
            exportIntervalMillis: (options === null || options === void 0 ? void 0 : options.collectionInterval) || this._collectionInterval,
        };
        this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);
        this._meterProvider.addMetricReader(this._metricReader);
        if ((_a = config.otlpMetricExporterConfig) === null || _a === void 0 ? void 0 : _a.enabled) {
            this._otlpExporter = new OTLPMetricExporter(config.otlpMetricExporterConfig);
            const otlpMetricReader = new PeriodicExportingMetricReader({
                exporter: this._otlpExporter,
                exportIntervalMillis: (options === null || options === void 0 ? void 0 : options.collectionInterval) || this._collectionInterval,
            });
            this._meterProvider.addMetricReader(otlpMetricReader);
        }
        metrics.setGlobalMeterProvider(this._meterProvider);
        this._meter = this._meterProvider.getMeter("AzureMonitorMeter");
    }
    /**
     *Get OpenTelemetry MeterProvider
     */
    getMeterProvider() {
        return this._meterProvider;
    }
    /**
     *Get OpenTelemetry Meter
     */
    getMeter() {
        return this._meter;
    }
    /**
     *Get OpenTelemetry MeterProvider for standard metrics
     */
    getStandardMetricsMeterProvider() {
        var _a;
        return (_a = this._standardMetrics) === null || _a === void 0 ? void 0 : _a.getMeterProvider();
    }
    /**
     *Get OpenTelemetry MeterProvider for performance counter metrics
     */
    getPerfCountersMeterProvider() {
        var _a;
        return (_a = this._perfCounterMetrics) === null || _a === void 0 ? void 0 : _a.getMeterProvider();
    }
    markSpanAsProcessed(span) {
        var _a;
        (_a = this._standardMetrics) === null || _a === void 0 ? void 0 : _a.markSpanAsProcessed(span);
    }
    recordSpan(span) {
        var _a, _b;
        (_a = this._standardMetrics) === null || _a === void 0 ? void 0 : _a.recordSpan(span);
        (_b = this._perfCounterMetrics) === null || _b === void 0 ? void 0 : _b.recordSpan(span);
    }
    recordLog(logRecord) {
        var _a;
        (_a = this._standardMetrics) === null || _a === void 0 ? void 0 : _a.recordLog(logRecord);
    }
    /**
     * Shutdown handler, all Meter providers will return no-op Meters
     */
    async shutdown() {
        var _a, _b;
        this._meterProvider.shutdown();
        (_a = this._perfCounterMetrics) === null || _a === void 0 ? void 0 : _a.shutdown();
        (_b = this._standardMetrics) === null || _b === void 0 ? void 0 : _b.shutdown();
    }
    /**
     * Force flush all Meter Providers
     */
    async flush() {
        var _a, _b;
        await this._meterProvider.forceFlush();
        await ((_a = this._perfCounterMetrics) === null || _a === void 0 ? void 0 : _a.flush());
        await ((_b = this._standardMetrics) === null || _b === void 0 ? void 0 : _b.flush());
    }
}
//# sourceMappingURL=handler.js.map