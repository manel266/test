{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/traces/handler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestOptions } from \"http\";\nimport { createAzureSdkInstrumentation } from \"@azure/opentelemetry-instrumentation-azure-sdk\";\nimport {\n  ApplicationInsightsSampler,\n  AzureMonitorTraceExporter,\n} from \"@azure/monitor-opentelemetry-exporter\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { NodeTracerProvider, NodeTracerConfig } from \"@opentelemetry/sdk-trace-node\";\nimport {\n  BatchSpanProcessor,\n  BufferConfig,\n  SpanProcessor,\n  Tracer,\n} from \"@opentelemetry/sdk-trace-base\";\nimport { Instrumentation } from \"@opentelemetry/instrumentation\";\nimport {\n  HttpInstrumentation,\n  HttpInstrumentationConfig,\n  IgnoreOutgoingRequestFunction,\n} from \"@opentelemetry/instrumentation-http\";\nimport { MongoDBInstrumentation } from \"@opentelemetry/instrumentation-mongodb\";\nimport { MySQLInstrumentation } from \"@opentelemetry/instrumentation-mysql\";\nimport { PgInstrumentation } from \"@opentelemetry/instrumentation-pg\";\nimport { RedisInstrumentation } from \"@opentelemetry/instrumentation-redis\";\nimport { RedisInstrumentation as Redis4Instrumentation } from \"@opentelemetry/instrumentation-redis-4\";\n\nimport { AzureMonitorOpenTelemetryConfig } from \"../shared/config\";\nimport { MetricHandler } from \"../metrics/handler\";\nimport { ignoreOutgoingRequestHook } from \"../utils/common\";\nimport { AzureMonitorSpanProcessor } from \"./spanProcessor\";\nimport { AzureFunctionsHook } from \"./azureFnHook\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Handler\n */\nexport class TraceHandler {\n  private _spanProcessor: BatchSpanProcessor;\n  private _tracerProvider: NodeTracerProvider;\n  private _tracer: Tracer;\n  private _azureExporter: AzureMonitorTraceExporter;\n  private _otlpExporter?: OTLPTraceExporter;\n  private _instrumentations: Instrumentation[];\n  private _httpInstrumentation?: Instrumentation;\n  private _azureSdkInstrumentation?: Instrumentation;\n  private _mongoDbInstrumentation?: Instrumentation;\n  private _mySqlInstrumentation?: Instrumentation;\n  private _postgressInstrumentation?: Instrumentation;\n  private _redisInstrumentation?: Instrumentation;\n  private _redis4Instrumentation?: Instrumentation;\n  private _config: AzureMonitorOpenTelemetryConfig;\n  private _metricHandler: MetricHandler;\n  private _azureFunctionsHook: AzureFunctionsHook;\n\n  /**\n   * Initializes a new instance of the TraceHandler class.\n   * @param _config - Configuration.\n   * @param _metricHandler - MetricHandler.\n   */\n  constructor(config: AzureMonitorOpenTelemetryConfig, metricHandler: MetricHandler) {\n    this._config = config;\n    this._metricHandler = metricHandler;\n    this._instrumentations = [];\n    const aiSampler = new ApplicationInsightsSampler(this._config.samplingRatio);\n    const tracerConfig: NodeTracerConfig = {\n      sampler: aiSampler,\n      resource: this._config.resource,\n      forceFlushTimeoutMillis: 30000,\n    };\n    this._tracerProvider = new NodeTracerProvider(tracerConfig);\n    this._azureExporter = new AzureMonitorTraceExporter(this._config.azureMonitorExporterConfig);\n    const bufferConfig: BufferConfig = {\n      maxExportBatchSize: 512,\n      scheduledDelayMillis: 5000,\n      exportTimeoutMillis: 30000,\n      maxQueueSize: 2048,\n    };\n    this._spanProcessor = new BatchSpanProcessor(this._azureExporter, bufferConfig);\n    this._tracerProvider.addSpanProcessor(this._spanProcessor);\n\n    if (this._config.otlpTraceExporterConfig?.enabled) {\n      this._otlpExporter = new OTLPTraceExporter(config.otlpTraceExporterConfig);\n      let otlpSpanProcessor = new BatchSpanProcessor(this._otlpExporter, bufferConfig);\n      this._tracerProvider.addSpanProcessor(otlpSpanProcessor);\n    }\n\n    this._tracerProvider.register();\n    this._tracer = this._tracerProvider.getTracer(\"AzureMonitorTracer\");\n    const azureSpanProcessor = new AzureMonitorSpanProcessor(this._metricHandler);\n    this._tracerProvider.addSpanProcessor(azureSpanProcessor);\n    this._azureFunctionsHook = new AzureFunctionsHook();\n    this._initializeInstrumentations();\n  }\n\n  /**\n   *Get OpenTelemetry TracerProvider\n   */\n  public getTracerProvider(): NodeTracerProvider {\n    return this._tracerProvider;\n  }\n\n  /**\n   *Get OpenTelemetry Tracer\n   */\n  public getTracer(): Tracer {\n    return this._tracer;\n  }\n\n  /**\n   * Shutdown handler, all Tracer providers will return no-op Tracers\n   */\n  public async shutdown(): Promise<void> {\n    await this._tracerProvider.shutdown();\n    this._azureFunctionsHook.shutdown();\n  }\n\n  /**\n   * Force flush Tracer Provider\n   */\n  public async flush(): Promise<void> {\n    return this._tracerProvider.forceFlush();\n  }\n\n  /**\n   * Add OpenTelemetry Span Processor\n   */\n  public addSpanProcessor(spanProcessor: SpanProcessor) {\n    this._tracerProvider.addSpanProcessor(spanProcessor);\n  }\n\n  /**\n   * Add OpenTelemetry Instrumentation, should be called before calling start\n   */\n  public addInstrumentation(instrumentation?: Instrumentation) {\n    if (instrumentation) {\n      this._instrumentations.push(instrumentation);\n    }\n  }\n\n  /**\n   * Disable all OpenTelemetry Instrumentations\n   */\n  public disableInstrumentations() {\n    this._instrumentations.forEach((instrumentation) => {\n      instrumentation.disable();\n    });\n  }\n\n  /**\n   * Start auto collection of telemetry\n   */\n  private _initializeInstrumentations() {\n    if (!this._httpInstrumentation) {\n      const httpinstrumentationOptions = this._config.instrumentationOptions\n        .http as HttpInstrumentationConfig;\n      const providedIgnoreOutgoingRequestHook =\n        httpinstrumentationOptions.ignoreOutgoingRequestHook;\n      const mergedIgnoreOutgoingRequestHook: IgnoreOutgoingRequestFunction = (\n        request: RequestOptions\n      ) => {\n        const result = ignoreOutgoingRequestHook(request);\n        if (!result) {\n          // Not internal call\n          if (providedIgnoreOutgoingRequestHook) {\n            // Provided hook in config\n            return providedIgnoreOutgoingRequestHook(request);\n          }\n        }\n        return result;\n      };\n      httpinstrumentationOptions.ignoreOutgoingRequestHook = mergedIgnoreOutgoingRequestHook;\n      this._httpInstrumentation = new HttpInstrumentation(this._config.instrumentationOptions.http);\n      this.addInstrumentation(this._httpInstrumentation);\n    }\n    if (!this._azureSdkInstrumentation) {\n      this._azureSdkInstrumentation = createAzureSdkInstrumentation(\n        this._config.instrumentationOptions.azureSdk\n      ) as any;\n      this.addInstrumentation(this._azureSdkInstrumentation);\n    }\n    if (!this._mongoDbInstrumentation) {\n      this._mongoDbInstrumentation = new MongoDBInstrumentation(\n        this._config.instrumentationOptions.mongoDb\n      );\n      this.addInstrumentation(this._mongoDbInstrumentation);\n    }\n    if (!this._mySqlInstrumentation) {\n      this._mySqlInstrumentation = new MySQLInstrumentation(\n        this._config.instrumentationOptions.mySql\n      );\n      this.addInstrumentation(this._mySqlInstrumentation);\n    }\n    if (!this._postgressInstrumentation) {\n      this._postgressInstrumentation = new PgInstrumentation(\n        this._config.instrumentationOptions.postgreSql\n      );\n      this.addInstrumentation(this._postgressInstrumentation);\n    }\n    if (!this._redisInstrumentation) {\n      this._redisInstrumentation = new RedisInstrumentation(\n        this._config.instrumentationOptions.redis\n      );\n      this.addInstrumentation(this._redisInstrumentation);\n    }\n    if (!this._redis4Instrumentation) {\n      this._redis4Instrumentation = new Redis4Instrumentation(\n        this._config.instrumentationOptions.redis4\n      );\n      this.addInstrumentation(this._redis4Instrumentation);\n    }\n    this._instrumentations.forEach((instrumentation) => {\n      instrumentation.setTracerProvider(this._tracerProvider);\n      instrumentation.setMeterProvider(this._metricHandler.getMeterProvider());\n      if (instrumentation.getConfig().enabled) {\n        instrumentation.enable();\n      }\n    });\n  }\n}\n"]}