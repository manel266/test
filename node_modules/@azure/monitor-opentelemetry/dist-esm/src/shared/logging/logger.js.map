{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../../src/shared/logging/logger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag, DiagLogger, DiagLogLevel } from \"@opentelemetry/api\";\nimport { InternalAzureLogger } from \"./internal\";\n\nexport class Logger implements DiagLogger {\n  private static _instance: Logger;\n\n  private _TAG = \"ApplicationInsights:\";\n  private _diagLevel: DiagLogLevel;\n  private _internalLogger: InternalAzureLogger;\n\n  static getInstance() {\n    if (!Logger._instance) {\n      Logger._instance = new Logger();\n    }\n    return Logger._instance;\n  }\n\n  constructor() {\n    this._internalLogger = new InternalAzureLogger();\n    const envLogLevel = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL;\n    this._diagLevel = DiagLogLevel.WARN; // Default\n    switch (envLogLevel) {\n      case \"ALL\":\n        this._diagLevel = DiagLogLevel.ALL;\n        break;\n      case \"DEBUG\":\n        this._diagLevel = DiagLogLevel.DEBUG;\n        break;\n      case \"ERROR\":\n        this._diagLevel = DiagLogLevel.ERROR;\n        break;\n      case \"INFO\":\n        this._diagLevel = DiagLogLevel.INFO;\n        break;\n      case \"NONE\":\n        this._diagLevel = DiagLogLevel.NONE;\n        break;\n      case \"VERBOSE\":\n        this._diagLevel = DiagLogLevel.VERBOSE;\n        break;\n      case \"WARN\":\n        this._diagLevel = DiagLogLevel.WARN;\n        break;\n    }\n    this.updateLogLevel(this._diagLevel);\n  }\n\n  /**\n   * Set the global LogLevel. If a global diag logger is already set, this will override it.\n   * @param logLevel - The DiagLogLevel used to filter logs sent to the logger.\n   * @param suppressOverrideMessage - Setting that suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  public updateLogLevel(logLevel: DiagLogLevel, suppressOverrideMessage = true) {\n    this._diagLevel = logLevel;\n\n    // Set OpenTelemetry Logger\n    diag.setLogger(this, {\n      logLevel: this._diagLevel,\n      suppressOverrideMessage,\n    });\n  }\n\n  public error(message?: any, ...optionalParams: any[]) {\n    if (this._diagLevel >= DiagLogLevel.ERROR) {\n      this._internalLogger.logMessage(this._TAG + message, optionalParams);\n    }\n  }\n\n  public warn(message?: any, ...optionalParams: any[]) {\n    if (this._diagLevel >= DiagLogLevel.WARN) {\n      this._internalLogger.logMessage(this._TAG + message, optionalParams);\n    }\n  }\n\n  public info(message?: any, ...optionalParams: any[]) {\n    if (this._diagLevel >= DiagLogLevel.INFO) {\n      this._internalLogger.logMessage(this._TAG + message, optionalParams);\n    }\n  }\n\n  public debug(message?: any, ...optionalParams: any[]) {\n    if (this._diagLevel >= DiagLogLevel.DEBUG) {\n      this._internalLogger.logMessage(this._TAG + message, optionalParams);\n    }\n  }\n\n  public verbose(message?: any, ...optionalParams: any[]) {\n    if (this._diagLevel >= DiagLogLevel.VERBOSE) {\n      this._internalLogger.logMessage(this._TAG + message, optionalParams);\n    }\n  }\n}\n"]}