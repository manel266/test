{"version":3,"file":"jsonConfig.js","sourceRoot":"","sources":["../../../src/shared/jsonConfig.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAO7B,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,MAAM,sBAAsB,GAAG,wCAAwC,CAAC;AACxE,MAAM,WAAW,GAAG,2CAA2C,CAAC;AAEhE;;;GAGG;AACH,MAAM,OAAO,UAAU;IA4BrB,6BAA6B;IACtB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YACzB,UAAU,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACzC;QACD,OAAO,UAAU,CAAC,SAAS,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH;QACE,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,aAAa;QACnB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACnD,6CAA6C;QAC7C,IAAI,iBAAiB,EAAE;YACrB,UAAU,GAAG,iBAAiB,CAAC;SAChC;QACD,YAAY;aACP;YACH,IAAI,cAAc,GAAG,0BAA0B,CAAC;YAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,+CAA+C;YACjG,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,UAAU;YAC7D,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACrD,IAAI,UAAU,EAAE;gBACd,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC/B,OAAO,GAAG,UAAU,CAAC;iBACtB;qBAAM;oBACL,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,8CAA8C;iBAC1F;aACF;YACD,IAAI;gBACF,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC;aACrE;SACF;QACD,IAAI;YACF,MAAM,UAAU,GAAqC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC5E,IAAI,CAAC,0BAA0B,GAAG,UAAU,CAAC,0BAA0B,CAAC;YACxE,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC;YAC9D,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,wBAAwB,CAAC;YACpE,IAAI,CAAC,uBAAuB,GAAG,UAAU,CAAC,uBAAuB,CAAC;YAClE,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;YAC9C,IAAI,CAAC,4BAA4B,GAAG,UAAU,CAAC,4BAA4B,CAAC;YAC5E,IAAI,CAAC,gCAAgC,GAAG,UAAU,CAAC,gCAAgC,CAAC;YACpF,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;SACjE;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;SACzE;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport {\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n  OTLPExporterConfig,\n} from \"./types\";\nimport { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\nimport { Logger } from \"./logging\";\n\nconst ENV_CONFIGURATION_FILE = \"APPLICATIONINSIGHTS_CONFIGURATION_FILE\";\nconst ENV_CONTENT = \"APPLICATIONINSIGHTS_CONFIGURATION_CONTENT\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration through JSON File\n * @internal\n */\nexport class JsonConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio?: number;\n  /** Azure Monitor Exporter Configuration */\n  public azureMonitorExporterConfig?: AzureMonitorExporterOptions;\n  /** OTLP Trace Exporter Configuration */\n  public otlpTraceExporterConfig?: OTLPExporterConfig;\n  /** OTLP Metric Exporter Configuration */\n  public otlpMetricExporterConfig?: OTLPExporterConfig;\n  /** OTLP Log Exporter Configuration */\n  public otlpLogExporterConfig?: OTLPExporterConfig;\n  /**\n   * Sets the state of performance tracking (enabled by default)\n   * if true performance counters will be collected every second and sent to Azure Monitor\n   */\n  public enableAutoCollectPerformance?: boolean;\n  /**\n   * Sets the state of standard metrics tracking (enabled by default)\n   * if true Standard metrics will be collected every minute and sent to Azure Monitor\n   */\n  public enableAutoCollectStandardMetrics?: boolean;\n  /**\n   * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\n   */\n  public instrumentationOptions?: InstrumentationOptions;\n\n  private static _instance: JsonConfig;\n\n  /** Get Singleton instance */\n  public static getInstance() {\n    if (!JsonConfig._instance) {\n      JsonConfig._instance = new JsonConfig();\n    }\n    return JsonConfig._instance;\n  }\n\n  /**\n   * Initializes a new instance of the JsonConfig class.\n   */\n  constructor() {\n    this._loadJsonFile();\n  }\n\n  private _loadJsonFile() {\n    let jsonString = \"\";\n    const contentJsonConfig = process.env[ENV_CONTENT];\n    // JSON string added directly in env variable\n    if (contentJsonConfig) {\n      jsonString = contentJsonConfig;\n    }\n    // JSON file\n    else {\n      let configFileName = \"applicationinsights.json\";\n      let rootPath = path.join(__dirname, \"../../../\"); // Root of folder (__dirname = ../dist-esm/src)\n      let tempDir = path.join(rootPath, configFileName); // default\n      let configFile = process.env[ENV_CONFIGURATION_FILE];\n      if (configFile) {\n        if (path.isAbsolute(configFile)) {\n          tempDir = configFile;\n        } else {\n          tempDir = path.join(rootPath, configFile); // Relative path to applicationinsights folder\n        }\n      }\n      try {\n        jsonString = fs.readFileSync(tempDir, \"utf8\");\n      } catch (err) {\n        Logger.getInstance().info(\"Failed to read JSON config file: \", err);\n      }\n    }\n    try {\n      const jsonConfig: AzureMonitorOpenTelemetryOptions = JSON.parse(jsonString);\n      this.azureMonitorExporterConfig = jsonConfig.azureMonitorExporterConfig;\n      this.otlpLogExporterConfig = jsonConfig.otlpLogExporterConfig;\n      this.otlpMetricExporterConfig = jsonConfig.otlpMetricExporterConfig;\n      this.otlpTraceExporterConfig = jsonConfig.otlpTraceExporterConfig;\n      this.samplingRatio = jsonConfig.samplingRatio;\n      this.enableAutoCollectPerformance = jsonConfig.enableAutoCollectPerformance;\n      this.enableAutoCollectStandardMetrics = jsonConfig.enableAutoCollectStandardMetrics;\n      this.instrumentationOptions = jsonConfig.instrumentationOptions;\n    } catch (err) {\n      Logger.getInstance().info(\"Missing or invalid JSON config file: \", err);\n    }\n  }\n}\n"]}