// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import * as fs from "fs";
import * as path from "path";
import { Logger } from "./logging";
const ENV_CONFIGURATION_FILE = "APPLICATIONINSIGHTS_CONFIGURATION_FILE";
const ENV_CONTENT = "APPLICATIONINSIGHTS_CONFIGURATION_CONTENT";
/**
 * Azure Monitor OpenTelemetry Client Configuration through JSON File
 * @internal
 */
export class JsonConfig {
    /** Get Singleton instance */
    static getInstance() {
        if (!JsonConfig._instance) {
            JsonConfig._instance = new JsonConfig();
        }
        return JsonConfig._instance;
    }
    /**
     * Initializes a new instance of the JsonConfig class.
     */
    constructor() {
        this._loadJsonFile();
    }
    _loadJsonFile() {
        let jsonString = "";
        const contentJsonConfig = process.env[ENV_CONTENT];
        // JSON string added directly in env variable
        if (contentJsonConfig) {
            jsonString = contentJsonConfig;
        }
        // JSON file
        else {
            let configFileName = "applicationinsights.json";
            let rootPath = path.join(__dirname, "../../../"); // Root of folder (__dirname = ../dist-esm/src)
            let tempDir = path.join(rootPath, configFileName); // default
            let configFile = process.env[ENV_CONFIGURATION_FILE];
            if (configFile) {
                if (path.isAbsolute(configFile)) {
                    tempDir = configFile;
                }
                else {
                    tempDir = path.join(rootPath, configFile); // Relative path to applicationinsights folder
                }
            }
            try {
                jsonString = fs.readFileSync(tempDir, "utf8");
            }
            catch (err) {
                Logger.getInstance().info("Failed to read JSON config file: ", err);
            }
        }
        try {
            const jsonConfig = JSON.parse(jsonString);
            this.azureMonitorExporterConfig = jsonConfig.azureMonitorExporterConfig;
            this.otlpLogExporterConfig = jsonConfig.otlpLogExporterConfig;
            this.otlpMetricExporterConfig = jsonConfig.otlpMetricExporterConfig;
            this.otlpTraceExporterConfig = jsonConfig.otlpTraceExporterConfig;
            this.samplingRatio = jsonConfig.samplingRatio;
            this.enableAutoCollectPerformance = jsonConfig.enableAutoCollectPerformance;
            this.enableAutoCollectStandardMetrics = jsonConfig.enableAutoCollectStandardMetrics;
            this.instrumentationOptions = jsonConfig.instrumentationOptions;
        }
        catch (err) {
            Logger.getInstance().info("Missing or invalid JSON config file: ", err);
        }
    }
}
//# sourceMappingURL=jsonConfig.js.map