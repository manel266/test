{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/shared/config.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Resource,\n  ResourceDetectionConfig,\n  detectResourcesSync,\n  envDetectorSync,\n} from \"@opentelemetry/resources\";\nimport {\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n  OTLPExporterConfig,\n} from \"./types\";\nimport { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\nimport { JsonConfig } from \"./jsonConfig\";\nimport { Logger } from \"./logging\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration\n */\nexport class AzureMonitorOpenTelemetryConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio: number;\n  /** Azure Monitor Exporter Configuration */\n  public azureMonitorExporterConfig: AzureMonitorExporterOptions;\n  /** OTLP Trace Exporter Configuration */\n  public otlpTraceExporterConfig: OTLPExporterConfig;\n  /** OTLP Metric Exporter Configuration */\n  public otlpMetricExporterConfig: OTLPExporterConfig;\n  /** OTLP Log Exporter Configuration */\n  public otlpLogExporterConfig: OTLPExporterConfig;\n  /**\n   * Sets the state of performance tracking (enabled by default)\n   * if true performance counters will be collected every second and sent to Azure Monitor\n   */\n  public enableAutoCollectPerformance: boolean;\n  /**\n   * Sets the state of standard metrics tracking (enabled by default)\n   * if true Standard metrics will be collected every minute and sent to Azure Monitor\n   */\n  public enableAutoCollectStandardMetrics: boolean;\n  /**\n   * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\n   */\n  public instrumentationOptions: InstrumentationOptions;\n\n  private _resource: Resource;\n\n  public set resource(resource: Resource) {\n    this._resource = this._resource.merge(resource);\n  }\n\n  /**\n   *Get OpenTelemetry Resource\n   */\n  public get resource(): Resource {\n    return this._resource;\n  }\n\n  /**\n   * Initializes a new instance of the AzureMonitorOpenTelemetryConfig class.\n   */\n  constructor(options?: AzureMonitorOpenTelemetryOptions) {\n    // Default values\n    this.azureMonitorExporterConfig = {};\n    this.otlpLogExporterConfig = {};\n    this.otlpMetricExporterConfig = {};\n    this.otlpTraceExporterConfig = {};\n    this.enableAutoCollectPerformance = true;\n    this.enableAutoCollectStandardMetrics = true;\n    this.samplingRatio = 1;\n    this.instrumentationOptions = {\n      http: { enabled: true },\n      azureSdk: { enabled: false },\n      mongoDb: { enabled: false },\n      mySql: { enabled: false },\n      postgreSql: { enabled: false },\n      redis: { enabled: false },\n      redis4: { enabled: false },\n    };\n    this._resource = this._getDefaultResource();\n    // Merge JSON configuration file if available\n    this._mergeConfig();\n    // Check for explicitly passed options when instantiating client\n    // This will take precedence over other settings\n    if (options) {\n      // Merge default with provided options\n      this.azureMonitorExporterConfig = Object.assign(\n        this.azureMonitorExporterConfig,\n        options.azureMonitorExporterConfig\n      );\n      this.otlpTraceExporterConfig = Object.assign(\n        this.otlpTraceExporterConfig,\n        options.otlpTraceExporterConfig\n      );\n      this.otlpMetricExporterConfig = Object.assign(\n        this.otlpMetricExporterConfig,\n        options.otlpMetricExporterConfig\n      );\n      this.otlpLogExporterConfig = Object.assign(\n        this.otlpLogExporterConfig,\n        options.otlpLogExporterConfig\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        options.instrumentationOptions\n      );\n      this.resource = Object.assign(this.resource, options.resource);\n\n      this.enableAutoCollectPerformance =\n        options.enableAutoCollectPerformance || this.enableAutoCollectPerformance;\n      this.enableAutoCollectStandardMetrics =\n        options.enableAutoCollectStandardMetrics || this.enableAutoCollectStandardMetrics;\n      this.samplingRatio = options.samplingRatio || this.samplingRatio;\n    }\n  }\n\n  private _mergeConfig() {\n    try {\n      const jsonConfig = JsonConfig.getInstance();\n      this.enableAutoCollectPerformance =\n        jsonConfig.enableAutoCollectPerformance !== undefined\n          ? jsonConfig.enableAutoCollectPerformance\n          : this.enableAutoCollectPerformance;\n      this.enableAutoCollectStandardMetrics =\n        jsonConfig.enableAutoCollectStandardMetrics !== undefined\n          ? jsonConfig.enableAutoCollectStandardMetrics\n          : this.enableAutoCollectStandardMetrics;\n      this.samplingRatio =\n        jsonConfig.samplingRatio !== undefined ? jsonConfig.samplingRatio : this.samplingRatio;\n\n      this.azureMonitorExporterConfig = Object.assign(\n        this.azureMonitorExporterConfig,\n        jsonConfig.azureMonitorExporterConfig\n      );\n      this.otlpTraceExporterConfig = Object.assign(\n        this.otlpTraceExporterConfig,\n        jsonConfig.otlpTraceExporterConfig\n      );\n      this.otlpMetricExporterConfig = Object.assign(\n        this.otlpMetricExporterConfig,\n        jsonConfig.otlpMetricExporterConfig\n      );\n      this.otlpLogExporterConfig = Object.assign(\n        this.otlpLogExporterConfig,\n        jsonConfig.otlpLogExporterConfig\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        jsonConfig.instrumentationOptions\n      );\n    } catch (error) {\n      Logger.getInstance().error(\"Failed to load JSON config file values.\", error);\n    }\n  }\n\n  private _getDefaultResource(): Resource {\n    let resource = Resource.default();\n    // Load resource attributes from env\n    const detectResourceConfig: ResourceDetectionConfig = {\n      detectors: [envDetectorSync],\n    };\n    const envResource = detectResourcesSync(detectResourceConfig);\n    resource = resource.merge(envResource);\n    return resource;\n  }\n}\n"]}