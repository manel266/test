{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAMlC,OAAO,EAAE,+BAA+B,EAAE,MAAM,iBAAiB,CAAC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,MAAM,IAAI,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAE5D,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EACL,gCAAgC,EAChC,gBAAgB,EAChB,wBAAwB,GACzB,MAAM,SAAS,CAAC;AAEjB;;GAEG;AACH,MAAM,OAAO,+BAA+B;IAM1C;;;OAGG;IACH,YAAY,OAA0C;QACpD,IAAI,CAAC,OAAO,GAAG,IAAI,+BAA+B,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,KAAK;QAChB,IAAI;YACF,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YACjC,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAClC,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAChC;QAAC,OAAO,GAAG,EAAE;YACZ,cAAc,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;SACtE;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAEO,qBAAqB;;QAC3B,IAAI,qBAAqB,GAAG,CAAC,CAAC;QAC9B,IAAI,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,0CAAE,QAAQ,0CAAE,OAAO,EAAE;YAC1D,qBAAqB,IAAI,wBAAwB,CAAC,kBAAkB,CAAC;SACtE;QACD,IAAI,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,0CAAE,OAAO,0CAAE,OAAO,EAAE;YACzD,qBAAqB,IAAI,wBAAwB,CAAC,OAAO,CAAC;SAC3D;QACD,IAAI,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,0CAAE,KAAK,0CAAE,OAAO,EAAE;YACvD,qBAAqB,IAAI,wBAAwB,CAAC,KAAK,CAAC;SACzD;QACD,IAAI,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,0CAAE,UAAU,0CAAE,OAAO,EAAE;YAC5D,qBAAqB,IAAI,wBAAwB,CAAC,QAAQ,CAAC;SAC5D;QACD,IAAI,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,0CAAE,KAAK,0CAAE,OAAO,EAAE;YACvD,qBAAqB,IAAI,wBAAwB,CAAC,KAAK,CAAC;SACzD;QAED,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,aAAa,IAAI,gBAAgB,CAAC,MAAM,CAAC;QAEzC,IAAI;YACF,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC7D,eAAe,EAAE,qBAAqB;gBACtC,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,cAAc,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;SAC7E;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Meter, TracerProvider } from \"@opentelemetry/api\";\nimport { LoggerProvider, Logger } from \"@opentelemetry/sdk-logs\";\nimport { Tracer } from \"@opentelemetry/sdk-trace-base\";\nimport { MeterProvider } from \"@opentelemetry/sdk-metrics\";\nimport { AzureMonitorOpenTelemetryConfig } from \"./shared/config\";\nimport { MetricHandler } from \"./metrics\";\nimport { TraceHandler } from \"./traces/handler\";\nimport { Logger as InternalLogger } from \"./shared/logging\";\nimport { AzureMonitorOpenTelemetryOptions } from \"./shared/types\";\nimport { LogHandler } from \"./logs\";\nimport {\n  AZURE_MONITOR_STATSBEAT_FEATURES,\n  StatsbeatFeature,\n  StatsbeatInstrumentation,\n} from \"./types\";\n\n/**\n * Azure Monitor OpenTelemetry Client\n */\nexport class AzureMonitorOpenTelemetryClient {\n  private _config: AzureMonitorOpenTelemetryConfig;\n  private _traceHandler: TraceHandler;\n  private _metricHandler: MetricHandler;\n  private _logHandler: LogHandler;\n\n  /**\n   * Initializes a new instance of the AzureMonitorOpenTelemetryClient class.\n   * @param options Azure Monitor OpenTelemetry Options\n   */\n  constructor(options?: AzureMonitorOpenTelemetryOptions) {\n    this._config = new AzureMonitorOpenTelemetryConfig(options);\n    this._setStatsbeatFeatures();\n    this._metricHandler = new MetricHandler(this._config);\n    this._traceHandler = new TraceHandler(this._config, this._metricHandler);\n    this._logHandler = new LogHandler(this._config, this._metricHandler);\n  }\n\n  /**\n   *Get OpenTelemetry TracerProvider\n   */\n  public getTracerProvider(): TracerProvider {\n    return this._traceHandler.getTracerProvider();\n  }\n\n  /**\n   *Get OpenTelemetry TracerProvider\n   */\n  public getTracer(): Tracer {\n    return this._traceHandler.getTracer();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider {\n    return this._metricHandler.getMeterProvider();\n  }\n\n  /**\n   *Get OpenTelemetry Meter\n   */\n  public getMeter(): Meter {\n    return this._metricHandler.getMeter();\n  }\n\n  /**\n   *Get OpenTelemetry LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return this._logHandler.getLoggerProvider();\n  }\n\n  /**\n   *Get OpenTelemetry Logger\n   */\n  public getLogger(): Logger {\n    return this._logHandler.getLogger();\n  }\n\n  /**\n   *Try to send all queued telemetry if present.\n   */\n  public async flush(): Promise<void> {\n    try {\n      await this._traceHandler.flush();\n      await this._metricHandler.flush();\n      await this._logHandler.flush();\n    } catch (err) {\n      InternalLogger.getInstance().error(\"Failed to flush telemetry\", err);\n    }\n  }\n\n  /**\n   *Shutdown all handlers\n   */\n  public async shutdown(): Promise<void> {\n    this._traceHandler.shutdown();\n    this._metricHandler.shutdown();\n    this._logHandler.shutdown();\n  }\n\n  private _setStatsbeatFeatures() {\n    let instrumentationBitMap = 0;\n    if (this._config.instrumentationOptions?.azureSdk?.enabled) {\n      instrumentationBitMap |= StatsbeatInstrumentation.AZURE_CORE_TRACING;\n    }\n    if (this._config.instrumentationOptions?.mongoDb?.enabled) {\n      instrumentationBitMap |= StatsbeatInstrumentation.MONGODB;\n    }\n    if (this._config.instrumentationOptions?.mySql?.enabled) {\n      instrumentationBitMap |= StatsbeatInstrumentation.MYSQL;\n    }\n    if (this._config.instrumentationOptions?.postgreSql?.enabled) {\n      instrumentationBitMap |= StatsbeatInstrumentation.POSTGRES;\n    }\n    if (this._config.instrumentationOptions?.redis?.enabled) {\n      instrumentationBitMap |= StatsbeatInstrumentation.REDIS;\n    }\n\n    let featureBitMap = 0;\n    featureBitMap |= StatsbeatFeature.DISTRO;\n\n    try {\n      process.env[AZURE_MONITOR_STATSBEAT_FEATURES] = JSON.stringify({\n        instrumentation: instrumentationBitMap,\n        feature: featureBitMap,\n      });\n    } catch (error) {\n      InternalLogger.getInstance().error(\"Failed call to JSON.stringify.\", error);\n    }\n  }\n}\n"]}